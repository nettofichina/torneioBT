{"ast":null,"code":"// src/utils/torneioUtils.js\nexport const classificarDuplas = grupos => {\n  return grupos.flatMap(grupo => classificarDuplasPorDesempate(grupo.duplas, grupo.jogos)).slice(0, 4); // Top 4 para semifinais\n};\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\n  const jogos = [];\n  for (let i = 0; i < duplas.length; i++) {\n    for (let j = i + 1; j < duplas.length; j++) {\n      jogos.push({\n        dupla1: duplas[i],\n        dupla2: duplas[j],\n        placar: '',\n        submetido: false,\n        grupoId\n      });\n    }\n  }\n  return jogos;\n};\nexport const dividirGrupos = duplas => {\n  let numGrupos = Math.ceil(duplas.length / 3); // 3 é o número mínimo de duplas por grupo\n\n  if (duplas.length <= 5) numGrupos = 1; // Grupo único para até 5 duplas\n  else if (duplas.length <= 8) numGrupos = 2;else if (duplas.length <= 11) numGrupos = 3;else if (duplas.length <= 14) numGrupos = 4;else if (duplas.length <= 17) numGrupos = 5;else if (duplas.length <= 20) numGrupos = 6;\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\n    id: i,\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\n  }));\n  return grupos;\n};\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\n  const resultados = duplas.reduce((acc, dupla) => {\n    acc[dupla.join('')] = {\n      dupla,\n      pontos: 0\n    };\n    return acc;\n  }, {});\n  jogos.forEach(jogo => {\n    if (jogo.placar) {\n      const [games1, games2] = jogo.placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n\n      // Ajusta os pontos para cada dupla\n      if (games1 > games2) {\n        // Dupla 1 ganhou\n        resultados[chave1].pontos += 5;\n        resultados[chave2].pontos -= 5;\n      } else {\n        // Dupla 2 ganhou (não há empate)\n        resultados[chave2].pontos += 5;\n        resultados[chave1].pontos -= 5;\n      }\n    }\n  });\n\n  // Ordena por pontos\n  return Object.values(resultados).sort((a, b) => b.pontos - a.pontos).map(r => r.dupla);\n};","map":{"version":3,"names":["classificarDuplas","grupos","flatMap","grupo","classificarDuplasPorDesempate","duplas","jogos","slice","criarJogosParaGrupo","grupoId","i","length","j","push","dupla1","dupla2","placar","submetido","dividirGrupos","numGrupos","Math","ceil","Array","fill","map","_","id","resultados","reduce","acc","dupla","join","pontos","forEach","jogo","games1","games2","split","Number","chave1","chave2","Object","values","sort","a","b","r"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["// src/utils/torneioUtils.js\r\nexport const classificarDuplas = (grupos) => {\r\n  return grupos.flatMap(grupo => classificarDuplasPorDesempate(grupo.duplas, grupo.jogos))\r\n               .slice(0, 4); // Top 4 para semifinais\r\n};\r\n\r\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\r\n  const jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        grupoId\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const dividirGrupos = (duplas) => {\r\n  let numGrupos = Math.ceil(duplas.length / 3); // 3 é o número mínimo de duplas por grupo\r\n  \r\n  if (duplas.length <= 5) numGrupos = 1; // Grupo único para até 5 duplas\r\n  else if (duplas.length <= 8) numGrupos = 2;\r\n  else if (duplas.length <= 11) numGrupos = 3;\r\n  else if (duplas.length <= 14) numGrupos = 4;\r\n  else if (duplas.length <= 17) numGrupos = 5;\r\n  else if (duplas.length <= 20) numGrupos = 6;\r\n\r\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\r\n    id: i,\r\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\r\n  }));\r\n\r\n  return grupos;\r\n};\r\n\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  const resultados = duplas.reduce((acc, dupla) => {\r\n    acc[dupla.join('')] = { dupla, pontos: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  jogos.forEach(jogo => {\r\n    if (jogo.placar) {\r\n      const [games1, games2] = jogo.placar.split('-').map(Number);\r\n      const chave1 = jogo.dupla1.join('');\r\n      const chave2 = jogo.dupla2.join('');\r\n\r\n      // Ajusta os pontos para cada dupla\r\n      if (games1 > games2) {  // Dupla 1 ganhou\r\n        resultados[chave1].pontos += 5;\r\n        resultados[chave2].pontos -= 5;\r\n      } else {  // Dupla 2 ganhou (não há empate)\r\n        resultados[chave2].pontos += 5;\r\n        resultados[chave1].pontos -= 5;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Ordena por pontos\r\n  return Object.values(resultados).sort((a, b) => b.pontos - a.pontos).map(r => r.dupla);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}