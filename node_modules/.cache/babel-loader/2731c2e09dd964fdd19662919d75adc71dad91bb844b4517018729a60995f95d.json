{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseDeGrupos.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseDeGrupos = ({\n  grupos,\n  onAtualizarEstatisticas,\n  onUpdateGroups\n}) => {\n  _s();\n  const [gruposState, setGruposState] = useState(grupos);\n  const [globalJogoIndexCounter, setGlobalJogoIndexCounter] = useState(0);\n  useEffect(() => {\n    setGruposState(grupos);\n    setGlobalJogoIndexCounter(0); // Resetar contador ao atualizar grupos\n  }, [grupos]);\n  useEffect(() => {\n    if (onUpdateGroups) {\n      onUpdateGroups(gruposState);\n    }\n  }, [gruposState, onUpdateGroups]);\n  const handleSubmitScore = (placar, localJogoIndex, grupoIndex) => {\n    var _gruposState$find;\n    setGruposState(prevGrupos => {\n      const updatedGroups = prevGrupos.map(grupo => grupo.id === grupoIndex ? {\n        ...grupo,\n        jogos: grupo.jogos.map(jogo => jogo.jogoIndex === localJogoIndex ? {\n          ...jogo,\n          placar: placar,\n          submetido: true\n        } : jogo)\n      } : grupo);\n      console.log('Grupos após atualização:', updatedGroups);\n      return updatedGroups;\n    });\n\n    // Encontrar o jogo específico para enviar para atualizarEstatisticas\n    const jogo = (_gruposState$find = gruposState.find(g => g.id === grupoIndex)) === null || _gruposState$find === void 0 ? void 0 : _gruposState$find.jogos.find(j => j.jogoIndex === localJogoIndex);\n\n    // Garantir que jogoIndex seja único para todo o torneio\n    const globalJogoIndex = globalJogoIndexCounter;\n\n    // Incrementar o contador para o próximo jogo\n    setGlobalJogoIndexCounter(prev => prev + 1);\n\n    // Certificar-se de que jogo existe antes de prosseguir\n    if (jogo) {\n      const jogoInfo = {\n        ...jogo,\n        placar,\n        grupo: grupoIndex,\n        fase: 'Fase de Grupos',\n        jogoIndex: globalJogoIndex // Agora jogoIndex é único em todo o torneio\n      };\n      onAtualizarEstatisticas(jogoInfo);\n    } else {\n      console.error('Jogo não encontrado para atualização de estatísticas');\n    }\n  };\n\n  // Função para preencher e submeter todos os placares automaticamente com 6-2\n  const preencherTodosOsPlacares = () => {\n    setGruposState(prevGrupos => {\n      let newGlobalJogoIndexCounter = globalJogoIndexCounter;\n      const newGroups = prevGrupos.map(grupo => ({\n        ...grupo,\n        jogos: grupo.jogos.map(jogo => {\n          if (!jogo.submetido) {\n            const jogoInfo = {\n              ...jogo,\n              placar: '6-2',\n              grupo: grupoid,\n              fase: 'Fase de Grupos',\n              jogoIndex: newGlobalJogoIndexCounter++\n            };\n            onAtualizarEstatisticas(jogoInfo);\n            return {\n              ...jogo,\n              placar: '6-2',\n              submetido: true\n            };\n          }\n          return jogo;\n        })\n      }));\n      console.log('Novos grupos após preenchimento:', newGroups);\n      setGlobalJogoIndexCounter(newGlobalJogoIndexCounter); // Atualizar o contador global\n      return newGroups;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Fase de Grupos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), gruposState.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), grupo.jogos.map(jogo => /*#__PURE__*/_jsxDEV(Jogo, {\n        jogo: jogo,\n        onSubmitScore: placar => handleSubmitScore(placar, jogo.jogoIndex, grupo.id),\n        disabled: jogo.submetido // Desabilitar submissão se já submetido\n      }, jogo.jogoIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this))]\n    }, grupo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: preencherTodosOsPlacares,\n      children: \"Preencher e Submeter Todos os Placar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(FaseDeGrupos, \"QQ/X6acESxiRKFFWLTYRGZGe878=\");\n_c = FaseDeGrupos;\nexport default FaseDeGrupos;\nvar _c;\n$RefreshReg$(_c, \"FaseDeGrupos\");","map":{"version":3,"names":["React","useState","useEffect","Jogo","jsxDEV","_jsxDEV","FaseDeGrupos","grupos","onAtualizarEstatisticas","onUpdateGroups","_s","gruposState","setGruposState","globalJogoIndexCounter","setGlobalJogoIndexCounter","handleSubmitScore","placar","localJogoIndex","grupoIndex","_gruposState$find","prevGrupos","updatedGroups","map","grupo","id","jogos","jogo","jogoIndex","submetido","console","log","find","g","j","globalJogoIndex","prev","jogoInfo","fase","error","preencherTodosOsPlacares","newGlobalJogoIndexCounter","newGroups","grupoid","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmitScore","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseDeGrupos.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseDeGrupos = ({ grupos, onAtualizarEstatisticas, onUpdateGroups }) => {\r\n  const [gruposState, setGruposState] = useState(grupos);\r\n  const [globalJogoIndexCounter, setGlobalJogoIndexCounter] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setGruposState(grupos);\r\n    setGlobalJogoIndexCounter(0); // Resetar contador ao atualizar grupos\r\n  }, [grupos]);\r\n\r\n  useEffect(() => {\r\n    if (onUpdateGroups) {\r\n      onUpdateGroups(gruposState);\r\n    }\r\n  }, [gruposState, onUpdateGroups]);\r\n\r\n  const handleSubmitScore = (placar, localJogoIndex, grupoIndex) => {\r\n    setGruposState(prevGrupos => {\r\n      const updatedGroups = prevGrupos.map(grupo =>\r\n        grupo.id === grupoIndex ? {\r\n          ...grupo,\r\n          jogos: grupo.jogos.map(jogo =>\r\n            jogo.jogoIndex === localJogoIndex ?\r\n              { ...jogo, placar: placar, submetido: true } : jogo\r\n          )\r\n        } : grupo\r\n      );\r\n      console.log('Grupos após atualização:', updatedGroups);\r\n      return updatedGroups;\r\n    });\r\n\r\n    // Encontrar o jogo específico para enviar para atualizarEstatisticas\r\n    const jogo = gruposState.find(g => g.id === grupoIndex)?.jogos.find(j => j.jogoIndex === localJogoIndex);\r\n\r\n    // Garantir que jogoIndex seja único para todo o torneio\r\n    const globalJogoIndex = globalJogoIndexCounter;\r\n\r\n    // Incrementar o contador para o próximo jogo\r\n    setGlobalJogoIndexCounter(prev => prev + 1);\r\n\r\n    // Certificar-se de que jogo existe antes de prosseguir\r\n    if (jogo) {\r\n      const jogoInfo = {\r\n        ...jogo,\r\n        placar,\r\n        grupo: grupoIndex,\r\n        fase: 'Fase de Grupos',\r\n        jogoIndex: globalJogoIndex // Agora jogoIndex é único em todo o torneio\r\n      };\r\n\r\n      onAtualizarEstatisticas(jogoInfo);\r\n    } else {\r\n      console.error('Jogo não encontrado para atualização de estatísticas');\r\n    }\r\n  };\r\n\r\n  // Função para preencher e submeter todos os placares automaticamente com 6-2\r\n  const preencherTodosOsPlacares = () => {\r\n    setGruposState(prevGrupos => {\r\n      let newGlobalJogoIndexCounter = globalJogoIndexCounter;\r\n      const newGroups = prevGrupos.map(grupo => ({\r\n        ...grupo,\r\n        jogos: grupo.jogos.map(jogo => {\r\n          if (!jogo.submetido) {\r\n            const jogoInfo = {\r\n              ...jogo,\r\n              placar: '6-2',\r\n              grupo: grupoid,\r\n              fase: 'Fase de Grupos',\r\n              jogoIndex: newGlobalJogoIndexCounter++\r\n            };\r\n            onAtualizarEstatisticas(jogoInfo);\r\n            return { ...jogo, placar: '6-2', submetido: true };\r\n          }\r\n          return jogo;\r\n        })\r\n      }));\r\n      console.log('Novos grupos após preenchimento:', newGroups);\r\n      setGlobalJogoIndexCounter(newGlobalJogoIndexCounter); // Atualizar o contador global\r\n      return newGroups;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Fase de Grupos</h2>\r\n      {gruposState.map(grupo => (\r\n        <div key={grupo.id}>\r\n          <h3>Grupo {grupo.id + 1}</h3>\r\n          {grupo.jogos.map(jogo => (\r\n            <Jogo\r\n              key={jogo.jogoIndex}\r\n              jogo={jogo}\r\n              onSubmitScore={(placar) => handleSubmitScore(placar, jogo.jogoIndex, grupo.id)}\r\n              disabled={jogo.submetido} // Desabilitar submissão se já submetido\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n      {/* Botão temporário para preencher todos os placares com 6-2 */}\r\n      <button onClick={preencherTodosOsPlacares}>Preencher e Submeter Todos os Placar</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseDeGrupos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}