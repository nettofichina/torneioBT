{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseEliminatoria.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseEliminatoria = ({\n  fase,\n  jogos,\n  onAtualizarEstatisticas,\n  onUpdateJogos\n}) => {\n  _s();\n  const [jogosState, setJogosState] = useState(jogos);\n  const [ultimaRodadaConcluida, setUltimaRodadaConcluida] = useState(0);\n  useEffect(() => {\n    setJogosState(jogos);\n    const maxRodada = Math.max(...jogos.map(jogo => jogo.rodada));\n    setUltimaRodadaConcluida(prevRodada => Math.min(maxRodada, prevRodada));\n  }, [jogos]);\n\n  // Agrupar jogos por rodada\n  const jogosPorRodada = {};\n  jogosState.forEach(jogo => {\n    if (!jogosPorRodada[jogo.rodada]) {\n      jogosPorRodada[jogo.rodada] = [];\n    }\n    jogosPorRodada[jogo.rodada].push(jogo);\n  });\n\n  // Atualiza a última rodada concluída quando jogosState muda\n  useEffect(() => {\n    const maxRodada = Math.max(...jogosState.map(jogo => jogo.rodada));\n    const novaUltimaRodada = Object.keys(jogosPorRodada).reduce((max, rodada) => jogosPorRodada[rodada].every(jogo => jogo.submetido) ? Math.max(max, parseInt(rodada)) : max, ultimaRodadaConcluida);\n    setUltimaRodadaConcluida(novaUltimaRodada);\n  }, [jogosState]);\n  const handleSubmitScore = (placar, jogoIndex) => {\n    setJogosState(prevJogos => {\n      const newJogos = prevJogos.map(jogo => jogo.jogoIndex === jogoIndex ? {\n        ...jogo,\n        placar: placar,\n        submetido: true\n      } : jogo);\n\n      // Atualiza a última rodada concluída apenas se todos os jogos da rodada atual foram submetidos\n      const rodadaAtual = newJogos.find(j => j.jogoIndex === jogoIndex).rodada;\n      if (newJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n        setUltimaRodadaConcluida(rodadaAtual);\n      }\n      return newJogos;\n    });\n\n    // Atualização para o componente pai se necessário\n    onAtualizarEstatisticas({\n      jogoIndex,\n      placar\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: fase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\n      if (parseInt(rodada) <= ultimaRodadaConcluida + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: rodada === '1' ? 'Primeira Rodada' : rodada === Object.keys(jogosPorRodada).length.toString() ? 'Final' : rodada === (Object.keys(jogosPorRodada).length - 1).toString() ? 'Semifinal' : `Rodada ${rodada}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), jogosPorRodada[rodada].map(jogo => /*#__PURE__*/_jsxDEV(Jogo, {\n            jogo: jogo,\n            onSubmitScore: placar => handleSubmitScore(placar, jogo.jogoIndex)\n          }, `${jogo.jogoIndex}-${jogo.dupla1.join('')}-${jogo.dupla2.join('')}-${rodada}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this))]\n        }, rodada, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this);\n      }\n      return null;\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(FaseEliminatoria, \"aO0Wa9qnYV3eNyUckslnhdBuCLs=\");\n_c = FaseEliminatoria;\nexport default FaseEliminatoria;\nvar _c;\n$RefreshReg$(_c, \"FaseEliminatoria\");","map":{"version":3,"names":["React","useState","useEffect","Jogo","jsxDEV","_jsxDEV","FaseEliminatoria","fase","jogos","onAtualizarEstatisticas","onUpdateJogos","_s","jogosState","setJogosState","ultimaRodadaConcluida","setUltimaRodadaConcluida","maxRodada","Math","max","map","jogo","rodada","prevRodada","min","jogosPorRodada","forEach","push","novaUltimaRodada","Object","keys","reduce","every","submetido","parseInt","handleSubmitScore","placar","jogoIndex","prevJogos","newJogos","rodadaAtual","find","j","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","sort","a","b","length","toString","onSubmitScore","dupla1","join","dupla2","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseEliminatoria.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseEliminatoria = ({ fase, jogos, onAtualizarEstatisticas, onUpdateJogos }) => {\r\n  const [jogosState, setJogosState] = useState(jogos);\r\n  const [ultimaRodadaConcluida, setUltimaRodadaConcluida] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setJogosState(jogos);\r\n    const maxRodada = Math.max(...jogos.map(jogo => jogo.rodada));\r\n    setUltimaRodadaConcluida(prevRodada => Math.min(maxRodada, prevRodada));\r\n  }, [jogos]);\r\n\r\n  // Agrupar jogos por rodada\r\n  const jogosPorRodada = {};\r\n  jogosState.forEach(jogo => {\r\n    if (!jogosPorRodada[jogo.rodada]) {\r\n      jogosPorRodada[jogo.rodada] = [];\r\n    }\r\n    jogosPorRodada[jogo.rodada].push(jogo);\r\n  });\r\n\r\n  // Atualiza a última rodada concluída quando jogosState muda\r\n  useEffect(() => {\r\n    const maxRodada = Math.max(...jogosState.map(jogo => jogo.rodada));\r\n    const novaUltimaRodada = Object.keys(jogosPorRodada).reduce((max, rodada) => \r\n      jogosPorRodada[rodada].every(jogo => jogo.submetido) ? Math.max(max, parseInt(rodada)) : max, \r\n      ultimaRodadaConcluida\r\n    );\r\n    setUltimaRodadaConcluida(novaUltimaRodada);\r\n  }, [jogosState]);\r\n\r\n  const handleSubmitScore = (placar, jogoIndex) => {\r\n    setJogosState(prevJogos => {\r\n      const newJogos = prevJogos.map(jogo => \r\n        jogo.jogoIndex === jogoIndex ? {...jogo, placar: placar, submetido: true} : jogo\r\n      );\r\n      \r\n      // Atualiza a última rodada concluída apenas se todos os jogos da rodada atual foram submetidos\r\n      const rodadaAtual = newJogos.find(j => j.jogoIndex === jogoIndex).rodada;\r\n      if (newJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\r\n        setUltimaRodadaConcluida(rodadaAtual);\r\n      }\r\n      \r\n      return newJogos;\r\n    });\r\n    \r\n    // Atualização para o componente pai se necessário\r\n    onAtualizarEstatisticas({ jogoIndex, placar });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{fase}</h2>\r\n      {Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\r\n        if (parseInt(rodada) <= ultimaRodadaConcluida + 1) {\r\n          return (\r\n            <div key={rodada}>\r\n              <h3>\r\n                {rodada === '1' ? 'Primeira Rodada' : \r\n                 rodada === (Object.keys(jogosPorRodada).length).toString() ? 'Final' : \r\n                 rodada === (Object.keys(jogosPorRodada).length - 1).toString() ? 'Semifinal' : \r\n                 `Rodada ${rodada}`}\r\n              </h3>\r\n              {jogosPorRodada[rodada].map(jogo => (\r\n                <Jogo\r\n                  key={`${jogo.jogoIndex}-${jogo.dupla1.join('')}-${jogo.dupla2.join('')}-${rodada}`}\r\n                  jogo={jogo}\r\n                  onSubmitScore={(placar) => handleSubmitScore(placar, jogo.jogoIndex)}\r\n                />\r\n              ))}\r\n            </div>\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseEliminatoria;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}