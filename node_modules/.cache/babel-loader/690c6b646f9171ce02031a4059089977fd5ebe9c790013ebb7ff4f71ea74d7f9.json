{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport { dividirGrupos, classificarDuplasPorDesempate, criarJogosParaGrupo } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n  const [historicoFases, setHistoricoFases] = useState([]);\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let currentIndex = 0;\n    let rodadas = Math.ceil(Math.log2(classificados.length)); // Número de rodadas necessárias\n    let nextPowerOf2 = Math.pow(2, rodadas); // Próxima potência de 2\n    let byes = nextPowerOf2 - classificados.length; // Número de BYEs\n\n    // Adicionar BYEs aos classificados\n    for (let i = 0; i < byes; i++) {\n      classificados.push(['BYE', '']);\n    }\n\n    // Ordenar classificados para garantir que BYEs sejam distribuídos aos melhores\n    classificados = classificados.sort((a, b) => {\n      // Supondo que a classificação já está em ordem de desempenho\n      return 0;\n    });\n\n    // Criar jogos para cada rodada\n    for (let r = 1; r <= rodadas; r++) {\n      let jogosDaRodada = [];\n      for (let i = 0; i < classificados.length; i += 2) {\n        let dupla1 = classificados[i];\n        let dupla2 = classificados[i + 1] || ['BYE', '']; // Se não houver dupla, é um BYE\n\n        if (dupla1[0] !== 'BYE' && dupla2[0] !== 'BYE') {\n          // Jogo normal\n          jogosDaRodada.push({\n            dupla1: dupla1,\n            dupla2: dupla2,\n            placar: '',\n            submetido: false,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`\n          });\n        } else if (dupla1[0] === 'BYE') {\n          // Dupla 1 passa direto\n          jogosDaRodada.push({\n            dupla1: dupla2,\n            dupla2: ['BYE', ''],\n            placar: 'BYE',\n            submetido: true,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`\n          });\n        } else {\n          // Dupla 2 passa direto\n          jogosDaRodada.push({\n            dupla1: dupla1,\n            dupla2: ['BYE', ''],\n            placar: 'BYE',\n            submetido: true,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`\n          });\n        }\n      }\n      jogos.push(...jogosDaRodada);\n      // Mantém só os vencedores (ou duplas que passaram sem jogar no caso de BYEs)\n      classificados = classificados.filter((_, index) => index % 2 === 0).map(dupla => dupla[0] === 'BYE' ? classificados[index + 1] : dupla);\n    }\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    // Certifique-se de que classificarDuplasPorDesempate está corretamente implementada\n    let classificados = classificarDuplasPorDesempate([...duplas], grupos.flatMap(grupo => grupo.jogos));\n    setHistoricoFases(prevHistorico => [...prevHistorico, {\n      fase: 'Fase de Grupos',\n      resultados: grupos.map(grupo => ({\n        grupoId: grupo.id,\n        jogos: grupo.jogos.map(jogo => ({\n          dupla1: jogo.dupla1,\n          dupla2: jogo.dupla2,\n          placar: jogo.placar,\n          vencedor: jogo.placar.split('-').map(Number)[0] > jogo.placar.split('-').map(Number)[1] ? jogo.dupla1 : jogo.dupla2,\n          diferencaSets: Math.abs(jogo.placar.split('-').map(Number)[0] - jogo.placar.split('-').map(Number)[1])\n        }))\n      })),\n      classificados: classificados\n    }]);\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n    if (jogosUltimaRodada.length === 1) {\n      // Final\n      let final = jogosUltimaRodada[0];\n      let vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      let perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n\n      // Encontrar os perdedores das semifinais para a disputa do 3º lugar\n      let semiFinais = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada - 1);\n      let perdedoresSemifinal = semiFinais.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n\n      // Adicionar jogo para determinar o 3º lugar\n      setJogosEliminatoria(prevJogos => [...prevJogos, {\n        dupla1: perdedoresSemifinal[0],\n        dupla2: perdedoresSemifinal[1],\n        placar: '',\n        submetido: false,\n        jogoIndex: prevJogos.length,\n        rodada: ultimaRodada + 1,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      finalizarTorneio(vencedorFinal, perdedorFinal);\n    } else {\n      // Identificar vencedores da última rodada\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      // Adicionar nova rodada\n      let novaRodada = ultimaRodada + 1;\n      let novosJogos = [];\n      for (let i = 0; i < vencedores.length; i += 2) {\n        novosJogos.push({\n          dupla1: vencedores[i],\n          dupla2: vencedores[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length + i / 2,\n          rodada: novaRodada,\n          fase: novaRodada === ultimaRodada + 1 ? 'Final' : `Rodada ${novaRodada}`\n        });\n      }\n      setJogosEliminatoria(prevJogos => [...prevJogos, ...novosJogos]);\n    }\n  };\n  const atualizarEstatisticas = jogoInfo => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo => jogo.jogoIndex === jogoInfo.jogoIndex ? {\n        ...jogo,\n        placar: jogoInfo.placar,\n        submetido: true\n      } : jogo);\n      if (!historicoJogos.some(historicoJogo => historicoJogo.jogoIndex === jogoInfo.jogoIndex && historicoJogo.grupo === jogoInfo.grupo)) {\n        setHistoricoJogos(prevHistorico => [...prevHistorico, {\n          ...jogoInfo\n        }]);\n      } else {\n        console.warn('Jogo já existente no histórico:', jogoInfo.jogoIndex);\n      }\n      return updatedJogos;\n    });\n  };\n  const finalizarTorneio = (vencedorFinal, perdedorFinal) => {\n    let disputaTerceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (disputaTerceiroLugar && disputaTerceiroLugar.submetido) {\n      let terceiroLugar = disputaTerceiroLugar.placar.split('-').map(Number)[0] > disputaTerceiroLugar.placar.split('-').map(Number)[1] ? disputaTerceiroLugar.dupla1 : disputaTerceiroLugar.dupla2;\n      let quartoLugar = terceiroLugar === disputaTerceiroLugar.dupla1 ? disputaTerceiroLugar.dupla2 : disputaTerceiroLugar.dupla1;\n      setRanking([{\n        lugar: 1,\n        dupla: vencedorFinal\n      }, {\n        lugar: 2,\n        dupla: perdedorFinal\n      }, {\n        lugar: 3,\n        dupla: terceiroLugar\n      }, {\n        lugar: 4,\n        dupla: quartoLugar\n      }]);\n      setFaseAtual('finalizado');\n    }\n  };\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 1\",\n            ref: jogador1Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 2\",\n            ref: jogador2Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              var _jogador1Ref$current, _jogador2Ref$current;\n              const jogador1 = (_jogador1Ref$current = jogador1Ref.current) === null || _jogador1Ref$current === void 0 ? void 0 : _jogador1Ref$current.value;\n              const jogador2 = (_jogador2Ref$current = jogador2Ref.current) === null || _jogador2Ref$current === void 0 ? void 0 : _jogador2Ref$current.value;\n              if (jogador1 && jogador2) {\n                addDupla([jogador1, jogador2]);\n                if (jogador1Ref.current) jogador1Ref.current.value = '';\n                if (jogador2Ref.current) jogador2Ref.current.value = '';\n              } else {\n                alert('Por favor, insira os nomes dos dois jogadores.');\n              }\n            },\n            children: \"Adicionar Dupla\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: startTournament,\n          disabled: duplas.length < 3,\n          children: \"Come\\xE7ar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n            fase: \"Fase Eliminat\\xF3ria\",\n            jogos: jogosEliminatoria,\n            onAtualizarEstatisticas: atualizarEstatisticas\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this), jogosEliminatoria.every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [(() => {\n              encerrarFaseEliminatoria();\n              const finalGame = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n              return finalGame ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Final: \", finalGame.dupla1.join(' e '), \" vs \", finalGame.dupla2.join(' e ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Final: N\\xE3o definida\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 23\n              }, this);\n            })(), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Disputa pelo Terceiro Lugar:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 19\n            }, this), (() => {\n              const thirdPlaceGame = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n              return thirdPlaceGame ? /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Disputa pelo terceiro: \", thirdPlaceGame.dupla1.join(' e '), \" vs \", thirdPlaceGame.dupla2.join(' e ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Disputa pelo terceiro: N\\xE3o definida\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 23\n              }, this);\n            })(), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: finalizarTorneio,\n              children: \"Finalizar Torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), historicoJogos.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hist\\xF3rico de Jogos:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this), grupos.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Grupo \", grupo.id + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: historicoJogos.filter(jogo => jogo.grupo === grupo.id).map((jogo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Rodada \", jogo.fase || 'Desconhecida', \":\", Array.isArray(jogo.dupla1) ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida', \"vs\", Array.isArray(jogo.dupla2) ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida', \"- Placar: \", jogo.placar || 'Não Submetido']\n              }, `${jogo.jogoIndex}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 19\n            }, this)]\n          }, grupo.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), historicoFases.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hist\\xF3rico de Fases:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 15\n          }, this), historicoFases.map((fase, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: fase.fase\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Classificados:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: fase.classificados.map((dupla, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: dupla.join(' e ')\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"O torneio foi finalizado. Parab\\xE9ns aos vencedores!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Ranking Final:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [posição.lugar, \"\\xBA Lugar:\", Array.isArray(posição.dupla) ? posição.dupla.join(' e ') : posição.dupla || 'Desconhecido']\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xnJ2jgFlNAIKsFKPb9wt294WCeI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","Input","dividirGrupos","classificarDuplasPorDesempate","criarJogosParaGrupo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","ranking","setRanking","historicoJogos","setHistoricoJogos","historicoFases","setHistoricoFases","console","log","jogador1Ref","jogador2Ref","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","forEach","grupo","jogos","id","iniciarFaseEliminatoria","classificados","currentIndex","rodadas","ceil","log2","nextPowerOf2","pow","byes","push","a","b","r","jogosDaRodada","dupla1","dupla2","placar","submetido","jogoIndex","rodada","fase","map","encerrarFaseGrupos","jogo","flatMap","prevHistorico","resultados","grupoId","vencedor","split","Number","diferencaSets","abs","join","encerrarFaseEliminatoria","ultimaRodada","max","jogosUltimaRodada","final","vencedorFinal","perdedorFinal","semiFinais","perdedoresSemifinal","set1","set2","prevJogos","finalizarTorneio","vencedores","novaRodada","novosJogos","atualizarEstatisticas","jogoInfo","updatedJogos","historicoJogo","warn","disputaTerceiroLugar","find","terceiroLugar","quartoLugar","lugar","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","required","onRemoveDupla","ref","onClick","_jogador1Ref$current","_jogador2Ref$current","jogador1","current","value","jogador2","disabled","style","display","onAtualizarEstatisticas","onUpdateGroups","every","finalGame","thirdPlaceGame","Array","isArray","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport {\n  dividirGrupos,\n  classificarDuplasPorDesempate,\n  criarJogosParaGrupo\n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n  const [historicoFases, setHistoricoFases] = useState([]);\n\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let currentIndex = 0;\n    let rodadas = Math.ceil(Math.log2(classificados.length)); // Número de rodadas necessárias\n    let nextPowerOf2 = Math.pow(2, rodadas); // Próxima potência de 2\n    let byes = nextPowerOf2 - classificados.length; // Número de BYEs\n  \n    // Adicionar BYEs aos classificados\n    for (let i = 0; i < byes; i++) {\n      classificados.push(['BYE', '']);\n    }\n  \n    // Ordenar classificados para garantir que BYEs sejam distribuídos aos melhores\n    classificados = classificados.sort((a, b) => {\n      // Supondo que a classificação já está em ordem de desempenho\n      return 0;\n    });\n  \n    // Criar jogos para cada rodada\n    for (let r = 1; r <= rodadas; r++) {\n      let jogosDaRodada = [];\n      for (let i = 0; i < classificados.length; i += 2) {\n        let dupla1 = classificados[i];\n        let dupla2 = classificados[i + 1] || ['BYE', '']; // Se não houver dupla, é um BYE\n  \n        if (dupla1[0] !== 'BYE' && dupla2[0] !== 'BYE') {\n          // Jogo normal\n          jogosDaRodada.push({\n            dupla1: dupla1,\n            dupla2: dupla2,\n            placar: '',\n            submetido: false,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : (r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`)\n          });\n        } else if (dupla1[0] === 'BYE') {\n          // Dupla 1 passa direto\n          jogosDaRodada.push({\n            dupla1: dupla2,\n            dupla2: ['BYE', ''],\n            placar: 'BYE',\n            submetido: true,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : (r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`)\n          });\n        } else {\n          // Dupla 2 passa direto\n          jogosDaRodada.push({\n            dupla1: dupla1,\n            dupla2: ['BYE', ''],\n            placar: 'BYE',\n            submetido: true,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : (r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`)\n          });\n        }\n      }\n      jogos.push(...jogosDaRodada);\n      // Mantém só os vencedores (ou duplas que passaram sem jogar no caso de BYEs)\n      classificados = classificados.filter((_, index) => index % 2 === 0).map(dupla => dupla[0] === 'BYE' ? classificados[index + 1] : dupla);\n    }\n  \n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    // Certifique-se de que classificarDuplasPorDesempate está corretamente implementada\n    let classificados = classificarDuplasPorDesempate([...duplas], grupos.flatMap(grupo => grupo.jogos));\n    setHistoricoFases(prevHistorico => [...prevHistorico, {\n      fase: 'Fase de Grupos',\n      resultados: grupos.map(grupo => ({\n        grupoId: grupo.id,\n        jogos: grupo.jogos.map(jogo => ({\n          dupla1: jogo.dupla1,\n          dupla2: jogo.dupla2,\n          placar: jogo.placar,\n          vencedor: jogo.placar.split('-').map(Number)[0] > jogo.placar.split('-').map(Number)[1] ? jogo.dupla1 : jogo.dupla2,\n          diferencaSets: Math.abs(jogo.placar.split('-').map(Number)[0] - jogo.placar.split('-').map(Number)[1])\n        }))\n      })),\n      classificados: classificados\n    }]);\n\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n\n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n\n    if (jogosUltimaRodada.length === 1) { // Final\n      let final = jogosUltimaRodada[0];\n      let vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      let perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n\n      // Encontrar os perdedores das semifinais para a disputa do 3º lugar\n      let semiFinais = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada - 1);\n      let perdedoresSemifinal = semiFinais.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n\n      // Adicionar jogo para determinar o 3º lugar\n      setJogosEliminatoria(prevJogos => [\n        ...prevJogos,\n        {\n          dupla1: perdedoresSemifinal[0],\n          dupla2: perdedoresSemifinal[1],\n          placar: '',\n          submetido: false,\n          jogoIndex: prevJogos.length,\n          rodada: ultimaRodada + 1,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n\n      finalizarTorneio(vencedorFinal, perdedorFinal);\n    } else {\n      // Identificar vencedores da última rodada\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      // Adicionar nova rodada\n      let novaRodada = ultimaRodada + 1;\n      let novosJogos = [];\n      for (let i = 0; i < vencedores.length; i += 2) {\n        novosJogos.push({\n          dupla1: vencedores[i],\n          dupla2: vencedores[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length + (i / 2),\n          rodada: novaRodada,\n          fase: novaRodada === ultimaRodada + 1 ? 'Final' : `Rodada ${novaRodada}`\n        });\n      }\n\n      setJogosEliminatoria(prevJogos => [...prevJogos, ...novosJogos]);\n    }\n  };\n\n  const atualizarEstatisticas = (jogoInfo) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo =>\n        jogo.jogoIndex === jogoInfo.jogoIndex ? { ...jogo, placar: jogoInfo.placar, submetido: true } : jogo\n      );\n\n      if (!historicoJogos.some(historicoJogo => historicoJogo.jogoIndex === jogoInfo.jogoIndex && historicoJogo.grupo === jogoInfo.grupo)) {\n        setHistoricoJogos(prevHistorico => [...prevHistorico, { ...jogoInfo }]);\n      } else {\n        console.warn('Jogo já existente no histórico:', jogoInfo.jogoIndex);\n      }\n\n      return updatedJogos;\n    });\n  };\n\n  const finalizarTorneio = (vencedorFinal, perdedorFinal) => {\n    let disputaTerceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (disputaTerceiroLugar && disputaTerceiroLugar.submetido) {\n      let terceiroLugar = disputaTerceiroLugar.placar.split('-').map(Number)[0] > disputaTerceiroLugar.placar.split('-').map(Number)[1] ? disputaTerceiroLugar.dupla1 : disputaTerceiroLugar.dupla2;\n      let quartoLugar = terceiroLugar === disputaTerceiroLugar.dupla1 ? disputaTerceiroLugar.dupla2 : disputaTerceiroLugar.dupla1;\n\n      setRanking([\n        { lugar: 1, dupla: vencedorFinal },\n        { lugar: 2, dupla: perdedorFinal },\n        { lugar: 3, dupla: terceiroLugar },\n        { lugar: 4, dupla: quartoLugar }\n      ]);\n\n      setFaseAtual('finalizado');\n    }\n  };\n\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onRemoveDupla={removeDupla} />\n            <div>\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 1\"\n                ref={jogador1Ref}\n              />\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 2\"\n                ref={jogador2Ref}\n              />\n              <Button\n                onClick={() => {\n                  const jogador1 = jogador1Ref.current?.value;\n                  const jogador2 = jogador2Ref.current?.value;\n                  if (jogador1 && jogador2) {\n                    addDupla([jogador1, jogador2]);\n                    if (jogador1Ref.current) jogador1Ref.current.value = '';\n                    if (jogador2Ref.current) jogador2Ref.current.value = '';\n                  } else {\n                    alert('Por favor, insira os nomes dos dois jogadores.');\n                  }\n                }}\n              >\n                Adicionar Dupla\n              </Button>\n              <Button onClick={add8Duplas}>\n                Adicionar 8 Duplas\n              </Button>\n            </div>\n            <Button onClick={startTournament} disabled={duplas.length < 3}>\n              Começar Torneio\n            </Button>\n          </>\n        )}\n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">\n            {faseAtual === 'grupos' ? 'Fase de Grupos' :\n              faseAtual === 'eliminatória' ? 'Fase Eliminatória' :\n                'Torneio Finalizado'}\n          </h3>\n          {faseAtual === 'grupos' && (\n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onUpdateGroups={setGrupos} />\n          )}\n          {faseAtual === 'eliminatória' && (\n            <>\n              <FaseEliminatoria\n                fase=\"Fase Eliminatória\"\n                jogos={jogosEliminatoria}\n                onAtualizarEstatisticas={atualizarEstatisticas}\n              />\n              {jogosEliminatoria.every(jogo => jogo.submetido) && (\n                <React.Fragment>\n                  {/* Chamada explícita de encerrarFaseEliminatoria */}\n                  {(() => {\n                    encerrarFaseEliminatoria();\n                    const finalGame = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n                    return finalGame ? (\n                      <p>Final: {finalGame.dupla1.join(' e ')} vs {finalGame.dupla2.join(' e ')}</p>\n                    ) : (\n                      <p>Final: Não definida</p>\n                    );\n                  })()}\n                  <h3>Disputa pelo Terceiro Lugar:</h3>\n                  {(() => {\n                    const thirdPlaceGame = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n                    return thirdPlaceGame ? (\n                      <p>Disputa pelo terceiro: {thirdPlaceGame.dupla1.join(' e ')} vs {thirdPlaceGame.dupla2.join(' e ')}</p>\n                    ) : (\n                      <p>Disputa pelo terceiro: Não definida</p>\n                    );\n                  })()}\n                  <Button onClick={finalizarTorneio}>\n                    Finalizar Torneio\n                  </Button>\n                </React.Fragment>\n              )}\n            </>\n          )}\n          {historicoJogos.length > 0 && (\n            <section className=\"section\">\n              <h3>Histórico de Jogos:</h3>\n              {grupos.map(grupo => (\n                <div key={grupo.id}>\n                  <h4>Grupo {grupo.id + 1}</h4>\n                  <ul>\n                    {historicoJogos\n                      .filter(jogo => jogo.grupo === grupo.id)\n                      .map((jogo, index) => (\n                        <li key={`${jogo.jogoIndex}-${index}`}>\n                          Rodada {jogo.fase || 'Desconhecida'}:\n                          {Array.isArray(jogo.dupla1) ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida'}\n                          vs\n                          {Array.isArray(jogo.dupla2) ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida'}\n                          - Placar: {jogo.placar || 'Não Submetido'}\n                        </li>\n                      ))}\n                  </ul>\n                </div>\n              ))}\n            </section>\n          )}\n          {historicoFases.length > 0 && (\n            <section className=\"section\">\n              <h3>Histórico de Fases:</h3>\n              {historicoFases.map((fase, index) => (\n                <div key={index}>\n                  <h4>{fase.fase}</h4>\n                  <p>Classificados:</p>\n                  <ul>\n                    {fase.classificados.map((dupla, i) => (\n                      <li key={i}>{dupla.join(' e ')}</li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </section>\n          )}\n          {faseAtual === 'grupos' && (\n            <Button onClick={encerrarFaseGrupos}>\n              Encerrar Fase de Grupos\n            </Button>\n          )}\n          {faseAtual === 'finalizado' && (\n            <>\n              <p>O torneio foi finalizado. Parabéns aos vencedores!</p>\n              <h3>Ranking Final:</h3>\n              <ul>\n                {ranking.map((posição, index) => (\n                  <li key={index}>\n                    {posição.lugar}º Lugar:\n                    {Array.isArray(posição.dupla) ? posição.dupla.join(' e ') : posição.dupla || 'Desconhecido'}\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n        </section>\n      </main>\n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}