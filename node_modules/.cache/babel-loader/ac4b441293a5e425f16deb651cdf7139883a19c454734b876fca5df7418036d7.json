{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [expandedRodadas, setExpandedRodadas] = useState({}); // Estado para controlar quais rodadas estão expandidas\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const toggleRodada = rodada => {\n    setExpandedRodadas(prevState => ({\n      ...prevState,\n      [rodada]: !prevState[rodada]\n    }));\n  };\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    let jogos = [];\n    let rodadas = Math.ceil(Math.log2(classificados.length));\n    for (let r = 1; r <= rodadas; r++) {\n      for (let i = 0; i < classificados.length; i += 2) {\n        let faseNome = '';\n        if (r === rodadas) faseNome = 'Final';else if (r === rodadas - 1) faseNome = 'Semifinal';else if (r === rodadas - 2) faseNome = 'Quartas de Final';else faseNome = `Rodada ${r}`;\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['BYE', ''],\n          placar: '',\n          submetido: false,\n          fase: faseNome,\n          rodada: r\n        });\n      }\n      classificados = classificados.filter((_, i) => i % 2 === 0); // Mantém apenas os vencedores\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      return prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n    });\n  };\n  const iniciarFinal = jogos => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([{\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final'\n      }, {\n        dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n        dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1] ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const renderizarRodadaAtual = jogos => {\n    let rodadaAtual = Math.min(...jogos.filter(j => !j.submetido).map(j => j.rodada));\n    if (!isFinite(rodadaAtual)) {\n      rodadaAtual = Math.max(...jogos.map(j => j.rodada)); // Se todos os jogos foram submetidos, pega a última rodada\n    }\n    const jogosDaRodadaAtual = jogos.filter(j => j.rodada === rodadaAtual && !j.submetido);\n    if (jogosDaRodadaAtual.length === 0) {\n      if (rodadaAtual === Math.max(...jogos.map(j => j.rodada))) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Todos os jogos desta fase foram submetidos. Aguardando avan\\xE7o para a pr\\xF3xima etapa.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 16\n        }, this);\n      }\n      return null; // Se não há jogos para mostrar, não renderiza nada\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: jogosDaRodadaAtual[0].fase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n        jogos: jogosDaRodadaAtual,\n        onAtualizarPlacar: atualizarPlacarNaEliminatoria\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), jogosEliminatoria.filter(jogo => !jogo.submetido).map((jogo, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: jogo.fase\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n            jogos: [jogo],\n            onAtualizarPlacar: atualizarPlacarNaEliminatoria\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 15\n        }, this)), finalConfigurada && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setFaseAtual('final'),\n          children: \"Avan\\xE7ar para a Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' & ')]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Qol1mJ3mDXOiTHP4C6e+IDoQeRk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","expandedRodadas","setExpandedRodadas","toggleRodada","rodada","prevState","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","gruposCriados","forEach","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","iniciarFaseEliminatoria","rodadas","ceil","log2","r","faseNome","push","dupla1","dupla2","placar","fase","atualizarPlacarNaEliminatoria","prevJogos","map","j","iniciarFinal","finalistas","set1","set2","split","Number","console","error","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","max","every","finalizarTorneio","final","find","terceiroLugar","vencedorFinal","perdedorFinal","terceiro","quarto","lugar","add8Duplas","newDuplas","renderizarRodadaAtual","min","isFinite","jogosDaRodadaAtual","children","fileName","_jsxFileName","lineNumber","columnNumber","onAtualizarPlacar","className","onAddDupla","onRemoveDupla","onClick","onUpdateGroups","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [expandedRodadas, setExpandedRodadas] = useState({}); // Estado para controlar quais rodadas estão expandidas\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const toggleRodada = (rodada) => {\n    setExpandedRodadas(prevState => ({\n      ...prevState,\n      [rodada]: !prevState[rodada]\n    }));\n  };\n  \n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    let jogos = [];\n    let rodadas = Math.ceil(Math.log2(classificados.length));\n\n    for (let r = 1; r <= rodadas; r++) {\n      for (let i = 0; i < classificados.length; i += 2) {\n        let faseNome = '';\n        if (r === rodadas) faseNome = 'Final';\n        else if (r === rodadas - 1) faseNome = 'Semifinal';\n        else if (r === rodadas - 2) faseNome = 'Quartas de Final';\n        else faseNome = `Rodada ${r}`;\n\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['BYE', ''],\n          placar: '',\n          submetido: false,\n          fase: faseNome,\n          rodada: r\n        });\n      }\n      classificados = classificados.filter((_, i) => i % 2 === 0); // Mantém apenas os vencedores\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      return prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([\n        {\n          dupla1: finalistas[0],\n          dupla2: finalistas[1],\n          placar: '',\n          submetido: false,\n          fase: 'Final'\n        },\n        {\n          dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n          dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n          placar: '',\n          submetido: false,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1]\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1]\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const renderizarRodadaAtual = (jogos) => {\n    let rodadaAtual = Math.min(...jogos.filter(j => !j.submetido).map(j => j.rodada));\n    if (!isFinite(rodadaAtual)) {\n      rodadaAtual = Math.max(...jogos.map(j => j.rodada)); // Se todos os jogos foram submetidos, pega a última rodada\n    }\n    const jogosDaRodadaAtual = jogos.filter(j => j.rodada === rodadaAtual && !j.submetido);\n\n    if (jogosDaRodadaAtual.length === 0) {\n      if (rodadaAtual === Math.max(...jogos.map(j => j.rodada))) {\n        return <p>Todos os jogos desta fase foram submetidos. Aguardando avanço para a próxima etapa.</p>;\n      }\n      return null; // Se não há jogos para mostrar, não renderiza nada\n    }\n\n    return (\n      <div>\n        <h3>{jogosDaRodadaAtual[0].fase}</h3>\n        <FaseEliminatoria\n          jogos={jogosDaRodadaAtual}\n          onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button> {/* Botão temporário */}\n          </>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            {jogosEliminatoria.filter(jogo => !jogo.submetido).map((jogo, index) => (\n              <div key={index}>\n                <h3>{jogo.fase}</h3>\n                <FaseEliminatoria\n                  jogos={[jogo]}\n                  onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n                />\n              </div>\n            ))}\n            {finalConfigurada && (\n              <button onClick={() => setFaseAtual('final')}>Avançar para a Final</button>\n            )}\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado &&\n              <p>A disputa pelo 3º lugar está configurada!</p>\n            }\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <ul>\n              {ranking.map((posição, index) => (\n                <li key={index}>\n                  {posição.lugar}º Lugar: {posição.dupla.join(' & ')}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}