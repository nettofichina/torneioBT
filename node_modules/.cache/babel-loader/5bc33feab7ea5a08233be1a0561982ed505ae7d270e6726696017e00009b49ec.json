{"ast":null,"code":"// src/utils/torneioUtils.js\n\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\n  const resultados = duplas.reduce((acc, dupla) => {\n    if (!dupla || !Array.isArray(dupla) || dupla.length !== 2) {\n      console.error('Dupla inválida:', dupla);\n      return acc;\n    }\n    acc[dupla.join('')] = {\n      dupla,\n      pontos: 0,\n      saldoGames: 0\n    };\n    return acc;\n  }, {});\n  jogos.forEach(jogo => {\n    if (jogo.placar && typeof jogo.placar === 'string' && jogo.placar.includes('-') && jogo.dupla1 && jogo.dupla2 && Array.isArray(jogo.dupla1) && Array.isArray(jogo.dupla2)) {\n      const [games1, games2] = jogo.placar.split('-').map(Number);\n      if (isNaN(games1) || isNaN(games2)) {\n        console.error('Placar inválido ignorado:', jogo);\n        return;\n      }\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (resultados[chave1] && resultados[chave2]) {\n        if (games1 > games2) {\n          resultados[chave1].pontos += 5;\n          resultados[chave2].pontos += 2;\n        } else {\n          resultados[chave2].pontos += 5;\n          resultados[chave1].pontos += 2;\n        }\n        resultados[chave1].saldoGames += games1 - games2;\n        resultados[chave2].saldoGames += games2 - games1;\n      } else {\n        console.error('Dupla não encontrada em resultados:', {\n          chave1,\n          chave2,\n          jogo\n        });\n      }\n    } else {\n      console.error('Jogo inválido ignorado (detalhes):', JSON.stringify(jogo));\n    }\n  });\n  return Object.values(resultados).sort((a, b) => b.pontos - a.pontos || b.saldoGames - a.saldoGames).map(r => r.dupla);\n};\n\n// Demais funções permanecem iguais (criarJogosParaGrupo, dividirGrupos, etc.)\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\n  const jogos = [];\n  for (let i = 0; i < duplas.length; i++) {\n    for (let j = i + 1; j < duplas.length; j++) {\n      jogos.push({\n        dupla1: duplas[i],\n        dupla2: duplas[j],\n        placar: '',\n        submetido: false,\n        grupoId\n      });\n    }\n  }\n  return jogos;\n};\nexport const dividirGrupos = duplas => {\n  let numGrupos;\n  let grupos;\n  if (duplas.length === 10) {\n    numGrupos = 2; // Mantém padrão\n  } else if (duplas.length === 14) {\n    numGrupos = 4; // 14 duplas: 2 grupos de 4, 2 grupos de 3\n    grupos = [{\n      id: 0,\n      duplas: duplas.slice(0, 4)\n    },\n    // 4 duplas\n    {\n      id: 1,\n      duplas: duplas.slice(4, 8)\n    },\n    // 4 duplas\n    {\n      id: 2,\n      duplas: duplas.slice(8, 11)\n    },\n    // 3 duplas\n    {\n      id: 3,\n      duplas: duplas.slice(11, 14)\n    } // 3 duplas\n    ];\n  } else if (duplas.length <= 5) {\n    numGrupos = 1;\n  } else if (duplas.length <= 8) {\n    numGrupos = 2;\n  } else if (duplas.length <= 11) {\n    numGrupos = 3;\n  } else if (duplas.length <= 17) {\n    numGrupos = 5;\n  } else if (duplas.length <= 20) {\n    numGrupos = 6;\n  } else {\n    numGrupos = Math.ceil(duplas.length / 3);\n  }\n  if (!grupos) {\n    grupos = Array(numGrupos).fill().map((_, i) => ({\n      id: i,\n      duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\n    }));\n  }\n  return grupos.filter(grupo => grupo.duplas.length > 0);\n};\nexport const classificarDuplas = grupos => {\n  let classificados = [];\n  grupos.forEach(grupo => {\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    classificados.push({\n      dupla: duplasClassificadas[0],\n      grupoId: grupo.id\n    },\n    // 1º do grupo\n    {\n      dupla: duplasClassificadas[1],\n      grupoId: grupo.id\n    } // 2º do grupo\n    );\n  });\n  console.log('Duplas classificadas para a fase eliminatória:', classificados);\n  return classificados;\n};\nexport const iniciarFaseEliminatoria = classificados => {\n  let totalDuplas = classificados.length; // 8\n  let rodadas = Math.ceil(Math.log2(totalDuplas)); // 3\n  let proximoMultiplo = Math.pow(2, rodadas); // 8\n  let byes = proximoMultiplo - totalDuplas; // 0\n  let classificadosAjustados = [...classificados];\n\n  // Separar primeiros e segundos colocados\n  const primeiros = classificadosAjustados.filter((c, i) => i % 2 === 0); // 1º de cada grupo\n  const segundos = classificadosAjustados.filter((c, i) => i % 2 === 1); // 2º de cada grupo\n\n  // Embaralhar para variar os cruzamentos\n  const shuffleArray = array => array.sort(() => Math.random() - 0.5);\n  const primeirosShuffled = shuffleArray([...primeiros]);\n  const segundosShuffled = shuffleArray([...segundos]);\n\n  // Criar jogos garantindo que duplas do mesmo grupo não se enfrentem\n  let jogosRodada = [];\n  for (let i = 0; i < primeirosShuffled.length; i++) {\n    const primeiro = primeirosShuffled[i];\n    const segundo = segundosShuffled[i];\n    if (primeiro.grupoId === segundo.grupoId) {\n      // Troca o segundo com o próximo disponível de grupo diferente\n      const swapIndex = (i + 1) % segundosShuffled.length;\n      segundosShuffled[i] = segundosShuffled[swapIndex];\n      segundosShuffled[swapIndex] = segundo;\n    }\n    jogosRodada.push({\n      dupla1: primeiro.dupla,\n      dupla2: segundosShuffled[i].dupla,\n      placar: '',\n      submetido: false,\n      fase: totalDuplas <= 2 ? 'Final' : totalDuplas <= 4 ? 'Semifinal' : totalDuplas <= 8 ? 'Quartas de Final' : 'Oitavas de Final',\n      rodada: 1\n    });\n  }\n\n  // Adicionar BYEs, se necessário (não aplica para 8 duplas)\n  for (let i = 0; i < byes; i++) {\n    jogosRodada.push({\n      dupla1: classificadosAjustados[classificadosAjustados.length - byes + i].dupla,\n      dupla2: ['BYE', ''],\n      placar: '',\n      submetido: false,\n      fase: totalDuplas <= 2 ? 'Final' : totalDuplas <= 4 ? 'Semifinal' : totalDuplas <= 8 ? 'Quartas de Final' : 'Oitavas de Final',\n      rodada: 1\n    });\n  }\n  return jogosRodada;\n};\nexport const avancarRodadaEliminatoria = jogosRodadaAtual => {\n  let vencedores = jogosRodadaAtual.map(jogo => {\n    const [score1, score2] = jogo.placar.split('-').map(Number);\n    if (jogo.dupla2[0] === 'BYE') return jogo.dupla1;\n    return score1 > score2 ? jogo.dupla1 : jogo.dupla2;\n  });\n  let rodadasTotal = Math.ceil(Math.log2(vencedores.length));\n  let novaFaseNome = ['Final', 'Semifinal', 'Quartas de Final'][rodadasTotal - 1] || `Rodada ${jogosRodadaAtual[0].rodada + 1}`;\n  let novaRodada = [];\n  for (let i = 0; i < vencedores.length; i += 2) {\n    if (vencedores[i + 1]) {\n      novaRodada.push({\n        dupla1: vencedores[i],\n        dupla2: vencedores[i + 1],\n        placar: '',\n        submetido: false,\n        fase: novaFaseNome,\n        rodada: jogosRodadaAtual[0].rodada + 1\n      });\n    } else {\n      novaRodada.push({\n        dupla1: vencedores[i],\n        dupla2: ['BYE', ''],\n        placar: '',\n        submetido: false,\n        fase: novaFaseNome,\n        rodada: jogosRodadaAtual[0].rodada + 1\n      });\n    }\n  }\n  return novaRodada;\n};\nexport const generateTournament = (nome, duplas, dataInicio, horaInicio) => {\n  if (duplas.length < 3) {\n    throw new Error('É necessário pelo menos 3 duplas para criar um torneio.');\n  }\n  if (!nome || !dataInicio || !horaInicio) {\n    throw new Error('Nome, data e hora de início são obrigatórios.');\n  }\n  const tournaments = loadTournaments();\n  if (tournaments[nome]) {\n    throw new Error('Já existe um torneio com esse nome. Escolha outro nome.');\n  }\n  const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n  const gruposCriados = dividirGrupos(duplasSorteadas);\n  const gruposComJogos = gruposCriados.map(grupo => ({\n    ...grupo,\n    jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n  }));\n  const [ano, mes, dia] = dataInicio.split('-').map(Number);\n  const [hora, minuto] = horaInicio.split(':').map(Number);\n  const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto).toISOString();\n  const tournament = {\n    nome,\n    dataCriacao: new Date().toISOString(),\n    dataTorneio,\n    dataInicio,\n    horaInicio,\n    duplas: duplasSorteadas,\n    grupos: gruposComJogos,\n    jogosEliminatoria: [],\n    finalConfigurada: false,\n    terceiroLugarConfigurado: false,\n    ranking: [],\n    duplasBye: [],\n    historicoDuplas: duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = {\n        dupla,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      return acc;\n    }, {}),\n    status: 'rascunho',\n    faseAtual: 'duplas'\n  };\n  saveTournament(tournament);\n  return tournament;\n};\nexport const saveTournament = tournamentData => {\n  const tournaments = JSON.parse(localStorage.getItem('tournaments') || '{}');\n  tournaments[tournamentData.nome] = tournamentData;\n  localStorage.setItem('tournaments', JSON.stringify(tournaments));\n};\nexport const loadTournaments = () => {\n  return JSON.parse(localStorage.getItem('tournaments') || '{}');\n};\nexport const deleteTournament = nome => {\n  const tournaments = JSON.parse(localStorage.getItem('tournaments') || '{}');\n  delete tournaments[nome];\n  localStorage.setItem('tournaments', JSON.stringify(tournaments));\n};","map":{"version":3,"names":["classificarDuplasPorDesempate","duplas","jogos","resultados","reduce","acc","dupla","Array","isArray","length","console","error","join","pontos","saldoGames","forEach","jogo","placar","includes","dupla1","dupla2","games1","games2","split","map","Number","isNaN","chave1","chave2","JSON","stringify","Object","values","sort","a","b","r","criarJogosParaGrupo","grupoId","i","j","push","submetido","dividirGrupos","numGrupos","grupos","id","slice","Math","ceil","fill","_","filter","grupo","classificarDuplas","classificados","duplasClassificadas","log","iniciarFaseEliminatoria","totalDuplas","rodadas","log2","proximoMultiplo","pow","byes","classificadosAjustados","primeiros","c","segundos","shuffleArray","array","random","primeirosShuffled","segundosShuffled","jogosRodada","primeiro","segundo","swapIndex","fase","rodada","avancarRodadaEliminatoria","jogosRodadaAtual","vencedores","score1","score2","rodadasTotal","novaFaseNome","novaRodada","generateTournament","nome","dataInicio","horaInicio","Error","tournaments","loadTournaments","duplasSorteadas","gruposCriados","gruposComJogos","ano","mes","dia","hora","minuto","dataTorneio","Date","toISOString","tournament","dataCriacao","jogosEliminatoria","finalConfigurada","terceiroLugarConfigurado","ranking","duplasBye","historicoDuplas","jogosVencidos","gamesVencidos","gamesPerdidos","status","faseAtual","saveTournament","tournamentData","parse","localStorage","getItem","setItem","deleteTournament"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["// src/utils/torneioUtils.js\r\n\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  const resultados = duplas.reduce((acc, dupla) => {\r\n    if (!dupla || !Array.isArray(dupla) || dupla.length !== 2) {\r\n      console.error('Dupla inválida:', dupla);\r\n      return acc;\r\n    }\r\n    acc[dupla.join('')] = { dupla, pontos: 0, saldoGames: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  jogos.forEach((jogo) => {\r\n    if (\r\n      jogo.placar &&\r\n      typeof jogo.placar === 'string' &&\r\n      jogo.placar.includes('-') &&\r\n      jogo.dupla1 &&\r\n      jogo.dupla2 &&\r\n      Array.isArray(jogo.dupla1) &&\r\n      Array.isArray(jogo.dupla2)\r\n    ) {\r\n      const [games1, games2] = jogo.placar.split('-').map(Number);\r\n      if (isNaN(games1) || isNaN(games2)) {\r\n        console.error('Placar inválido ignorado:', jogo);\r\n        return;\r\n      }\r\n      const chave1 = jogo.dupla1.join('');\r\n      const chave2 = jogo.dupla2.join('');\r\n\r\n      if (resultados[chave1] && resultados[chave2]) {\r\n        if (games1 > games2) {\r\n          resultados[chave1].pontos += 5;\r\n          resultados[chave2].pontos += 2;\r\n        } else {\r\n          resultados[chave2].pontos += 5;\r\n          resultados[chave1].pontos += 2;\r\n        }\r\n        resultados[chave1].saldoGames += games1 - games2;\r\n        resultados[chave2].saldoGames += games2 - games1;\r\n      } else {\r\n        console.error('Dupla não encontrada em resultados:', { chave1, chave2, jogo });\r\n      }\r\n    } else {\r\n      console.error('Jogo inválido ignorado (detalhes):', JSON.stringify(jogo));\r\n    }\r\n  });\r\n\r\n  return Object.values(resultados)\r\n    .sort((a, b) => b.pontos - a.pontos || b.saldoGames - a.saldoGames)\r\n    .map((r) => r.dupla);\r\n};\r\n\r\n// Demais funções permanecem iguais (criarJogosParaGrupo, dividirGrupos, etc.)\r\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\r\n  const jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        grupoId,\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const dividirGrupos = (duplas) => {\r\n  let numGrupos;\r\n  let grupos;\r\n\r\n  if (duplas.length === 10) {\r\n    numGrupos = 2; // Mantém padrão\r\n  } else if (duplas.length === 14) {\r\n    numGrupos = 4; // 14 duplas: 2 grupos de 4, 2 grupos de 3\r\n    grupos = [\r\n      { id: 0, duplas: duplas.slice(0, 4) },   // 4 duplas\r\n      { id: 1, duplas: duplas.slice(4, 8) },   // 4 duplas\r\n      { id: 2, duplas: duplas.slice(8, 11) },  // 3 duplas\r\n      { id: 3, duplas: duplas.slice(11, 14) }, // 3 duplas\r\n    ];\r\n  } else if (duplas.length <= 5) {\r\n    numGrupos = 1;\r\n  } else if (duplas.length <= 8) {\r\n    numGrupos = 2;\r\n  } else if (duplas.length <= 11) {\r\n    numGrupos = 3;\r\n  } else if (duplas.length <= 17) {\r\n    numGrupos = 5;\r\n  } else if (duplas.length <= 20) {\r\n    numGrupos = 6;\r\n  } else {\r\n    numGrupos = Math.ceil(duplas.length / 3);\r\n  }\r\n\r\n  if (!grupos) {\r\n    grupos = Array(numGrupos)\r\n      .fill()\r\n      .map((_, i) => ({\r\n        id: i,\r\n        duplas: duplas.slice(\r\n          i * Math.ceil(duplas.length / numGrupos),\r\n          (i + 1) * Math.ceil(duplas.length / numGrupos)\r\n        ),\r\n      }));\r\n  }\r\n\r\n  return grupos.filter((grupo) => grupo.duplas.length > 0);\r\n};\r\n\r\nexport const classificarDuplas = (grupos) => {\r\n  let classificados = [];\r\n  grupos.forEach((grupo) => {\r\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\r\n    classificados.push(\r\n      { dupla: duplasClassificadas[0], grupoId: grupo.id }, // 1º do grupo\r\n      { dupla: duplasClassificadas[1], grupoId: grupo.id }  // 2º do grupo\r\n    );\r\n  });\r\n  console.log('Duplas classificadas para a fase eliminatória:', classificados);\r\n  return classificados;\r\n};\r\n\r\nexport const iniciarFaseEliminatoria = (classificados) => {\r\n  let totalDuplas = classificados.length; // 8\r\n  let rodadas = Math.ceil(Math.log2(totalDuplas)); // 3\r\n  let proximoMultiplo = Math.pow(2, rodadas); // 8\r\n  let byes = proximoMultiplo - totalDuplas; // 0\r\n  let classificadosAjustados = [...classificados];\r\n\r\n  // Separar primeiros e segundos colocados\r\n  const primeiros = classificadosAjustados.filter((c, i) => i % 2 === 0); // 1º de cada grupo\r\n  const segundos = classificadosAjustados.filter((c, i) => i % 2 === 1);  // 2º de cada grupo\r\n\r\n  // Embaralhar para variar os cruzamentos\r\n  const shuffleArray = (array) => array.sort(() => Math.random() - 0.5);\r\n  const primeirosShuffled = shuffleArray([...primeiros]);\r\n  const segundosShuffled = shuffleArray([...segundos]);\r\n\r\n  // Criar jogos garantindo que duplas do mesmo grupo não se enfrentem\r\n  let jogosRodada = [];\r\n  for (let i = 0; i < primeirosShuffled.length; i++) {\r\n    const primeiro = primeirosShuffled[i];\r\n    const segundo = segundosShuffled[i];\r\n    if (primeiro.grupoId === segundo.grupoId) {\r\n      // Troca o segundo com o próximo disponível de grupo diferente\r\n      const swapIndex = (i + 1) % segundosShuffled.length;\r\n      segundosShuffled[i] = segundosShuffled[swapIndex];\r\n      segundosShuffled[swapIndex] = segundo;\r\n    }\r\n    jogosRodada.push({\r\n      dupla1: primeiro.dupla,\r\n      dupla2: segundosShuffled[i].dupla,\r\n      placar: '',\r\n      submetido: false,\r\n      fase: totalDuplas <= 2 ? 'Final' : totalDuplas <= 4 ? 'Semifinal' : totalDuplas <= 8 ? 'Quartas de Final' : 'Oitavas de Final',\r\n      rodada: 1,\r\n    });\r\n  }\r\n\r\n  // Adicionar BYEs, se necessário (não aplica para 8 duplas)\r\n  for (let i = 0; i < byes; i++) {\r\n    jogosRodada.push({\r\n      dupla1: classificadosAjustados[classificadosAjustados.length - byes + i].dupla,\r\n      dupla2: ['BYE', ''],\r\n      placar: '',\r\n      submetido: false,\r\n      fase: totalDuplas <= 2 ? 'Final' : totalDuplas <= 4 ? 'Semifinal' : totalDuplas <= 8 ? 'Quartas de Final' : 'Oitavas de Final',\r\n      rodada: 1,\r\n    });\r\n  }\r\n\r\n  return jogosRodada;\r\n};\r\n\r\nexport const avancarRodadaEliminatoria = (jogosRodadaAtual) => {\r\n  let vencedores = jogosRodadaAtual.map((jogo) => {\r\n    const [score1, score2] = jogo.placar.split('-').map(Number);\r\n    if (jogo.dupla2[0] === 'BYE') return jogo.dupla1;\r\n    return score1 > score2 ? jogo.dupla1 : jogo.dupla2;\r\n  });\r\n\r\n  let rodadasTotal = Math.ceil(Math.log2(vencedores.length));\r\n  let novaFaseNome =\r\n    ['Final', 'Semifinal', 'Quartas de Final'][rodadasTotal - 1] ||\r\n    `Rodada ${jogosRodadaAtual[0].rodada + 1}`;\r\n\r\n  let novaRodada = [];\r\n  for (let i = 0; i < vencedores.length; i += 2) {\r\n    if (vencedores[i + 1]) {\r\n      novaRodada.push({\r\n        dupla1: vencedores[i],\r\n        dupla2: vencedores[i + 1],\r\n        placar: '',\r\n        submetido: false,\r\n        fase: novaFaseNome,\r\n        rodada: jogosRodadaAtual[0].rodada + 1,\r\n      });\r\n    } else {\r\n      novaRodada.push({\r\n        dupla1: vencedores[i],\r\n        dupla2: ['BYE', ''],\r\n        placar: '',\r\n        submetido: false,\r\n        fase: novaFaseNome,\r\n        rodada: jogosRodadaAtual[0].rodada + 1,\r\n      });\r\n    }\r\n  }\r\n  return novaRodada;\r\n};\r\n\r\nexport const generateTournament = (nome, duplas, dataInicio, horaInicio) => {\r\n  if (duplas.length < 3) {\r\n    throw new Error('É necessário pelo menos 3 duplas para criar um torneio.');\r\n  }\r\n  if (!nome || !dataInicio || !horaInicio) {\r\n    throw new Error('Nome, data e hora de início são obrigatórios.');\r\n  }\r\n\r\n  const tournaments = loadTournaments();\r\n  if (tournaments[nome]) {\r\n    throw new Error('Já existe um torneio com esse nome. Escolha outro nome.');\r\n  }\r\n\r\n  const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\r\n  const gruposCriados = dividirGrupos(duplasSorteadas);\r\n  const gruposComJogos = gruposCriados.map((grupo) => ({\r\n    ...grupo,\r\n    jogos: criarJogosParaGrupo(grupo.duplas, grupo.id),\r\n  }));\r\n\r\n  const [ano, mes, dia] = dataInicio.split('-').map(Number);\r\n  const [hora, minuto] = horaInicio.split(':').map(Number);\r\n  const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto).toISOString();\r\n\r\n  const tournament = {\r\n    nome,\r\n    dataCriacao: new Date().toISOString(),\r\n    dataTorneio,\r\n    dataInicio,\r\n    horaInicio,\r\n    duplas: duplasSorteadas,\r\n    grupos: gruposComJogos,\r\n    jogosEliminatoria: [],\r\n    finalConfigurada: false,\r\n    terceiroLugarConfigurado: false,\r\n    ranking: [],\r\n    duplasBye: [],\r\n    historicoDuplas: duplasSorteadas.reduce((acc, dupla) => {\r\n      acc[dupla.join('')] = {\r\n        dupla,\r\n        pontos: 0,\r\n        jogos: 0,\r\n        jogosVencidos: 0,\r\n        gamesVencidos: 0,\r\n        gamesPerdidos: 0,\r\n      };\r\n      return acc;\r\n    }, {}),\r\n    status: 'rascunho',\r\n    faseAtual: 'duplas',\r\n  };\r\n\r\n  saveTournament(tournament);\r\n  return tournament;\r\n};\r\n\r\nexport const saveTournament = (tournamentData) => {\r\n  const tournaments = JSON.parse(localStorage.getItem('tournaments') || '{}');\r\n  tournaments[tournamentData.nome] = tournamentData;\r\n  localStorage.setItem('tournaments', JSON.stringify(tournaments));\r\n};\r\n\r\nexport const loadTournaments = () => {\r\n  return JSON.parse(localStorage.getItem('tournaments') || '{}');\r\n};\r\n\r\nexport const deleteTournament = (nome) => {\r\n  const tournaments = JSON.parse(localStorage.getItem('tournaments') || '{}');\r\n  delete tournaments[nome];\r\n  localStorage.setItem('tournaments', JSON.stringify(tournaments));\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}