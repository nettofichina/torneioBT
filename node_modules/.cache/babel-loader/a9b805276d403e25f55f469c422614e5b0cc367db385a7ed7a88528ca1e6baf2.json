{"ast":null,"code":"// src/utils/torneioUtils.js\nexport const classificarDuplas = grupos => {\n  // Lógica de classificação baseada nos resultados dos grupos, aqui é uma simplificação\n  return grupos.flatMap(grupo => {\n    return grupo.jogos.reduce((classificados, jogo) => {\n      const vencedor = jogo.placar.split('-').map(Number)[0] > jogo.placar.split('-').map(Number)[1] ? jogo.dupla1 : jogo.dupla2;\n      if (!classificados.some(d => d.every((player, index) => player === vencedor[index]))) {\n        classificados.push(vencedor);\n      }\n      return classificados;\n    }, []);\n  }).slice(0, 4); // Top 4 para semifinais\n};\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\n  // Lógica para criar jogos dentro de um grupo\n  const jogos = [];\n  for (let i = 0; i < duplas.length; i++) {\n    for (let j = i + 1; j < duplas.length; j++) {\n      jogos.push({\n        dupla1: duplas[i],\n        dupla2: duplas[j],\n        placar: '',\n        submetido: false,\n        grupoId\n      });\n    }\n  }\n  return jogos;\n};\nexport const dividirGrupos = duplas => {\n  let numGrupos = Math.ceil(duplas.length / 3); // 3 é o número mínimo de duplas por grupo\n\n  if (duplas.length <= 5) numGrupos = 1; // Grupo único para até 5 duplas\n  else if (duplas.length <= 8) numGrupos = 2;else if (duplas.length <= 11) numGrupos = 3;else if (duplas.length <= 14) numGrupos = 4;else if (duplas.length <= 17) numGrupos = 5;else if (duplas.length <= 20) numGrupos = 6;\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\n    id: i,\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\n  }));\n  return grupos;\n};","map":{"version":3,"names":["classificarDuplas","grupos","flatMap","grupo","jogos","reduce","classificados","jogo","vencedor","placar","split","map","Number","dupla1","dupla2","some","d","every","player","index","push","slice","criarJogosParaGrupo","duplas","grupoId","i","length","j","submetido","dividirGrupos","numGrupos","Math","ceil","Array","fill","_","id"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["// src/utils/torneioUtils.js\r\nexport const classificarDuplas = (grupos) => {\r\n  // Lógica de classificação baseada nos resultados dos grupos, aqui é uma simplificação\r\n  return grupos.flatMap(grupo => {\r\n    return grupo.jogos.reduce((classificados, jogo) => {\r\n      const vencedor = jogo.placar.split('-').map(Number)[0] > jogo.placar.split('-').map(Number)[1] ? jogo.dupla1 : jogo.dupla2;\r\n      if (!classificados.some(d => d.every((player, index) => player === vencedor[index]))) {\r\n        classificados.push(vencedor);\r\n      }\r\n      return classificados;\r\n    }, []);\r\n  }).slice(0, 4); // Top 4 para semifinais\r\n};\r\n\r\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\r\n  // Lógica para criar jogos dentro de um grupo\r\n  const jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        grupoId\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const dividirGrupos = (duplas) => {\r\n  let numGrupos = Math.ceil(duplas.length / 3); // 3 é o número mínimo de duplas por grupo\r\n  \r\n  if (duplas.length <= 5) numGrupos = 1; // Grupo único para até 5 duplas\r\n  else if (duplas.length <= 8) numGrupos = 2;\r\n  else if (duplas.length <= 11) numGrupos = 3;\r\n  else if (duplas.length <= 14) numGrupos = 4;\r\n  else if (duplas.length <= 17) numGrupos = 5;\r\n  else if (duplas.length <= 20) numGrupos = 6;\r\n\r\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\r\n    id: i,\r\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\r\n  }));\r\n\r\n  return grupos;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}