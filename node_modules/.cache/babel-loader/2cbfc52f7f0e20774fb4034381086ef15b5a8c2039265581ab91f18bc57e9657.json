{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { iniciarFaseEliminatoria, avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [expandedRodadas, setExpandedRodadas] = useState({}); // Estado para controlar quais rodadas estão expandidas\n  const [visualizacao, setVisualizacao] = useState('acordeon'); // Padrão para acordeão\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const toggleRodada = rodada => {\n    setExpandedRodadas(prevState => ({\n      ...prevState,\n      [rodada]: !prevState[rodada]\n    }));\n  };\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      const jogosRodada = iniciarFaseEliminatoria(classificados);\n      setJogosEliminatoria(jogosRodada);\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n\n      // Verifica se todos os jogos da rodada atual foram submetidos\n      const rodadaAtual = updatedJogos[0].rodada;\n      if (updatedJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n        // Se houver mais de 1 jogo, gera a próxima rodada\n        if (updatedJogos.filter(j => j.rodada === rodadaAtual).length > 1) {\n          const novaRodada = avancarRodadaEliminatoria(updatedJogos.filter(j => j.rodada === rodadaAtual));\n          setJogosEliminatoria([...updatedJogos, ...novaRodada]);\n        } else {\n          // Se restar apenas 1 jogo, podemos avançar para a fase final ou finalizar o torneio\n          // (dependendo da lógica desejada)\n        }\n      }\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([{\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final'\n      }, {\n        dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n        dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1] ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const renderizarRodadaAtual = jogos => {\n    let rodadaAtual = Math.min(...jogos.filter(j => !j.submetido).map(j => j.rodada));\n    if (!isFinite(rodadaAtual)) {\n      rodadaAtual = Math.max(...jogos.map(j => j.rodada)); // Se todos os jogos foram submetidos, pega a última rodada\n    }\n    const jogosDaRodadaAtual = jogos.filter(j => j.rodada === rodadaAtual && !j.submetido);\n    if (jogosDaRodadaAtual.length === 0) {\n      if (rodadaAtual === Math.max(...jogos.map(j => j.rodada))) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Todos os jogos desta fase foram submetidos. Aguardando avan\\xE7o para a pr\\xF3xima etapa.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 16\n        }, this);\n      }\n      return null; // Se não há jogos para mostrar, não renderiza nada\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: jogosDaRodadaAtual[0].fase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n        jogos: jogosDaRodadaAtual,\n        onAtualizarPlacar: atualizarPlacarNaEliminatoria\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setVisualizacao(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"acordeon\",\n            children: \"Acorde\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rodadaAtual\",\n            children: \"Rodada Atual\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), visualizacao === 'acordeon' ? renderizarRodadaAcordeon(jogosEliminatoria) : renderizarRodadaAtual(jogosEliminatoria), finalConfigurada && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setFaseAtual('final'),\n          children: \"Avan\\xE7ar para a Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' & ')]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pfgBzaxrMNWzSpLjEnVzvY8L/mQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","iniciarFaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","expandedRodadas","setExpandedRodadas","visualizacao","setVisualizacao","toggleRodada","rodada","prevState","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","gruposCriados","forEach","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","jogosRodada","atualizarPlacarNaEliminatoria","placar","prevJogos","updatedJogos","map","j","rodadaAtual","every","novaRodada","iniciarFinal","finalistas","fase","set1","set2","split","Number","dupla1","dupla2","console","error","atualizarPlacarNaFinal","encerrarFaseEliminatoria","max","finalizarTorneio","final","find","terceiroLugar","vencedorFinal","perdedorFinal","terceiro","quarto","lugar","add8Duplas","newDuplas","push","renderizarRodadaAtual","min","isFinite","jogosDaRodadaAtual","children","fileName","_jsxFileName","lineNumber","columnNumber","onAtualizarPlacar","className","onAddDupla","onRemoveDupla","onClick","onUpdateGroups","onChange","e","target","value","renderizarRodadaAcordeon","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { iniciarFaseEliminatoria, avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [expandedRodadas, setExpandedRodadas] = useState({}); // Estado para controlar quais rodadas estão expandidas\n  const [visualizacao, setVisualizacao] = useState('acordeon'); // Padrão para acordeão\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const toggleRodada = (rodada) => {\n    setExpandedRodadas(prevState => ({\n      ...prevState,\n      [rodada]: !prevState[rodada]\n    }));\n  };\n\n\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n  \n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      const jogosRodada = iniciarFaseEliminatoria(classificados);\n      setJogosEliminatoria(jogosRodada);\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      // Verifica se todos os jogos da rodada atual foram submetidos\n      const rodadaAtual = updatedJogos[0].rodada;\n      if (updatedJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n        // Se houver mais de 1 jogo, gera a próxima rodada\n        if (updatedJogos.filter(j => j.rodada === rodadaAtual).length > 1) {\n          const novaRodada = avancarRodadaEliminatoria(updatedJogos.filter(j => j.rodada === rodadaAtual));\n          setJogosEliminatoria([...updatedJogos, ...novaRodada]);\n        } else {\n          // Se restar apenas 1 jogo, podemos avançar para a fase final ou finalizar o torneio\n          // (dependendo da lógica desejada)\n        }\n      }\n      return updatedJogos;\n    });\n  };\n  \n  const iniciarFinal = (jogos) => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([\n        {\n          dupla1: finalistas[0],\n          dupla2: finalistas[1],\n          placar: '',\n          submetido: false,\n          fase: 'Final'\n        },\n        {\n          dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n          dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n          placar: '',\n          submetido: false,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1]\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1]\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const renderizarRodadaAtual = (jogos) => {\n    let rodadaAtual = Math.min(...jogos.filter(j => !j.submetido).map(j => j.rodada));\n    if (!isFinite(rodadaAtual)) {\n      rodadaAtual = Math.max(...jogos.map(j => j.rodada)); // Se todos os jogos foram submetidos, pega a última rodada\n    }\n    const jogosDaRodadaAtual = jogos.filter(j => j.rodada === rodadaAtual && !j.submetido);\n\n    if (jogosDaRodadaAtual.length === 0) {\n      if (rodadaAtual === Math.max(...jogos.map(j => j.rodada))) {\n        return <p>Todos os jogos desta fase foram submetidos. Aguardando avanço para a próxima etapa.</p>;\n      }\n      return null; // Se não há jogos para mostrar, não renderiza nada\n    }\n\n    return (\n      <div>\n        <h3>{jogosDaRodadaAtual[0].fase}</h3>\n        <FaseEliminatoria\n          jogos={jogosDaRodadaAtual}\n          onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button> {/* Botão temporário */}\n          </>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <select onChange={(e) => setVisualizacao(e.target.value)}>\n              <option value=\"acordeon\">Acordeão</option>\n              <option value=\"rodadaAtual\">Rodada Atual</option>\n            </select>\n            {visualizacao === 'acordeon'\n              ? renderizarRodadaAcordeon(jogosEliminatoria)\n              : renderizarRodadaAtual(jogosEliminatoria)}\n            {finalConfigurada && (\n              <button onClick={() => setFaseAtual('final')}>Avançar para a Final</button>\n            )}\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado &&\n              <p>A disputa pelo 3º lugar está configurada!</p>\n            }\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <ul>\n              {ranking.map((posição, index) => (\n                <li key={index}>\n                  {posição.lugar}º Lugar: {posição.dupla.join(' & ')}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}