{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport { saveTournament, loadTournaments, deleteTournament, generateTournament, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n  useEffect(() => {\n    setTournaments(loadTournaments());\n  }, []);\n  const loadTournament = nome => {\n    const tournament = tournaments[nome] || {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas'\n    };\n    setCurrentTournament(tournament);\n    setFaseAtual(tournament.faseAtual || 'duplas');\n  };\n  const saveCurrentTournament = () => {\n    if (currentTournament && currentTournament.nome) {\n      saveTournament({\n        ...currentTournament,\n        faseAtual\n      });\n      setTournaments(loadTournaments());\n    }\n  };\n  const updateTournamentField = (field, value) => {\n    setCurrentTournament(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const createNewTournament = () => {\n    setCurrentTournament({\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas'\n    });\n    setFaseAtual('duplas');\n  };\n  const handleDeleteTournament = nome => {\n    deleteTournament(nome);\n    setTournaments(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n    }\n  };\n  const addDupla = dupla => {\n    if (!(currentTournament !== null && currentTournament !== void 0 && currentTournament.duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1])))) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  };\n  const removeDupla = index => {\n    updateTournamentField('duplas', currentTournament.duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!currentTournament.nome || !currentTournament.dataInicio || !currentTournament.horaInicio) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    updateTournamentField('status', 'em andamento');\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  };\n  const encerrarFaseGrupos = () => {\n    if (currentTournament.grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = currentTournament.grupos.flatMap(grupo => grupo.jogos);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      todosOsJogos.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      return novoHistorico;\n    });\n    const numDuplas = currentTournament.duplas.length;\n    if (numDuplas <= 5) {\n      const classificados = classificarDuplasPorDesempate(currentTournament.duplas, todosOsJogos);\n      updateTournamentField('ranking', [{\n        lugar: 1,\n        dupla: classificados[0]\n      }, {\n        lugar: 2,\n        dupla: classificados[1]\n      }, {\n        lugar: 3,\n        dupla: classificados[2] || ['N/A', 'N/A']\n      }]);\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else if (numDuplas === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(currentTournament.grupos[0].duplas, currentTournament.grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(currentTournament.grupos[1].duplas, currentTournament.grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      updateTournamentField('jogosEliminatoria', semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = currentTournament.grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d.join('') === dupla.join('')));\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      if (numDuplas <= 11) {\n        if (rankingGeral.length < 6) {\n          if (rankingGeral.length === 2) {\n            updateTournamentField('jogosEliminatoria', [{\n              dupla1: [...rankingGeral[0]],\n              dupla2: [...rankingGeral[1]],\n              placar: '',\n              submetido: false,\n              fase: 'Final',\n              rodada: 1\n            }]);\n            setFaseAtual('final');\n          } else if (rankingGeral.length <= 4) {\n            updateTournamentField('jogosEliminatoria', [{\n              dupla1: [...rankingGeral[0]],\n              dupla2: [...rankingGeral[1]],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1\n            }, {\n              dupla1: [...rankingGeral[2]],\n              dupla2: rankingGeral[3] ? [...rankingGeral[3]] : ['BYE', ''],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1\n            }]);\n            setFaseAtual('eliminatória');\n          } else {\n            const duplasByeLocal = rankingGeral.slice(0, 2);\n            const duplasSemifinais = rankingGeral.slice(2, 4);\n            updateTournamentField('jogosEliminatoria', [{\n              dupla1: [...duplasSemifinais[0]],\n              dupla2: duplasSemifinais[1] ? [...duplasSemifinais[1]] : ['BYE', ''],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1\n            }]);\n            updateTournamentField('duplasBye', duplasByeLocal);\n            setFaseAtual('eliminatória');\n          }\n        } else {\n          const duplasByeLocal = rankingGeral.slice(0, 2);\n          const duplasQuartas = rankingGeral.slice(2, 6);\n          const jogosQuartas = [{\n            dupla1: [...duplasQuartas[0]],\n            dupla2: [...duplasQuartas[1]],\n            placar: '',\n            submetido: false,\n            fase: 'Quartas de Final',\n            rodada: 1\n          }, {\n            dupla1: [...duplasQuartas[2]],\n            dupla2: [...duplasQuartas[3]],\n            placar: '',\n            submetido: false,\n            fase: 'Quartas de Final',\n            rodada: 1\n          }];\n          updateTournamentField('jogosEliminatoria', jogosQuartas);\n          updateTournamentField('duplasBye', duplasByeLocal);\n          setFaseAtual('eliminatória');\n        }\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: top16[i + 1] ? [...top16[i + 1]] : ['BYE', ''],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n        updateTournamentField('jogosEliminatoria', jogosOitavas);\n        updateTournamentField('duplasBye', []);\n        setFaseAtual('eliminatória');\n      }\n    }\n    saveCurrentTournament();\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j)]);\n      saveCurrentTournament();\n      return;\n    }\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n      ...j,\n      placar,\n      submetido: true\n    } : j)]);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n        dupla: jogo.dupla1,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n        dupla: jogo.dupla2,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n      ...j,\n      placar,\n      submetido: true\n    } : j)]);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n        dupla: jogo.dupla1,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n        dupla: jogo.dupla2,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !currentTournament.finalConfigurada) {\n      iniciarFinal(currentTournament.jogosEliminatoria);\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && currentTournament.duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      const semifinalMatches = [{\n        dupla1: [...currentTournament.duplasBye[0]],\n        dupla2: [...vencedoresQuartas[0]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: [...currentTournament.duplasBye[1]],\n        dupla2: [...vencedoresQuartas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n    saveCurrentTournament();\n  };\n  const finalizarTorneio = () => {\n    const final = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    updateTournamentField('ranking', [{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  };\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n            }).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 699,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 700,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 701,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 714,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 715,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const incrementoMinutos = idx * 30;\n            const dataHora = formatarDataHora(currentTournament.dataTorneio, incrementoMinutos);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 740,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 741,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 742,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 743,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 744,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 745,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 739,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 768,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 769,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 770,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 771,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 767,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 766,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 785,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 786,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 787,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 788,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 784,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 774,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [...currentTournament.grupos.flatMap(grupo => grupo.jogos), ...currentTournament.jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')].filter(jogo => jogo.submetido);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n\n    // Inclui todas as duplas do torneio no historicoDuplas, mesmo as que não jogaram eliminatórias\n    const todasDuplas = currentTournament.duplas.reduce((acc, dupla) => {\n      const chave = dupla.join('');\n      if (!acc[chave]) {\n        acc[chave] = {\n          dupla,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n      }\n      return acc;\n    }, {\n      ...currentTournament.historicoDuplas\n    });\n    const estatisticasDuplas = Object.values(todasDuplas).map(dados => {\n      var _currentTournament$ra;\n      const aproveitamento = dados.jogos > 0 ? (dados.jogosVencidos / dados.jogos * 100).toFixed(2) : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ((_currentTournament$ra = currentTournament.ranking.find(r => r.dupla.join('') === dados.dupla.join(''))) === null || _currentTournament$ra === void 0 ? void 0 : _currentTournament$ra.lugar) || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => {\n      return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n    }, estatisticasDuplas[0] || {\n      dupla: 'Nenhuma',\n      vitorias: 0,\n      jogos: 0,\n      saldoGames: 0\n    });\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n  const resetTournament = () => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  };\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    updateTournamentField('duplas', newDuplas);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: btConnectLogo,\n        alt: \"btConnect Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 903,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'menu' && /*#__PURE__*/_jsxDEV(MeusTorneios, {\n        tournaments: tournaments,\n        onSelectTournament: loadTournament,\n        onCreateNew: createNewTournament,\n        onDeleteTournament: handleDeleteTournament\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 11\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 919,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.nome) || '',\n              onChange: e => updateTournamentField('nome', e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 920,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 918,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.dataInicio) || '',\n              onChange: e => updateTournamentField('dataInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 931,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 929,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 940,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.horaInicio) || '',\n              onChange: e => updateTournamentField('horaInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 941,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 951,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 950,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                try {\n                  const tournament = generateTournament(currentTournament.nome, currentTournament.duplas, currentTournament.dataInicio, currentTournament.horaInicio);\n                  setCurrentTournament(tournament);\n                  setTournaments(loadTournaments());\n                  setFaseAtual('grupos');\n                } catch (error) {\n                  alert(error.message);\n                }\n              },\n              children: \"Gerar Chaveamento\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 955,\n              columnNumber: 17\n            }, this), (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.status) === 'rascunho' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: tournamentsIcon,\n                alt: \"Tournament Icon\",\n                className: \"button-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 976,\n                columnNumber: 21\n              }, this), \"Iniciar Torneio\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 975,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 984,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add27Duplas,\n              children: \"Adicionar 27 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 985,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setFaseAtual('menu'),\n              children: \"Voltar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 986,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 954,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.duplas) || [],\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 988,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 953,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: currentTournament.grupos,\n          onUpdateGroups: newGrupos => updateTournamentField('grupos', newGrupos)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 998,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1004,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1006,\n            columnNumber: 15\n          }, this), currentTournament.grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1005,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1027,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1029,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1028,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1036,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 13\n        }, this), currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1052,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1065,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1069,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"DUPLAS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1070,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1068,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1067,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: currentTournament.ranking.map((posição, index) => {\n              let medalha = '';\n              let color = '#000';\n              if (posição.lugar === 1) {\n                medalha = '🥇';\n                color = 'gold';\n              } else if (posição.lugar === 2) {\n                medalha = '🥈';\n                color = 'silver';\n              } else if (posição.lugar === 3) {\n                medalha = '🥉';\n                color = 'brown';\n              }\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color\n                  },\n                  children: [medalha, \" \", posição.lugar, \"\\xBA Colocado\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1089,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: posição.dupla.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1092,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1088,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1073,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relatorio-estatisticas\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Estat\\xEDsticas Gerais do Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1099,\n            columnNumber: 15\n          }, this), (() => {\n            const {\n              totalPartidas,\n              totalGames,\n              estatisticasDuplas,\n              melhorCampanha\n            } = gerarRelatorioEstatisticas();\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Partidas Disputadas:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1110,\n                  columnNumber: 23\n                }, this), ' ', totalPartidas]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1109,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Games Disputados:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1114,\n                  columnNumber: 23\n                }, this), \" \", totalGames]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1113,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Melhor Campanha:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1117,\n                  columnNumber: 23\n                }, this), \" \", melhorCampanha.dupla, \" ( Saldo de Games: \", melhorCampanha.saldoGames, \",\", ' ', melhorCampanha.vitorias, \" vit\\xF3rias em\", ' ', melhorCampanha.jogos, \" jogos)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1116,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Estat\\xEDsticas por Dupla\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1122,\n                columnNumber: 21\n              }, this), estatisticasDuplas.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"POSI\\xC7\\xC3O\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1127,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DUPLA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1128,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"PARTIDAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1129,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"VIT\\xD3RIAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1130,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"GAMES (V/P)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1131,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"SALDO GAMES\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1132,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"APROVEITAMENTO\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1133,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1126,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1125,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: estatisticasDuplas.map((dupla, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1139,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.dupla\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1144,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.jogos\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1145,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.vitorias\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1146,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.gamesVencidos, \"/\", dupla.gamesPerdidos]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1147,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.saldoGames\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1150,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.aproveitamento, \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1151,\n                      columnNumber: 31\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1138,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1136,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1124,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Nenhuma estat\\xEDstica dispon\\xEDvel para as duplas.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1157,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Torneio Finalizado em\", ' ', new Date().toLocaleString('pt-BR'), \"!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1159,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: resetTournament,\n                className: \"novo-torneio-btn\",\n                children: \"In\\xEDcio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1163,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true);\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1098,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 906,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 902,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"h8Dj3+Ck4OgxxzTSC981KciK/qs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","MeusTorneios","saveTournament","loadTournaments","deleteTournament","generateTournament","classificarDuplasPorDesempate","gameDay","btConnectLogo","tournamentsIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentTournament","setCurrentTournament","faseAtual","setFaseAtual","tournaments","setTournaments","loadTournament","nome","tournament","dataCriacao","dataTorneio","dataInicio","horaInicio","duplas","grupos","jogosEliminatoria","finalConfigurada","terceiroLugarConfigurado","ranking","duplasBye","historicoDuplas","status","saveCurrentTournament","updateTournamentField","field","value","prev","createNewTournament","handleDeleteTournament","updated","addDupla","dupla","some","d","includes","alert","removeDupla","index","filter","_","i","startTournament","length","encerrarFaseGrupos","grupo","jogos","jogo","submetido","todosOsJogos","flatMap","novoHistorico","forEach","g1","g2","placar","split","map","Number","chave1","dupla1","join","chave2","dupla2","pontos","jogosVencidos","gamesVencidos","gamesPerdidos","numDuplas","classificados","lugar","rankingGrupo1","rankingGrupo2","semifinalMatches","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","dupla1Str","dupla2Str","rankingGeral","duplasByeLocal","duplasSemifinais","duplasQuartas","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","j","iniciarFinal","semifinalGames","console","error","finalistas","set1","set2","perdedores","Math","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","Date","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","dia","String","getDate","padStart","mes","getMonth","hora","getHours","minuto","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","reduce","acc","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","sort","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","gerarRelatorioEstatisticas","totalPartidas","totalGames","todasDuplas","chave","estatisticasDuplas","Object","values","dados","_currentTournament$ra","aproveitamento","toFixed","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","resetTournament","add8Duplas","newDuplas","add27Duplas","src","alt","onSelectTournament","onCreateNew","onDeleteTournament","type","onChange","e","target","toUpperCase","placeholder","onClick","message","onAddDupla","onRemoveDupla","onUpdateGroups","newGrupos","onAtualizarPlacar","onFinalizarTorneio","posição","medalha","color","style","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport {\n  saveTournament,\n  loadTournaments,\n  deleteTournament,\n  generateTournament,\n  classificarDuplasPorDesempate,\n} from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\n\nfunction App() {\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n\n  useEffect(() => {\n    setTournaments(loadTournaments());\n  }, []);\n\n  const loadTournament = (nome) => {\n    const tournament = tournaments[nome] || {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas',\n    };\n    setCurrentTournament(tournament);\n    setFaseAtual(tournament.faseAtual || 'duplas');\n  };\n\n  const saveCurrentTournament = () => {\n    if (currentTournament && currentTournament.nome) {\n      saveTournament({ ...currentTournament, faseAtual });\n      setTournaments(loadTournaments());\n    }\n  };\n\n  const updateTournamentField = (field, value) => {\n    setCurrentTournament((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const createNewTournament = () => {\n    setCurrentTournament({\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas',\n    });\n    setFaseAtual('duplas');\n  };\n\n  const handleDeleteTournament = (nome) => {\n    deleteTournament(nome);\n    setTournaments((prev) => {\n      const updated = { ...prev };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n    }\n  };\n\n  const addDupla = (dupla) => {\n    if (\n      !currentTournament?.duplas.some(\n        (d) => d.includes(dupla[0]) || d.includes(dupla[1])\n      )\n    ) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    updateTournamentField(\n      'duplas',\n      currentTournament.duplas.filter((_, i) => i !== index)\n    );\n  };\n\n  const startTournament = () => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (\n      !currentTournament.nome ||\n      !currentTournament.dataInicio ||\n      !currentTournament.horaInicio\n    ) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    updateTournamentField('status', 'em andamento');\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (\n      currentTournament.grupos.some((grupo) =>\n        grupo.jogos.some((jogo) => !jogo.submetido)\n      )\n    ) {\n      alert(\n        'Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.'\n      );\n      return;\n    }\n\n    const todosOsJogos = currentTournament.grupos.flatMap(\n      (grupo) => grupo.jogos\n    );\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach((jogo) => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      return novoHistorico;\n    });\n\n    const numDuplas = currentTournament.duplas.length;\n\n    if (numDuplas <= 5) {\n      const classificados = classificarDuplasPorDesempate(\n        currentTournament.duplas,\n        todosOsJogos\n      );\n      updateTournamentField('ranking', [\n        { lugar: 1, dupla: classificados[0] },\n        { lugar: 2, dupla: classificados[1] },\n        { lugar: 3, dupla: classificados[2] || ['N/A', 'N/A'] },\n      ]);\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else if (numDuplas === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(\n        currentTournament.grupos[0].duplas,\n        currentTournament.grupos[0].jogos\n      );\n      const rankingGrupo2 = classificarDuplasPorDesempate(\n        currentTournament.grupos[1].duplas,\n        currentTournament.grupos[1].jogos\n      );\n      const semifinalMatches = [\n        {\n          dupla1: rankingGrupo1[0],\n          dupla2: rankingGrupo2[1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n        {\n          dupla1: rankingGrupo2[0],\n          dupla2: rankingGrupo1[1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = currentTournament.grupos\n        .map((grupo) => {\n          return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(\n            0,\n            2\n          );\n        })\n        .flat();\n      const duplasUnicas = classificadosPorGrupo.filter(\n        (dupla, index, self) =>\n          index === self.findIndex((d) => d.join('') === dupla.join(''))\n      );\n      const jogosClassificados = todosOsJogos.filter((jogo) => {\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return (\n          duplasUnicas.some((d) => d.join('') === dupla1Str) &&\n          duplasUnicas.some((d) => d.join('') === dupla2Str)\n        );\n      });\n      const rankingGeral = classificarDuplasPorDesempate(\n        duplasUnicas,\n        jogosClassificados\n      );\n\n      if (numDuplas <= 11) {\n        if (rankingGeral.length < 6) {\n          if (rankingGeral.length === 2) {\n            updateTournamentField('jogosEliminatoria', [\n              {\n                dupla1: [...rankingGeral[0]],\n                dupla2: [...rankingGeral[1]],\n                placar: '',\n                submetido: false,\n                fase: 'Final',\n                rodada: 1,\n              },\n            ]);\n            setFaseAtual('final');\n          } else if (rankingGeral.length <= 4) {\n            updateTournamentField('jogosEliminatoria', [\n              {\n                dupla1: [...rankingGeral[0]],\n                dupla2: [...rankingGeral[1]],\n                placar: '',\n                submetido: false,\n                fase: 'Semifinal',\n                rodada: 1,\n              },\n              {\n                dupla1: [...rankingGeral[2]],\n                dupla2: rankingGeral[3] ? [...rankingGeral[3]] : ['BYE', ''],\n                placar: '',\n                submetido: false,\n                fase: 'Semifinal',\n                rodada: 1,\n              },\n            ]);\n            setFaseAtual('eliminatória');\n          } else {\n            const duplasByeLocal = rankingGeral.slice(0, 2);\n            const duplasSemifinais = rankingGeral.slice(2, 4);\n            updateTournamentField('jogosEliminatoria', [\n              {\n                dupla1: [...duplasSemifinais[0]],\n                dupla2: duplasSemifinais[1] ? [...duplasSemifinais[1]] : ['BYE', ''],\n                placar: '',\n                submetido: false,\n                fase: 'Semifinal',\n                rodada: 1,\n              },\n            ]);\n            updateTournamentField('duplasBye', duplasByeLocal);\n            setFaseAtual('eliminatória');\n          }\n        } else {\n          const duplasByeLocal = rankingGeral.slice(0, 2);\n          const duplasQuartas = rankingGeral.slice(2, 6);\n          const jogosQuartas = [\n            {\n              dupla1: [...duplasQuartas[0]],\n              dupla2: [...duplasQuartas[1]],\n              placar: '',\n              submetido: false,\n              fase: 'Quartas de Final',\n              rodada: 1,\n            },\n            {\n              dupla1: [...duplasQuartas[2]],\n              dupla2: [...duplasQuartas[3]],\n              placar: '',\n              submetido: false,\n              fase: 'Quartas de Final',\n              rodada: 1,\n            },\n          ];\n          updateTournamentField('jogosEliminatoria', jogosQuartas);\n          updateTournamentField('duplasBye', duplasByeLocal);\n          setFaseAtual('eliminatória');\n        }\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: top16[i + 1] ? [...top16[i + 1]] : ['BYE', ''],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1,\n          });\n        }\n        updateTournamentField('jogosEliminatoria', jogosOitavas);\n        updateTournamentField('duplasBye', []);\n        setFaseAtual('eliminatória');\n      }\n    }\n    saveCurrentTournament();\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        ),\n      ]);\n      saveCurrentTournament();\n      return;\n    }\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria.map((j) =>\n        j === jogo ? { ...j, placar, submetido: true } : j\n      ),\n    ]);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1])\n        novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      if (!novoHistorico[chave2])\n        novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter((jogo) => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria,\n      {\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n      {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n    ]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria.map((j) =>\n        j === jogo ? { ...j, placar, submetido: true } : j\n      ),\n    ]);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1])\n        novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      if (!novoHistorico[chave2])\n        novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(\n      ...currentTournament.jogosEliminatoria.map((j) => j.rodada)\n    );\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(\n      (j) => j.rodada === rodadaAtual\n    );\n\n    if (!jogosRodadaAtual.every((j) => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    if (\n      jogosRodadaAtual.some((j) => j.fase === 'Semifinal') &&\n      !currentTournament.finalConfigurada\n    ) {\n      iniciarFinal(currentTournament.jogosEliminatoria);\n    } else if (\n      jogosRodadaAtual.some((j) => j.fase === 'Quartas de Final') &&\n      currentTournament.duplas.length <= 11\n    ) {\n      const vencedoresQuartas = jogosRodadaAtual.map((jogo) => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      const semifinalMatches = [\n        {\n          dupla1: [...currentTournament.duplasBye[0]],\n          dupla2: [...vencedoresQuartas[0]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n        {\n          dupla1: [...currentTournament.duplasBye[1]],\n          dupla2: [...vencedoresQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.filter((j) => j.rodada < rodadaAtual + 1),\n        ...semifinalMatches,\n      ]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n    saveCurrentTournament();\n  };\n\n  const finalizarTorneio = () => {\n    const final = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Final'\n    );\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Disputa 3º Lugar'\n    );\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] =\n      finalSet1 > finalSet2\n        ? [final.dupla1, final.dupla2]\n        : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar\n      .split('-')\n      .map(Number);\n    const [terceiro, quarto] =\n      terceiroSet1 > terceiroSet2\n        ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n        : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    updateTournamentField('ranking', [\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto },\n    ]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every((jogo) => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = [\n        'DOM',\n        'SEG',\n        'TER',\n        'QUA',\n        'QUI',\n        'SEX',\n        'SAB',\n      ];\n      const meses = [\n        'JAN',\n        'FEV',\n        'MAR',\n        'ABR',\n        'MAI',\n        'JUN',\n        'JUL',\n        'AGO',\n        'SET',\n        'OUT',\n        'NOV',\n        'DEZ',\n      ];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(\n                (j) =>\n                  j.dupla1.join('') === dupla.join('') ||\n                  j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('')\n                  ? g1 > g2\n                  : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('')\n                  ? g1 < g2\n                  : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar\n                ? jogo.placar.split('-').map(Number)\n                : [0, 0];\n              const vencedor = jogo.placar\n                ? g1 > g2\n                  ? jogo.dupla1.join(' & ')\n                  : g2 > g1\n                  ? jogo.dupla2.join(' & ')\n                  : 'Empate'\n                : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(\n                currentTournament.dataTorneio,\n                incrementoMinutos\n              );\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map((j) => j.rodada))].sort(\n      (a, b) => a - b\n    );\n    return rodadas.map((rodada) => {\n      const jogosDaRodada = jogos.filter((j) => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor =\n                  jogo.placar && jogo.submetido\n                    ? parseInt(jogo.placar.split('-')[0]) >\n                      parseInt(jogo.placar.split('-')[1])\n                      ? jogo.dupla1.join(' & ')\n                      : jogo.dupla2.join(' & ')\n                    : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [\n      ...currentTournament.grupos.flatMap((grupo) => grupo.jogos),\n      ...currentTournament.jogosEliminatoria.filter(\n        (jogo) => jogo.placar !== 'BYE'\n      ),\n    ].filter((jogo) => jogo.submetido);\n\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n\n    // Inclui todas as duplas do torneio no historicoDuplas, mesmo as que não jogaram eliminatórias\n    const todasDuplas = currentTournament.duplas.reduce((acc, dupla) => {\n      const chave = dupla.join('');\n      if (!acc[chave]) {\n        acc[chave] = {\n          dupla,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      }\n      return acc;\n    }, { ...currentTournament.historicoDuplas });\n\n    const estatisticasDuplas = Object.values(todasDuplas).map((dados) => {\n      const aproveitamento =\n        dados.jogos > 0\n          ? ((dados.jogosVencidos / dados.jogos) * 100).toFixed(2)\n          : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking =\n        currentTournament.ranking.find((r) =>\n          r.dupla.join('') === dados.dupla.join('')\n        )?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking,\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-')\n        return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n\n    const melhorCampanha = estatisticasDuplas.reduce(\n      (melhor, atual) => {\n        return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n      },\n      estatisticasDuplas[0] || {\n        dupla: 'Nenhuma',\n        vitorias: 0,\n        jogos: 0,\n        saldoGames: 0,\n      }\n    );\n\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha,\n    };\n  };\n\n  const resetTournament = () => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  };\n\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [\n      ...currentTournament.duplas,\n      ...newDuplas,\n    ]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    updateTournamentField('duplas', newDuplas);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'menu' && (\n          <MeusTorneios\n            tournaments={tournaments}\n            onSelectTournament={loadTournament}\n            onCreateNew={createNewTournament}\n            onDeleteTournament={handleDeleteTournament}\n          />\n        )}\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={currentTournament?.nome || ''}\n                  onChange={(e) =>\n                    updateTournamentField('nome', e.target.value.toUpperCase())\n                  }\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={currentTournament?.dataInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('dataInicio', e.target.value)\n                  }\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={currentTournament?.horaInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('horaInicio', e.target.value)\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button\n                  onClick={() => {\n                    try {\n                      const tournament = generateTournament(\n                        currentTournament.nome,\n                        currentTournament.duplas,\n                        currentTournament.dataInicio,\n                        currentTournament.horaInicio\n                      );\n                      setCurrentTournament(tournament);\n                      setTournaments(loadTournaments());\n                      setFaseAtual('grupos');\n                    } catch (error) {\n                      alert(error.message);\n                    }\n                  }}\n                >\n                  Gerar Chaveamento\n                </button>\n                {currentTournament?.status === 'rascunho' && (\n                  <button className=\"iniciar-torneio\" onClick={startTournament}>\n                    <img\n                      src={tournamentsIcon}\n                      alt=\"Tournament Icon\"\n                      className=\"button-icon\"\n                    />\n                    Iniciar Torneio\n                  </button>\n                )}\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n                <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n                <button onClick={() => setFaseAtual('menu')}>Voltar</button>\n              </div>\n              <DuplasList\n                duplas={currentTournament?.duplas || []}\n                onAddDupla={addDupla}\n                onRemoveDupla={removeDupla}\n              />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos\n              grupos={currentTournament.grupos}\n              onUpdateGroups={(newGrupos) =>\n                updateTournamentField('grupos', newGrupos)\n              }\n            />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {currentTournament.grupos.map((grupo) =>\n                renderClassificacaoGrupo(grupo)\n              )}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) =>\n                  !jogo.submetido ||\n                  jogo.rodada ===\n                    Math.max(\n                      ...currentTournament.jogosEliminatoria.map((j) => j.rodada)\n                    )\n              )}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) =>\n                  jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {currentTournament.jogosEliminatoria\n              .filter(\n                (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )\n              .every((jogo) => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(\n                currentTournament.jogosEliminatoria.filter(\n                  (jogo) =>\n                    jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n                )\n              )}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLAS</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentTournament.ranking.map((posição, index) => {\n                  let medalha = '';\n                  let color = '#000';\n                  if (posição.lugar === 1) {\n                    medalha = '🥇';\n                    color = 'gold';\n                  } else if (posição.lugar === 2) {\n                    medalha = '🥈';\n                    color = 'silver';\n                  } else if (posição.lugar === 3) {\n                    medalha = '🥉';\n                    color = 'brown';\n                  }\n                  return (\n                    <tr key={index}>\n                      <td style={{ color }}>\n                        {medalha} {posição.lugar}º Colocado\n                      </td>\n                      <td>{posição.dupla.join(' & ')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <div className=\"relatorio-estatisticas\">\n              <h3>Estatísticas Gerais do Torneio</h3>\n              {(() => {\n                const {\n                  totalPartidas,\n                  totalGames,\n                  estatisticasDuplas,\n                  melhorCampanha,\n                } = gerarRelatorioEstatisticas();\n                return (\n                  <>\n                    <p>\n                      <strong>Total de Partidas Disputadas:</strong>{' '}\n                      {totalPartidas}\n                    </p>\n                    <p>\n                      <strong>Total de Games Disputados:</strong> {totalGames}\n                    </p>\n                    <p>\n                      <strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (\n                      Saldo de Games: {melhorCampanha.saldoGames},{' '}\n                      {melhorCampanha.vitorias} vitórias em{' '}\n                      {melhorCampanha.jogos} jogos)\n                    </p>\n                    <h4>Estatísticas por Dupla</h4>\n                    {estatisticasDuplas.length > 0 ? (\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>POSIÇÃO</th>\n                            <th>DUPLA</th>\n                            <th>PARTIDAS</th>\n                            <th>VITÓRIAS</th>\n                            <th>GAMES (V/P)</th>\n                            <th>SALDO GAMES</th>\n                            <th>APROVEITAMENTO</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {estatisticasDuplas.map((dupla, index) => (\n                            <tr key={index}>\n                              <td>\n                                {dupla.posicaoRanking !== '-'\n                                  ? `${dupla.posicaoRanking}º`\n                                  : '-'}\n                              </td>\n                              <td>{dupla.dupla}</td>\n                              <td>{dupla.jogos}</td>\n                              <td>{dupla.vitorias}</td>\n                              <td>\n                                {dupla.gamesVencidos}/{dupla.gamesPerdidos}\n                              </td>\n                              <td>{dupla.saldoGames}</td>\n                              <td>{dupla.aproveitamento}%</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    ) : (\n                      <p>Nenhuma estatística disponível para as duplas.</p>\n                    )}\n                    <p>\n                      Torneio Finalizado em{' '}\n                      {new Date().toLocaleString('pt-BR')}!\n                    </p>\n                    <button\n                      onClick={resetTournament}\n                      className=\"novo-torneio-btn\"\n                    >\n                      Início\n                    </button>\n                  </>\n                );\n              })()}\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}