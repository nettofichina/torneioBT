{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport { saveTournament, loadTournaments, deleteTournament, generateTournament, classificarDuplasPorDesempate, classificarDuplas, iniciarFaseEliminatoria, avancarRodadaEliminatoria, criarJogosParaGrupo } from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport shuffleIcon from './assets/icons/shuffle.svg';\nimport folderIcon from './assets/icons/folder.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n  const [manualGroups, setManualGroups] = useState(null);\n  useEffect(() => {\n    const updatedTournaments = loadTournaments();\n    setTournaments(updatedTournaments);\n  }, []);\n  const saveCurrentTournament = useCallback(() => {\n    if (currentTournament && currentTournament.nome && currentTournament.dataInicio && currentTournament.horaInicio) {\n      const tournamentToSave = {\n        ...currentTournament,\n        faseAtual\n      };\n      console.log('Salvando torneio no localStorage:', tournamentToSave);\n      saveTournament(tournamentToSave);\n      setTournaments(loadTournaments());\n    }\n  }, [currentTournament, faseAtual]);\n  const updateTournamentField = useCallback((field, value) => {\n    setCurrentTournament(prev => {\n      const updated = {\n        ...prev,\n        [field]: value\n      };\n      console.log(`Atualizando ${field}:`, value);\n      if (updated.nome && updated.dataInicio && updated.horaInicio) {\n        saveCurrentTournament();\n      }\n      return updated;\n    });\n  }, [saveCurrentTournament]);\n  const createNewTournament = useCallback(() => {\n    const newTournament = {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas'\n    };\n    setCurrentTournament(newTournament);\n    setFaseAtual('duplas');\n  }, []);\n  const loadTournament = useCallback(nome => {\n    const tournament = tournaments[nome];\n    if (tournament) {\n      console.log('Carregando torneio do localStorage:', tournament);\n      setCurrentTournament(tournament);\n      setFaseAtual(tournament.status === 'finalizado' ? 'finalizado' : tournament.faseAtual || 'duplas');\n    } else {\n      createNewTournament();\n    }\n  }, [tournaments, createNewTournament]);\n  const handleDeleteTournament = useCallback(nome => {\n    deleteTournament(nome);\n    setTournaments(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n    }\n  }, [currentTournament]);\n  const handleImportTournaments = useCallback(importedTournaments => {\n    setTournaments(prev => {\n      const updatedTournaments = {\n        ...prev,\n        ...importedTournaments\n      };\n      Object.entries(updatedTournaments).forEach(([nome, tournament]) => {\n        saveTournament(tournament);\n      });\n      return updatedTournaments;\n    });\n  }, []);\n  const addDupla = useCallback(dupla => {\n    if (!(currentTournament !== null && currentTournament !== void 0 && currentTournament.duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1])))) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  }, [currentTournament, updateTournamentField]);\n  const removeDupla = useCallback(index => {\n    updateTournamentField('duplas', currentTournament.duplas.filter((_, i) => i !== index));\n  }, [currentTournament, updateTournamentField]);\n  const startTournament = useCallback(() => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!currentTournament.nome || !currentTournament.dataInicio || !currentTournament.horaInicio) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const duplasSorteadas = [...currentTournament.duplas].sort(() => Math.random() - 0.5);\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = {\n        dupla,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      return acc;\n    }, {});\n    setCurrentTournament(prev => ({\n      ...prev,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString(),\n      duplas: duplasSorteadas\n    }));\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  }, [currentTournament, saveCurrentTournament]);\n  const iniciarChavesManuais = useCallback(() => {\n    const numDuplas = currentTournament.duplas.length;\n    if (numDuplas < 3) {\n      alert('É necessário pelo menos 3 duplas para criar um torneio.');\n      return;\n    }\n    if (!currentTournament.nome || !currentTournament.dataInicio || !currentTournament.horaInicio) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    let numGrupos;\n    if (numDuplas === 6) numGrupos = 2; // Para Categoria D\n    else if (numDuplas === 14) numGrupos = 4; // Para Categoria B/C\n    else if (numDuplas <= 5) numGrupos = 1;else if (numDuplas <= 8) numGrupos = 2;else if (numDuplas <= 11) numGrupos = 3;else if (numDuplas <= 17) numGrupos = 5;else if (numDuplas <= 20) numGrupos = 6;else numGrupos = Math.ceil(numDuplas / 3);\n    const gruposIniciais = Array(numGrupos).fill().map((_, i) => ({\n      id: i,\n      duplas: []\n    }));\n    if (numDuplas === 6) {\n      // Categoria D: 2 grupos de 3\n      gruposIniciais[0].maxDuplas = 3;\n      gruposIniciais[1].maxDuplas = 3;\n    } else if (numDuplas === 14) {\n      // Categoria B/C: 2 de 4, 2 de 3\n      gruposIniciais[0].maxDuplas = 4;\n      gruposIniciais[1].maxDuplas = 4;\n      gruposIniciais[2].maxDuplas = 3;\n      gruposIniciais[3].maxDuplas = 3;\n    } else {\n      const baseSize = Math.floor(numDuplas / numGrupos);\n      const extras = numDuplas % numGrupos;\n      gruposIniciais.forEach((grupo, i) => {\n        grupo.maxDuplas = baseSize + (i < extras ? 1 : 0);\n      });\n    }\n    setManualGroups(gruposIniciais);\n  }, [currentTournament]);\n  const confirmarChavesManuais = useCallback(() => {\n    const totalDuplasAtribuidas = manualGroups.reduce((acc, grupo) => acc + grupo.duplas.length, 0);\n    if (totalDuplasAtribuidas !== currentTournament.duplas.length) {\n      alert('Todas as duplas devem ser atribuídas aos grupos.');\n      return;\n    }\n    const gruposComJogos = manualGroups.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    const historicoInicial = currentTournament.duplas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = {\n        dupla,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      return acc;\n    }, {});\n    setCurrentTournament(prev => ({\n      ...prev,\n      grupos: gruposComJogos,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString()\n    }));\n    setFaseAtual('grupos');\n    setManualGroups(null);\n    saveCurrentTournament();\n  }, [manualGroups, currentTournament, saveCurrentTournament]);\n  const gerarSumulas = useCallback((fase, jogos) => {\n    const dataTorneio = currentTournament.dataInicio;\n    const horaInicio = currentTournament.horaInicio;\n    const categoria = currentTournament.duplas.length === 6 ? 'D' : 'B/C';\n\n    // Agrupar jogos em pares para duas súmulas por página\n    const sumulasHtml = [];\n    for (let i = 0; i < jogos.length; i += 2) {\n      const jogo1 = jogos[i];\n      const jogo2 = jogos[i + 1] || null; // Pode haver um número ímpar de jogos\n\n      const getSumulaHtml = (jogo, index) => {\n        if (!jogo) return ''; // Se não houver segundo jogo, deixa vazio\n        const grupoId = fase === 'grupos' ? jogo.grupoId + 1 : '';\n        const faseNome = fase === 'grupos' ? `Grupo ${grupoId}` : jogo.fase;\n        const horarioEstimado = new Date(`${dataTorneio}T${horaInicio}`);\n        horarioEstimado.setMinutes(horarioEstimado.getMinutes() + index * 30);\n        const horarioFormatado = horarioEstimado.toLocaleTimeString('pt-BR', {\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n        return `\n          <div class=\"sumula\" style=\"font-family: Arial, sans-serif; font-size: 9pt; width: 190mm; height: 135mm; margin: 5mm auto; padding: 0; border: 1px solid #000;\">\n            <h2 style=\"text-align: center; font-size: 11pt; margin: 3px 0;\">SÚMULA DE JOGO</h2>\n            <h3 style=\"text-align: center; font-size: 9pt; margin: 2px 0;\">Arena Beach Tennis - Monte Santo de Minas/MG</h3>\n            <table style=\"width: 100%; border-collapse: collapse; font-size: 8pt;\">\n              <tr>\n                <td><strong>Cat.:</strong> ${categoria}</td>\n                <td><strong>Data:</strong> ${new Date(dataTorneio).toLocaleDateString('pt-BR')}</td>\n                <td><strong>Horário:</strong> ${horarioFormatado}</td>\n              </tr>\n              <tr>\n                <td colspan=\"3\"><strong>Fase:</strong> ${faseNome}</td>\n              </tr>\n            </table>\n            <hr style=\"margin: 3px 0;\">\n            <table style=\"width: 100%; border-collapse: collapse; font-size: 8pt;\">\n              <tr>\n                <td style=\"width: 50%;\"><strong>Dupla 1:</strong> ${jogo.dupla1[0]} & ${jogo.dupla1[1]}</td>\n                <td style=\"width: 50%;\"><strong>Dupla 2:</strong> ${jogo.dupla2[0]} & ${jogo.dupla2[1]}</td>\n              </tr>\n            </table>\n            <table style=\"width: 40%; margin: 3px auto; text-align: center; border-collapse: collapse; font-size: 8pt;\">\n              <tr>\n                <th>D1</th>\n                <th>X</th>\n                <th>D2</th>\n              </tr>\n              <tr>\n                <td style=\"border: 1px solid #000; height: 15px; width: 30px;\">___</td>\n                <td>-</td>\n                <td style=\"border: 1px solid #000; height: 15px; width: 30px;\">___</td>\n              </tr>\n            </table>\n            <p style=\"font-size: 7pt; text-align: center; margin: 2px 0;\">Set até 6 (W.O.: 6x0)</p>\n            <hr style=\"margin: 3px 0;\">\n            <p style=\"font-size: 8pt; margin: 2px 0;\">\n              <strong>Vencedor:</strong> [ ] D1 [ ] D2 [ ] W.O.  \n              <strong>Placar:</strong> ___ x ___\n            </p>\n            <p style=\"font-size: 8pt; margin: 2px 0;\">\n              <strong>Resp.:</strong> _____________________<br>\n              <strong>Org.:</strong> _____________________<br>\n              <strong>Entrega:</strong> ___/___ às ___:___\n            </p>\n            <p style=\"font-size: 7pt; margin: 2px 0;\">Obs.: _____________________</p>\n          </div>\n        `;\n      };\n      sumulasHtml.push(`\n        <div class=\"page\" style=\"width: 210mm; height: 297mm; margin: 0 auto; padding: 0;\">\n          ${getSumulaHtml(jogo1, i)}\n          ${jogo2 ? '<hr style=\"border: 1px dashed #000; margin: 5mm 0;\">' : ''}\n          ${jogo2 ? getSumulaHtml(jogo2, i + 1) : ''}\n        </div>\n      `);\n    }\n    const printWindow = window.open('', '_blank');\n    printWindow.document.write(`\n      <html>\n        <head>\n          <title>Súmulas - Torneio de Beach Tennis</title>\n          <style>\n            @media print {\n              .page { page-break-after: always; }\n              body { margin: 0; padding: 0; }\n              .sumula { box-sizing: border-box; }\n            }\n          </style>\n        </head>\n        <body>${sumulasHtml.join('')}</body>\n      </html>\n    `);\n    printWindow.document.close();\n    printWindow.print();\n  }, [currentTournament]);\n  const imprimirSumulasGrupos = useCallback(() => {\n    const jogosGrupos = currentTournament.grupos.flatMap(grupo => grupo.jogos);\n    gerarSumulas('grupos', jogosGrupos);\n  }, [currentTournament, gerarSumulas]);\n  const imprimirSumulasEliminatorias = useCallback(rodada => {\n    const jogosRodada = currentTournament.jogosEliminatoria.filter(j => j.rodada === rodada);\n    gerarSumulas('eliminatória', jogosRodada);\n  }, [currentTournament, gerarSumulas]);\n  const encerrarFaseGrupos = useCallback(() => {\n    if (currentTournament.grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido || !jogo.placar))) {\n      alert('Todos os jogos da fase de grupos devem ter placares submetidos antes de encerrar.');\n      return;\n    }\n    const todosOsJogos = currentTournament.grupos.flatMap(grupo => grupo.jogos);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      todosOsJogos.forEach(jogo => {\n        if (!jogo.placar || !jogo.placar.includes('-') || !jogo.submetido) return;\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      return novoHistorico;\n    });\n    const numDuplas = currentTournament.duplas.length;\n    const classificados = classificarDuplas(currentTournament.grupos);\n    if (numDuplas <= 4) {\n      const ranking = classificarDuplasPorDesempate(classificados.map(c => c.dupla), todosOsJogos);\n      updateTournamentField('ranking', ranking.map((dupla, index) => ({\n        lugar: index + 1,\n        dupla: dupla\n      })));\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else {\n      const jogosEliminatoria = iniciarFaseEliminatoria(classificados);\n      updateTournamentField('jogosEliminatoria', jogosEliminatoria);\n      updateTournamentField('duplasBye', []);\n      setFaseAtual('eliminatória');\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const atualizarPlacarNaEliminatoria = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na eliminatória:', {\n      jogo,\n      placar\n    });\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j)]);\n      const vencedora = jogo.dupla1[0] === 'BYE' ? jogo.dupla2 : jogo.dupla1;\n      const chaveVencedora = vencedora.join('');\n      updateTournamentField('historicoDuplas', prev => {\n        var _novoHistorico$chaveV, _novoHistorico$chaveV2, _novoHistorico$chaveV3, _novoHistorico$chaveV4, _novoHistorico$chaveV5;\n        const novoHistorico = {\n          ...prev\n        };\n        novoHistorico[chaveVencedora] = {\n          dupla: vencedora,\n          jogos: (((_novoHistorico$chaveV = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV === void 0 ? void 0 : _novoHistorico$chaveV.jogos) || 0) + 1,\n          jogosVencidos: (((_novoHistorico$chaveV2 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV2 === void 0 ? void 0 : _novoHistorico$chaveV2.jogosVencidos) || 0) + 1,\n          pontos: (((_novoHistorico$chaveV3 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV3 === void 0 ? void 0 : _novoHistorico$chaveV3.pontos) || 0) + 5,\n          gamesVencidos: ((_novoHistorico$chaveV4 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV4 === void 0 ? void 0 : _novoHistorico$chaveV4.gamesVencidos) || 0,\n          gamesPerdidos: ((_novoHistorico$chaveV5 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV5 === void 0 ? void 0 : _novoHistorico$chaveV5.gamesPerdidos) || 0\n        };\n        console.log('Histórico após eliminatória (BYE):', novoHistorico);\n        return novoHistorico;\n      });\n    } else {\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n        ...j,\n        placar,\n        submetido: true\n      } : j)]);\n      updateTournamentField('historicoDuplas', prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após eliminatória:', novoHistorico);\n        return novoHistorico;\n      });\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const iniciarFinal = useCallback(jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria, {\n      dupla1: [...finalistas[0]],\n      dupla2: [...finalistas[1]],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }, {\n      dupla1: [...perdedores[0]],\n      dupla2: [...perdedores[1]],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const atualizarPlacarNaFinal = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na final:', {\n      jogo,\n      placar\n    });\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n      ...j,\n      placar,\n      submetido: true\n    } : j)]);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n        dupla: jogo.dupla1,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n        dupla: jogo.dupla2,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      console.log('Histórico após final:', novoHistorico);\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const encerrarFaseEliminatoria = useCallback(jogos => {\n    const rodadaAtual = Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    const vencedores = jogosRodadaAtual.map(jogo => {\n      if (jogo.dupla2[0] === 'BYE') return jogo.dupla1;\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    if (vencedores.length === 2 && !currentTournament.finalConfigurada) {\n      iniciarFinal(jogosRodadaAtual);\n    } else if (vencedores.length > 2) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria, ...novaRodada]);\n      saveCurrentTournament();\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  }, [currentTournament, updateTournamentField, saveCurrentTournament, iniciarFinal]);\n  const finalizarTorneio = useCallback(() => {\n    const final = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    updateTournamentField('ranking', [{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const renderClassificacaoGrupo = useCallback(grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n            }).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 728,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 729,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 730,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 731,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 732,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 733,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 745,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 742,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const incrementoMinutos = idx * 30;\n            const dataHora = formatarDataHora(currentTournament.dataTorneio, incrementoMinutos);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 761,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 762,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 764,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 765,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 766,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 7\n    }, this);\n  }, [currentTournament]);\n  const renderizarFaseEliminatoria = useCallback(jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 783,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 788,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 789,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 786,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 785,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 804,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 805,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 806,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => imprimirSumulasEliminatorias(rodada),\n          children: [\"Imprimir S\\xFAmulas da Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 9\n      }, this);\n    });\n  }, [imprimirSumulasEliminatorias]);\n  const gerarRelatorioEstatisticas = useCallback(() => {\n    const todosOsJogos = [...currentTournament.grupos.flatMap(grupo => grupo.jogos), ...currentTournament.jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')].filter(jogo => jogo.submetido);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + (isNaN(g1) || isNaN(g2) ? 0 : g1 + g2);\n    }, 0);\n    const historicoDuplas = currentTournament.historicoDuplas || {};\n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      var _currentTournament$ra;\n      const derrotas = dados.jogos - dados.jogosVencidos;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ((_currentTournament$ra = currentTournament.ranking.find(r => r.dupla.join('') === dados.dupla.join(''))) === null || _currentTournament$ra === void 0 ? void 0 : _currentTournament$ra.lugar) || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        derrotas,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => atual.saldoGames > melhor.saldoGames ? atual : melhor, estatisticasDuplas[0] || {\n      dupla: 'Nenhuma',\n      vitorias: 0,\n      jogos: 0,\n      saldoGames: 0\n    });\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  }, [currentTournament]);\n  const resetTournament = useCallback(() => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  }, []);\n  const add8Duplas = useCallback(() => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  }, [currentTournament, updateTournamentField]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: btConnectLogo,\n        alt: \"btConnect Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 884,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'menu' && /*#__PURE__*/_jsxDEV(MeusTorneios, {\n        tournaments: tournaments,\n        onSelectTournament: loadTournament,\n        onCreateNew: createNewTournament,\n        onDeleteTournament: handleDeleteTournament,\n        onImportTournaments: handleImportTournaments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 11\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.nome) || '',\n              onChange: e => updateTournamentField('nome', e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.dataInicio) || '',\n              onChange: e => updateTournamentField('dataInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 911,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 909,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 918,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.horaInicio) || '',\n              onChange: e => updateTournamentField('horaInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 919,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 917,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 899,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"GerarChaves\",\n              onClick: () => {\n                try {\n                  const tournament = generateTournament(currentTournament.nome, currentTournament.duplas, currentTournament.dataInicio, currentTournament.horaInicio);\n                  setCurrentTournament(tournament);\n                  setTournaments(loadTournaments());\n                  setFaseAtual('grupos');\n                } catch (error) {\n                  alert(error.message);\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: shuffleIcon,\n                alt: \"Shuffle Icon\",\n                className: \"shuffle-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 949,\n                columnNumber: 19\n              }, this), \"Gerar Chaveamento\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 931,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"GerarChavesManuais\",\n              onClick: iniciarChavesManuais,\n              children: \"Gerar Chaves Manuais\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 952,\n              columnNumber: 17\n            }, this), (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.status) === 'rascunho' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: tournamentsIcon,\n                alt: \"Tournament Icon\",\n                className: \"button-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 957,\n                columnNumber: 21\n              }, this), \"Iniciar Torneio\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 956,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"homePage\",\n              onClick: () => setFaseAtual('menu'),\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: folderIcon,\n                alt: \"Folder Icon\",\n                className: \"folder-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 962,\n                columnNumber: 19\n              }, this), \"Meus Torneios\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 961,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 965,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 930,\n            columnNumber: 15\n          }, this), manualGroups ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"manual-groups\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Organize os Grupos Manualmente\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 969,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                gap: '20px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Duplas Dispon\\xEDveis\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 972,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: currentTournament.duplas.filter(dupla => !manualGroups.some(g => g.duplas.some(d => d.join('') === dupla.join('')))).map((dupla, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [dupla.join(' & '), manualGroups.map(grupo => grupo.duplas.length < grupo.maxDuplas && /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => setManualGroups(prev => prev.map(g => g.id === grupo.id ? {\n                        ...g,\n                        duplas: [...g.duplas, dupla]\n                      } : g)),\n                      children: [\"Adicionar ao Grupo \", grupo.id + 1]\n                    }, grupo.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 983,\n                      columnNumber: 35\n                    }, this))]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 979,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 973,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 971,\n                columnNumber: 21\n              }, this), manualGroups.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: [\"Grupo \", grupo.id + 1, \" (\", grupo.duplas.length, \"/\", grupo.maxDuplas, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1003,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: grupo.duplas.map((dupla, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [dupla.join(' & '), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => setManualGroups(prev => prev.map(g => g.id === grupo.id ? {\n                        ...g,\n                        duplas: g.duplas.filter(d => d.join('') !== dupla.join(''))\n                      } : g)),\n                      children: \"Remover\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1008,\n                      columnNumber: 31\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1006,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1004,\n                  columnNumber: 25\n                }, this)]\n              }, grupo.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1002,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 970,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: confirmarChavesManuais,\n              children: \"Confirmar Grupos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1027,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setManualGroups(null),\n              children: \"Cancelar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1028,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 968,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.duplas) || [],\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1031,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 898,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: currentTournament.grupos,\n          onUpdateGroups: newGrupos => updateTournamentField('grupos', newGrupos)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1042,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1046,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: imprimirSumulasGrupos,\n          children: \"Imprimir S\\xFAmulas da Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1047,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1049,\n            columnNumber: 15\n          }, this), currentTournament.grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1056,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria,\n          onAvancarParaFinal: encerrarFaseEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1057,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => encerrarFaseEliminatoria(currentTournament.jogosEliminatoria),\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1070,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1077,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 13\n        }, this), currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1088,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => gerarSumulas('final', currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')),\n          children: \"Imprimir S\\xFAmulas da Fase Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1090,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1096,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1095,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1111,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"DUPLAS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1112,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1110,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: currentTournament.ranking.map((posição, index) => {\n              let medalha = '';\n              let color = '#000';\n              if (posição.lugar === 1) {\n                medalha = '🥇';\n                color = 'gold';\n              } else if (posição.lugar === 2) {\n                medalha = '🥈';\n                color = 'silver';\n              } else if (posição.lugar === 3) {\n                medalha = '🥉';\n                color = 'brown';\n              }\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color\n                  },\n                  children: [medalha, \" \", posição.lugar, \"\\xBA Colocado\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1131,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: posição.dupla.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1132,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1130,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1115,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relatorio-estatisticas\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Estat\\xEDsticas Gerais do Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1139,\n            columnNumber: 15\n          }, this), (() => {\n            const {\n              totalPartidas,\n              totalGames,\n              estatisticasDuplas,\n              melhorCampanha\n            } = gerarRelatorioEstatisticas();\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Partidas Disputadas:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1145,\n                  columnNumber: 24\n                }, this), \" \", totalPartidas]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1145,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Games Disputados:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1146,\n                  columnNumber: 24\n                }, this), \" \", totalGames]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1146,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Melhor Campanha:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1148,\n                  columnNumber: 23\n                }, this), \" \", melhorCampanha.dupla, \" ( Saldo de Games: \", melhorCampanha.saldoGames, \", \", melhorCampanha.vitorias, \" vit\\xF3rias em\", ' ', melhorCampanha.jogos, \" jogos)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1147,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Estat\\xEDsticas por Dupla\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1152,\n                columnNumber: 21\n              }, this), estatisticasDuplas.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"POSI\\xC7\\xC3O\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1157,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DUPLA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1158,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"PARTIDAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1159,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"VIT\\xD3RIAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1160,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DERROTAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1161,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"GAMES (V/P)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1162,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"SALDO GAMES\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1163,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1156,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1155,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: estatisticasDuplas.map((dupla, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1169,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.dupla\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1170,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.jogos\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1171,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.vitorias\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1172,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.derrotas\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1173,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.gamesVencidos, \"/\", dupla.gamesPerdidos]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1174,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.saldoGames\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1175,\n                      columnNumber: 31\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1168,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1166,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1154,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Nenhuma estat\\xEDstica dispon\\xEDvel para as duplas.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1181,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"historico-jogos\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Hist\\xF3rico de Jogos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1184,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Fase de Grupos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1185,\n                  columnNumber: 23\n                }, this), currentTournament.grupos.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                    children: [\"Grupo \", grupo.id + 1]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1188,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                          children: \"Jogo\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1192,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: \"Dupla 1\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1193,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: \"Placar\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1194,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: \"Dupla 2\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1195,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1191,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1190,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                      children: grupo.jogos.filter(jogo => jogo.submetido).map((jogo, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                          children: index + 1\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1203,\n                          columnNumber: 37\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: jogo.dupla1.join(' & ')\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1204,\n                          columnNumber: 37\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: jogo.placar\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1205,\n                          columnNumber: 37\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: jogo.dupla2.join(' & ')\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1206,\n                          columnNumber: 37\n                        }, this)]\n                      }, index, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1202,\n                        columnNumber: 35\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1198,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1189,\n                    columnNumber: 27\n                  }, this)]\n                }, `grupo-${grupo.id}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1187,\n                  columnNumber: 25\n                }, this)), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Fase Eliminat\\xF3ria\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1213,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Jogo\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1217,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Dupla 1\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1218,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Placar\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1219,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Dupla 2\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1220,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Fase\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1221,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1216,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1215,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: currentTournament.jogosEliminatoria.filter(jogo => jogo.submetido && jogo.fase !== 'Final' && jogo.fase !== 'Disputa 3º Lugar').map((jogo, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: index + 1\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1229,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.dupla1.join(' & ')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1230,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.placar\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1231,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.dupla2.join(' & ')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1232,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.fase\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1233,\n                        columnNumber: 33\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1228,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1224,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1214,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Fase Final\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1238,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Jogo\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1242,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Dupla 1\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1243,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Placar\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1244,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Dupla 2\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1245,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Fase\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1246,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1241,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1240,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: currentTournament.jogosEliminatoria.filter(jogo => jogo.submetido && (jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')).map((jogo, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: index + 1\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1254,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.dupla1.join(' & ')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1255,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.placar\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1256,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.dupla2.join(' & ')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1257,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.fase\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1258,\n                        columnNumber: 33\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1253,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1249,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1239,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1183,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Torneio Finalizado em \", new Date().toLocaleString('pt-BR'), \"!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1264,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: resetTournament,\n                className: \"novo-torneio-btn\",\n                children: \"In\\xEDcio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1265,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true);\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1138,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 887,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 883,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QJe78WfUC6+k3bcpD5mRWxVM2No=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","MeusTorneios","saveTournament","loadTournaments","deleteTournament","generateTournament","classificarDuplasPorDesempate","classificarDuplas","iniciarFaseEliminatoria","avancarRodadaEliminatoria","criarJogosParaGrupo","gameDay","btConnectLogo","tournamentsIcon","shuffleIcon","folderIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentTournament","setCurrentTournament","faseAtual","setFaseAtual","tournaments","setTournaments","manualGroups","setManualGroups","updatedTournaments","saveCurrentTournament","nome","dataInicio","horaInicio","tournamentToSave","console","log","updateTournamentField","field","value","prev","updated","createNewTournament","newTournament","dataCriacao","dataTorneio","duplas","grupos","jogosEliminatoria","finalConfigurada","terceiroLugarConfigurado","ranking","duplasBye","historicoDuplas","status","loadTournament","tournament","handleDeleteTournament","handleImportTournaments","importedTournaments","Object","entries","forEach","addDupla","dupla","some","d","includes","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","historicoInicial","reduce","acc","join","pontos","jogos","jogosVencidos","gamesVencidos","gamesPerdidos","Date","toISOString","iniciarChavesManuais","numDuplas","numGrupos","ceil","gruposIniciais","Array","fill","map","id","maxDuplas","baseSize","floor","extras","grupo","confirmarChavesManuais","totalDuplasAtribuidas","gruposComJogos","gerarSumulas","fase","categoria","sumulasHtml","jogo1","jogo2","getSumulaHtml","jogo","grupoId","faseNome","horarioEstimado","setMinutes","getMinutes","horarioFormatado","toLocaleTimeString","hour","minute","toLocaleDateString","dupla1","dupla2","push","printWindow","window","open","document","write","close","print","imprimirSumulasGrupos","jogosGrupos","flatMap","imprimirSumulasEliminatorias","rodada","jogosRodada","j","encerrarFaseGrupos","submetido","placar","todosOsJogos","novoHistorico","g1","g2","split","Number","isNaN","chave1","chave2","classificados","c","lugar","atualizarPlacarNaEliminatoria","vencedora","chaveVencedora","_novoHistorico$chaveV","_novoHistorico$chaveV2","_novoHistorico$chaveV3","_novoHistorico$chaveV4","_novoHistorico$chaveV5","iniciarFinal","semifinalGames","error","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedores","novaRodada","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","diasSemana","meses","diaSemana","getDay","dia","String","getDate","padStart","mes","getMonth","hora","getHours","minuto","className","children","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","onClick","gerarRelatorioEstatisticas","totalPartidas","totalGames","estatisticasDuplas","values","dados","_currentTournament$ra","derrotas","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","resetTournament","add8Duplas","newDuplas","src","alt","onSelectTournament","onCreateNew","onDeleteTournament","onImportTournaments","type","onChange","e","target","toUpperCase","placeholder","message","style","display","gap","g","onAddDupla","onRemoveDupla","onUpdateGroups","newGrupos","onAtualizarPlacar","onAvancarParaFinal","onFinalizarTorneio","posição","medalha","color","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport {\n  saveTournament,\n  loadTournaments,\n  deleteTournament,\n  generateTournament,\n  classificarDuplasPorDesempate,\n  classificarDuplas,\n  iniciarFaseEliminatoria,\n  avancarRodadaEliminatoria,\n  criarJogosParaGrupo,\n} from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport shuffleIcon from './assets/icons/shuffle.svg';\nimport folderIcon from './assets/icons/folder.svg';\n\nfunction App() {\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n  const [manualGroups, setManualGroups] = useState(null);\n\n  useEffect(() => {\n    const updatedTournaments = loadTournaments();\n    setTournaments(updatedTournaments);\n  }, []);\n\n  const saveCurrentTournament = useCallback(() => {\n    if (currentTournament && currentTournament.nome && currentTournament.dataInicio && currentTournament.horaInicio) {\n      const tournamentToSave = { ...currentTournament, faseAtual };\n      console.log('Salvando torneio no localStorage:', tournamentToSave);\n      saveTournament(tournamentToSave);\n      setTournaments(loadTournaments());\n    }\n  }, [currentTournament, faseAtual]);\n\n  const updateTournamentField = useCallback((field, value) => {\n    setCurrentTournament((prev) => {\n      const updated = { ...prev, [field]: value };\n      console.log(`Atualizando ${field}:`, value);\n      if (updated.nome && updated.dataInicio && updated.horaInicio) {\n        saveCurrentTournament();\n      }\n      return updated;\n    });\n  }, [saveCurrentTournament]);\n\n  const createNewTournament = useCallback(() => {\n    const newTournament = {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas',\n    };\n    setCurrentTournament(newTournament);\n    setFaseAtual('duplas');\n  }, []);\n\n  const loadTournament = useCallback((nome) => {\n    const tournament = tournaments[nome];\n    if (tournament) {\n      console.log('Carregando torneio do localStorage:', tournament);\n      setCurrentTournament(tournament);\n      setFaseAtual(tournament.status === 'finalizado' ? 'finalizado' : tournament.faseAtual || 'duplas');\n    } else {\n      createNewTournament();\n    }\n  }, [tournaments, createNewTournament]);\n\n  const handleDeleteTournament = useCallback((nome) => {\n    deleteTournament(nome);\n    setTournaments((prev) => {\n      const updated = { ...prev };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n    }\n  }, [currentTournament]);\n\n  const handleImportTournaments = useCallback((importedTournaments) => {\n    setTournaments((prev) => {\n      const updatedTournaments = { ...prev, ...importedTournaments };\n      Object.entries(updatedTournaments).forEach(([nome, tournament]) => {\n        saveTournament(tournament);\n      });\n      return updatedTournaments;\n    });\n  }, []);\n\n  const addDupla = useCallback((dupla) => {\n    if (\n      !currentTournament?.duplas.some(\n        (d) => d.includes(dupla[0]) || d.includes(dupla[1])\n      )\n    ) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  }, [currentTournament, updateTournamentField]);\n\n  const removeDupla = useCallback((index) => {\n    updateTournamentField(\n      'duplas',\n      currentTournament.duplas.filter((_, i) => i !== index)\n    );\n  }, [currentTournament, updateTournamentField]);\n\n  const startTournament = useCallback(() => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (\n      !currentTournament.nome ||\n      !currentTournament.dataInicio ||\n      !currentTournament.horaInicio\n    ) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const duplasSorteadas = [...currentTournament.duplas].sort(() => Math.random() - 0.5);\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n    setCurrentTournament((prev) => ({\n      ...prev,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString(),\n      duplas: duplasSorteadas,\n    }));\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  }, [currentTournament, saveCurrentTournament]);\n\n  const iniciarChavesManuais = useCallback(() => {\n    const numDuplas = currentTournament.duplas.length;\n    if (numDuplas < 3) {\n      alert('É necessário pelo menos 3 duplas para criar um torneio.');\n      return;\n    }\n    if (!currentTournament.nome || !currentTournament.dataInicio || !currentTournament.horaInicio) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n\n    let numGrupos;\n    if (numDuplas === 6) numGrupos = 2; // Para Categoria D\n    else if (numDuplas === 14) numGrupos = 4; // Para Categoria B/C\n    else if (numDuplas <= 5) numGrupos = 1;\n    else if (numDuplas <= 8) numGrupos = 2;\n    else if (numDuplas <= 11) numGrupos = 3;\n    else if (numDuplas <= 17) numGrupos = 5;\n    else if (numDuplas <= 20) numGrupos = 6;\n    else numGrupos = Math.ceil(numDuplas / 3);\n\n    const gruposIniciais = Array(numGrupos).fill().map((_, i) => ({\n      id: i,\n      duplas: [],\n    }));\n\n    if (numDuplas === 6) { // Categoria D: 2 grupos de 3\n      gruposIniciais[0].maxDuplas = 3;\n      gruposIniciais[1].maxDuplas = 3;\n    } else if (numDuplas === 14) { // Categoria B/C: 2 de 4, 2 de 3\n      gruposIniciais[0].maxDuplas = 4;\n      gruposIniciais[1].maxDuplas = 4;\n      gruposIniciais[2].maxDuplas = 3;\n      gruposIniciais[3].maxDuplas = 3;\n    } else {\n      const baseSize = Math.floor(numDuplas / numGrupos);\n      const extras = numDuplas % numGrupos;\n      gruposIniciais.forEach((grupo, i) => {\n        grupo.maxDuplas = baseSize + (i < extras ? 1 : 0);\n      });\n    }\n\n    setManualGroups(gruposIniciais);\n  }, [currentTournament]);\n\n  const confirmarChavesManuais = useCallback(() => {\n    const totalDuplasAtribuidas = manualGroups.reduce((acc, grupo) => acc + grupo.duplas.length, 0);\n    if (totalDuplasAtribuidas !== currentTournament.duplas.length) {\n      alert('Todas as duplas devem ser atribuídas aos grupos.');\n      return;\n    }\n\n    const gruposComJogos = manualGroups.map((grupo) => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id),\n    }));\n\n    const historicoInicial = currentTournament.duplas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n\n    setCurrentTournament((prev) => ({\n      ...prev,\n      grupos: gruposComJogos,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString(),\n    }));\n    setFaseAtual('grupos');\n    setManualGroups(null);\n    saveCurrentTournament();\n  }, [manualGroups, currentTournament, saveCurrentTournament]);\n\n  const gerarSumulas = useCallback((fase, jogos) => {\n    const dataTorneio = currentTournament.dataInicio;\n    const horaInicio = currentTournament.horaInicio;\n    const categoria = currentTournament.duplas.length === 6 ? 'D' : 'B/C';\n  \n    // Agrupar jogos em pares para duas súmulas por página\n    const sumulasHtml = [];\n    for (let i = 0; i < jogos.length; i += 2) {\n      const jogo1 = jogos[i];\n      const jogo2 = jogos[i + 1] || null; // Pode haver um número ímpar de jogos\n  \n      const getSumulaHtml = (jogo, index) => {\n        if (!jogo) return ''; // Se não houver segundo jogo, deixa vazio\n        const grupoId = fase === 'grupos' ? jogo.grupoId + 1 : '';\n        const faseNome = fase === 'grupos' ? `Grupo ${grupoId}` : jogo.fase;\n        const horarioEstimado = new Date(`${dataTorneio}T${horaInicio}`);\n        horarioEstimado.setMinutes(horarioEstimado.getMinutes() + index * 30);\n        const horarioFormatado = horarioEstimado.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n  \n        return `\n          <div class=\"sumula\" style=\"font-family: Arial, sans-serif; font-size: 9pt; width: 190mm; height: 135mm; margin: 5mm auto; padding: 0; border: 1px solid #000;\">\n            <h2 style=\"text-align: center; font-size: 11pt; margin: 3px 0;\">SÚMULA DE JOGO</h2>\n            <h3 style=\"text-align: center; font-size: 9pt; margin: 2px 0;\">Arena Beach Tennis - Monte Santo de Minas/MG</h3>\n            <table style=\"width: 100%; border-collapse: collapse; font-size: 8pt;\">\n              <tr>\n                <td><strong>Cat.:</strong> ${categoria}</td>\n                <td><strong>Data:</strong> ${new Date(dataTorneio).toLocaleDateString('pt-BR')}</td>\n                <td><strong>Horário:</strong> ${horarioFormatado}</td>\n              </tr>\n              <tr>\n                <td colspan=\"3\"><strong>Fase:</strong> ${faseNome}</td>\n              </tr>\n            </table>\n            <hr style=\"margin: 3px 0;\">\n            <table style=\"width: 100%; border-collapse: collapse; font-size: 8pt;\">\n              <tr>\n                <td style=\"width: 50%;\"><strong>Dupla 1:</strong> ${jogo.dupla1[0]} & ${jogo.dupla1[1]}</td>\n                <td style=\"width: 50%;\"><strong>Dupla 2:</strong> ${jogo.dupla2[0]} & ${jogo.dupla2[1]}</td>\n              </tr>\n            </table>\n            <table style=\"width: 40%; margin: 3px auto; text-align: center; border-collapse: collapse; font-size: 8pt;\">\n              <tr>\n                <th>D1</th>\n                <th>X</th>\n                <th>D2</th>\n              </tr>\n              <tr>\n                <td style=\"border: 1px solid #000; height: 15px; width: 30px;\">___</td>\n                <td>-</td>\n                <td style=\"border: 1px solid #000; height: 15px; width: 30px;\">___</td>\n              </tr>\n            </table>\n            <p style=\"font-size: 7pt; text-align: center; margin: 2px 0;\">Set até 6 (W.O.: 6x0)</p>\n            <hr style=\"margin: 3px 0;\">\n            <p style=\"font-size: 8pt; margin: 2px 0;\">\n              <strong>Vencedor:</strong> [ ] D1 [ ] D2 [ ] W.O.  \n              <strong>Placar:</strong> ___ x ___\n            </p>\n            <p style=\"font-size: 8pt; margin: 2px 0;\">\n              <strong>Resp.:</strong> _____________________<br>\n              <strong>Org.:</strong> _____________________<br>\n              <strong>Entrega:</strong> ___/___ às ___:___\n            </p>\n            <p style=\"font-size: 7pt; margin: 2px 0;\">Obs.: _____________________</p>\n          </div>\n        `;\n      };\n  \n      sumulasHtml.push(`\n        <div class=\"page\" style=\"width: 210mm; height: 297mm; margin: 0 auto; padding: 0;\">\n          ${getSumulaHtml(jogo1, i)}\n          ${jogo2 ? '<hr style=\"border: 1px dashed #000; margin: 5mm 0;\">' : ''}\n          ${jogo2 ? getSumulaHtml(jogo2, i + 1) : ''}\n        </div>\n      `);\n    }\n  \n    const printWindow = window.open('', '_blank');\n    printWindow.document.write(`\n      <html>\n        <head>\n          <title>Súmulas - Torneio de Beach Tennis</title>\n          <style>\n            @media print {\n              .page { page-break-after: always; }\n              body { margin: 0; padding: 0; }\n              .sumula { box-sizing: border-box; }\n            }\n          </style>\n        </head>\n        <body>${sumulasHtml.join('')}</body>\n      </html>\n    `);\n    printWindow.document.close();\n    printWindow.print();\n  }, [currentTournament]);\n\n  const imprimirSumulasGrupos = useCallback(() => {\n    const jogosGrupos = currentTournament.grupos.flatMap((grupo) => grupo.jogos);\n    gerarSumulas('grupos', jogosGrupos);\n  }, [currentTournament, gerarSumulas]);\n\n  const imprimirSumulasEliminatorias = useCallback((rodada) => {\n    const jogosRodada = currentTournament.jogosEliminatoria.filter((j) => j.rodada === rodada);\n    gerarSumulas('eliminatória', jogosRodada);\n  }, [currentTournament, gerarSumulas]);\n\n  const encerrarFaseGrupos = useCallback(() => {\n    if (\n      currentTournament.grupos.some((grupo) =>\n        grupo.jogos.some((jogo) => !jogo.submetido || !jogo.placar)\n      )\n    ) {\n      alert('Todos os jogos da fase de grupos devem ter placares submetidos antes de encerrar.');\n      return;\n    }\n\n    const todosOsJogos = currentTournament.grupos.flatMap((grupo) => grupo.jogos);\n\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach((jogo) => {\n        if (!jogo.placar || !jogo.placar.includes('-') || !jogo.submetido) return;\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      return novoHistorico;\n    });\n\n    const numDuplas = currentTournament.duplas.length;\n    const classificados = classificarDuplas(currentTournament.grupos);\n\n    if (numDuplas <= 4) {\n      const ranking = classificarDuplasPorDesempate(classificados.map(c => c.dupla), todosOsJogos);\n      updateTournamentField('ranking', ranking.map((dupla, index) => ({\n        lugar: index + 1,\n        dupla: dupla,\n      })));\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else {\n      const jogosEliminatoria = iniciarFaseEliminatoria(classificados);\n      updateTournamentField('jogosEliminatoria', jogosEliminatoria);\n      updateTournamentField('duplasBye', []);\n      setFaseAtual('eliminatória');\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const atualizarPlacarNaEliminatoria = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na eliminatória:', { jogo, placar });\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        ),\n      ]);\n      const vencedora = jogo.dupla1[0] === 'BYE' ? jogo.dupla2 : jogo.dupla1;\n      const chaveVencedora = vencedora.join('');\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        novoHistorico[chaveVencedora] = {\n          dupla: vencedora,\n          jogos: (novoHistorico[chaveVencedora]?.jogos || 0) + 1,\n          jogosVencidos: (novoHistorico[chaveVencedora]?.jogosVencidos || 0) + 1,\n          pontos: (novoHistorico[chaveVencedora]?.pontos || 0) + 5,\n          gamesVencidos: novoHistorico[chaveVencedora]?.gamesVencidos || 0,\n          gamesPerdidos: novoHistorico[chaveVencedora]?.gamesPerdidos || 0,\n        };\n        console.log('Histórico após eliminatória (BYE):', novoHistorico);\n        return novoHistorico;\n      });\n    } else {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar, submetido: true } : j\n        ),\n      ]);\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após eliminatória:', novoHistorico);\n        return novoHistorico;\n      });\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const iniciarFinal = useCallback((jogos) => {\n    const semifinalGames = jogos.filter((jogo) => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria,\n      {\n        dupla1: [...finalistas[0]],\n        dupla2: [...finalistas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n      {\n        dupla1: [...perdedores[0]],\n        dupla2: [...perdedores[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n    ]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const atualizarPlacarNaFinal = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na final:', { jogo, placar });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria.map((j) =>\n        j === jogo ? { ...j, placar, submetido: true } : j\n      ),\n    ]);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1])\n        novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      if (!novoHistorico[chave2])\n        novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      console.log('Histórico após final:', novoHistorico);\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const encerrarFaseEliminatoria = useCallback((jogos) => {\n    const rodadaAtual = Math.max(\n      ...currentTournament.jogosEliminatoria.map((j) => j.rodada)\n    );\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(\n      (j) => j.rodada === rodadaAtual\n    );\n\n    if (!jogosRodadaAtual.every((j) => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    const vencedores = jogosRodadaAtual.map((jogo) => {\n      if (jogo.dupla2[0] === 'BYE') return jogo.dupla1;\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    if (vencedores.length === 2 && !currentTournament.finalConfigurada) {\n      iniciarFinal(jogosRodadaAtual);\n    } else if (vencedores.length > 2) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria,\n        ...novaRodada,\n      ]);\n      saveCurrentTournament();\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  }, [currentTournament, updateTournamentField, saveCurrentTournament, iniciarFinal]);\n\n  const finalizarTorneio = useCallback(() => {\n    const final = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Final'\n    );\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Disputa 3º Lugar'\n    );\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] =\n      finalSet1 > finalSet2\n        ? [final.dupla1, final.dupla2]\n        : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] =\n      terceiroSet1 > terceiroSet2\n        ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n        : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    updateTournamentField('ranking', [\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto },\n    ]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const renderClassificacaoGrupo = useCallback((grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every((jogo) => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(\n                (j) =>\n                  j.dupla1.join('') === dupla.join('') ||\n                  j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar\n                ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate'\n                : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(currentTournament.dataTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }, [currentTournament]);\n\n  const renderizarFaseEliminatoria = useCallback((jogos) => {\n    const rodadas = [...new Set(jogos.map((j) => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map((rodada) => {\n      const jogosDaRodada = jogos.filter((j) => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor =\n                  jogo.placar && jogo.submetido\n                    ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1])\n                      ? jogo.dupla1.join(' & ')\n                      : jogo.dupla2.join(' & ')\n                    : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <button onClick={() => imprimirSumulasEliminatorias(rodada)}>\n            Imprimir Súmulas da Rodada {rodada}\n          </button>\n        </div>\n      );\n    });\n  }, [imprimirSumulasEliminatorias]);\n\n  const gerarRelatorioEstatisticas = useCallback(() => {\n    const todosOsJogos = [\n      ...currentTournament.grupos.flatMap((grupo) => grupo.jogos),\n      ...currentTournament.jogosEliminatoria.filter((jogo) => jogo.placar !== 'BYE'),\n    ].filter((jogo) => jogo.submetido);\n\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + (isNaN(g1) || isNaN(g2) ? 0 : g1 + g2);\n    }, 0);\n\n    const historicoDuplas = currentTournament.historicoDuplas || {};\n\n    const estatisticasDuplas = Object.values(historicoDuplas).map((dados) => {\n      const derrotas = dados.jogos - dados.jogosVencidos;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking =\n        currentTournament.ranking.find((r) => r.dupla.join('') === dados.dupla.join(''))?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        derrotas,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        posicaoRanking,\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n\n    const melhorCampanha = estatisticasDuplas.reduce(\n      (melhor, atual) => (atual.saldoGames > melhor.saldoGames ? atual : melhor),\n      estatisticasDuplas[0] || { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 }\n    );\n\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha,\n    };\n  }, [currentTournament]);\n\n  const resetTournament = useCallback(() => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  }, []);\n\n  const add8Duplas = useCallback(() => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  }, [currentTournament, updateTournamentField]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'menu' && (\n          <MeusTorneios\n            tournaments={tournaments}\n            onSelectTournament={loadTournament}\n            onCreateNew={createNewTournament}\n            onDeleteTournament={handleDeleteTournament}\n            onImportTournaments={handleImportTournaments}\n          />\n        )}\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={currentTournament?.nome || ''}\n                  onChange={(e) => updateTournamentField('nome', e.target.value.toUpperCase())}\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={currentTournament?.dataInicio || ''}\n                  onChange={(e) => updateTournamentField('dataInicio', e.target.value)}\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={currentTournament?.horaInicio || ''}\n                  onChange={(e) => updateTournamentField('horaInicio', e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button\n                  className=\"GerarChaves\"\n                  onClick={() => {\n                    try {\n                      const tournament = generateTournament(\n                        currentTournament.nome,\n                        currentTournament.duplas,\n                        currentTournament.dataInicio,\n                        currentTournament.horaInicio\n                      );\n                      setCurrentTournament(tournament);\n                      setTournaments(loadTournaments());\n                      setFaseAtual('grupos');\n                    } catch (error) {\n                      alert(error.message);\n                    }\n                  }}\n                >\n                  <img src={shuffleIcon} alt=\"Shuffle Icon\" className=\"shuffle-icon\" />\n                  Gerar Chaveamento\n                </button>\n                <button className=\"GerarChavesManuais\" onClick={iniciarChavesManuais}>\n                  Gerar Chaves Manuais\n                </button>\n                {currentTournament?.status === 'rascunho' && (\n                  <button className=\"iniciar-torneio\" onClick={startTournament}>\n                    <img src={tournamentsIcon} alt=\"Tournament Icon\" className=\"button-icon\" />\n                    Iniciar Torneio\n                  </button>\n                )}\n                <button className=\"homePage\" onClick={() => setFaseAtual('menu')}>\n                  <img src={folderIcon} alt=\"Folder Icon\" className=\"folder-icon\" />\n                  Meus Torneios\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n              </div>\n              {manualGroups ? (\n                <div className=\"manual-groups\">\n                  <h3>Organize os Grupos Manualmente</h3>\n                  <div style={{ display: 'flex', gap: '20px' }}>\n                    <div>\n                      <h4>Duplas Disponíveis</h4>\n                      <ul>\n                        {currentTournament.duplas\n                          .filter((dupla) =>\n                            !manualGroups.some((g) => g.duplas.some((d) => d.join('') === dupla.join('')))\n                          )\n                          .map((dupla, index) => (\n                            <li key={index}>\n                              {dupla.join(' & ')}\n                              {manualGroups.map((grupo) => (\n                                grupo.duplas.length < grupo.maxDuplas && (\n                                  <button\n                                    key={grupo.id}\n                                    onClick={() =>\n                                      setManualGroups((prev) =>\n                                        prev.map((g) =>\n                                          g.id === grupo.id ? { ...g, duplas: [...g.duplas, dupla] } : g\n                                        )\n                                      )\n                                    }\n                                  >\n                                    Adicionar ao Grupo {grupo.id + 1}\n                                  </button>\n                                )\n                              ))}\n                            </li>\n                          ))}\n                      </ul>\n                    </div>\n                    {manualGroups.map((grupo) => (\n                      <div key={grupo.id}>\n                        <h4>Grupo {grupo.id + 1} ({grupo.duplas.length}/{grupo.maxDuplas})</h4>\n                        <ul>\n                          {grupo.duplas.map((dupla, index) => (\n                            <li key={index}>\n                              {dupla.join(' & ')}\n                              <button\n                                onClick={() =>\n                                  setManualGroups((prev) =>\n                                    prev.map((g) =>\n                                      g.id === grupo.id\n                                        ? { ...g, duplas: g.duplas.filter((d) => d.join('') !== dupla.join('')) }\n                                        : g\n                                    )\n                                  )\n                                }\n                              >\n                                Remover\n                              </button>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    ))}\n                  </div>\n                  <button onClick={confirmarChavesManuais}>Confirmar Grupos</button>\n                  <button onClick={() => setManualGroups(null)}>Cancelar</button>\n                </div>\n              ) : (\n                <DuplasList\n                  duplas={currentTournament?.duplas || []}\n                  onAddDupla={addDupla}\n                  onRemoveDupla={removeDupla}\n                />\n              )}\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos\n              grupos={currentTournament.grupos}\n              onUpdateGroups={(newGrupos) => updateTournamentField('grupos', newGrupos)}\n            />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <button onClick={imprimirSumulasGrupos}>Imprimir Súmulas da Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {currentTournament.grupos.map((grupo) => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) =>\n                  !jogo.submetido ||\n                  jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map((j) => j.rodada))\n              )}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n              onAvancarParaFinal={encerrarFaseEliminatoria}\n            />\n            <button onClick={() => encerrarFaseEliminatoria(currentTournament.jogosEliminatoria)}>\n              Encerrar Etapa\n            </button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {currentTournament.jogosEliminatoria\n              .filter((jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')\n              .every((jogo) => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <button onClick={() => gerarSumulas('final', currentTournament.jogosEliminatoria.filter(\n              (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n            ))}>\n              Imprimir Súmulas da Fase Final\n            </button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(\n                currentTournament.jogosEliminatoria.filter(\n                  (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n                )\n              )}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLAS</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentTournament.ranking.map((posição, index) => {\n                  let medalha = '';\n                  let color = '#000';\n                  if (posição.lugar === 1) {\n                    medalha = '🥇';\n                    color = 'gold';\n                  } else if (posição.lugar === 2) {\n                    medalha = '🥈';\n                    color = 'silver';\n                  } else if (posição.lugar === 3) {\n                    medalha = '🥉';\n                    color = 'brown';\n                  }\n                  return (\n                    <tr key={index}>\n                      <td style={{ color }}>{medalha} {posição.lugar}º Colocado</td>\n                      <td>{posição.dupla.join(' & ')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <div className=\"relatorio-estatisticas\">\n              <h3>Estatísticas Gerais do Torneio</h3>\n              {(() => {\n                const { totalPartidas, totalGames, estatisticasDuplas, melhorCampanha } =\n                  gerarRelatorioEstatisticas();\n                return (\n                  <>\n                    <p><strong>Total de Partidas Disputadas:</strong> {totalPartidas}</p>\n                    <p><strong>Total de Games Disputados:</strong> {totalGames}</p>\n                    <p>\n                      <strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (\n                      Saldo de Games: {melhorCampanha.saldoGames}, {melhorCampanha.vitorias} vitórias em{' '}\n                      {melhorCampanha.jogos} jogos)\n                    </p>\n                    <h4>Estatísticas por Dupla</h4>\n                    {estatisticasDuplas.length > 0 ? (\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>POSIÇÃO</th>\n                            <th>DUPLA</th>\n                            <th>PARTIDAS</th>\n                            <th>VITÓRIAS</th>\n                            <th>DERROTAS</th>\n                            <th>GAMES (V/P)</th>\n                            <th>SALDO GAMES</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {estatisticasDuplas.map((dupla, index) => (\n                            <tr key={index}>\n                              <td>{dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'}</td>\n                              <td>{dupla.dupla}</td>\n                              <td>{dupla.jogos}</td>\n                              <td>{dupla.vitorias}</td>\n                              <td>{dupla.derrotas}</td>\n                              <td>{dupla.gamesVencidos}/{dupla.gamesPerdidos}</td>\n                              <td>{dupla.saldoGames}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    ) : (\n                      <p>Nenhuma estatística disponível para as duplas.</p>\n                    )}\n                    <div className=\"historico-jogos\">\n                      <h4>Histórico de Jogos</h4>\n                      <h5>Fase de Grupos</h5>\n                      {currentTournament.grupos.map((grupo) => (\n                        <div key={`grupo-${grupo.id}`}>\n                          <h6>Grupo {grupo.id + 1}</h6>\n                          <table>\n                            <thead>\n                              <tr>\n                                <th>Jogo</th>\n                                <th>Dupla 1</th>\n                                <th>Placar</th>\n                                <th>Dupla 2</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {grupo.jogos\n                                .filter((jogo) => jogo.submetido)\n                                .map((jogo, index) => (\n                                  <tr key={index}>\n                                    <td>{index + 1}</td>\n                                    <td>{jogo.dupla1.join(' & ')}</td>\n                                    <td>{jogo.placar}</td>\n                                    <td>{jogo.dupla2.join(' & ')}</td>\n                                  </tr>\n                                ))}\n                            </tbody>\n                          </table>\n                        </div>\n                      ))}\n                      <h5>Fase Eliminatória</h5>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Jogo</th>\n                            <th>Dupla 1</th>\n                            <th>Placar</th>\n                            <th>Dupla 2</th>\n                            <th>Fase</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {currentTournament.jogosEliminatoria\n                            .filter((jogo) => jogo.submetido && jogo.fase !== 'Final' && jogo.fase !== 'Disputa 3º Lugar')\n                            .map((jogo, index) => (\n                              <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{jogo.dupla1.join(' & ')}</td>\n                                <td>{jogo.placar}</td>\n                                <td>{jogo.dupla2.join(' & ')}</td>\n                                <td>{jogo.fase}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n                      <h5>Fase Final</h5>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Jogo</th>\n                            <th>Dupla 1</th>\n                            <th>Placar</th>\n                            <th>Dupla 2</th>\n                            <th>Fase</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {currentTournament.jogosEliminatoria\n                            .filter((jogo) => jogo.submetido && (jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))\n                            .map((jogo, index) => (\n                              <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{jogo.dupla1.join(' & ')}</td>\n                                <td>{jogo.placar}</td>\n                                <td>{jogo.dupla2.join(' & ')}</td>\n                                <td>{jogo.fase}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n                    </div>\n                    <p>Torneio Finalizado em {new Date().toLocaleString('pt-BR')}!</p>\n                    <button onClick={resetTournament} className=\"novo-torneio-btn\">\n                      Início\n                    </button>\n                  </>\n                );\n              })()}\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}