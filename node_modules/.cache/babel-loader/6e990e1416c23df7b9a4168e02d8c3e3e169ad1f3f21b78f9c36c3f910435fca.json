{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport './App.css';\nimport { dividirGrupos, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [resultados, setResultados] = useState({}); // Adicionando o estado resultados\n\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    console.log('Estado dos grupos antes de verificar:', grupos);\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado'); // Ou qualquer outro estado final\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  // Função para iniciar a fase eliminatória\n  const iniciarFaseEliminatoria = classificados => {\n    let jogosEliminatoria = [];\n\n    // Assumindo que classificados está corretamente ordenado com 4 duplas (2 de cada grupo)\n    jogosEliminatoria.push({\n      dupla1: classificados[0],\n      // 1º Grupo 1\n      dupla2: classificados[3],\n      // 2º Grupo 2\n      placar: '',\n      submetido: false,\n      jogoIndex: 0\n    });\n    jogosEliminatoria.push({\n      dupla1: classificados[2],\n      // 1º Grupo 2\n      dupla2: classificados[1],\n      // 2º Grupo 1\n      placar: '',\n      submetido: false,\n      jogoIndex: 1\n    });\n    setJogosEliminatoria(jogosEliminatoria);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para adicionar 8 duplas automaticamente\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const atualizarEstatisticas = jogo => {\n    const {\n      dupla1,\n      dupla2,\n      placar\n    } = jogo;\n    const [set1, set2] = placar.split('-').map(Number);\n    const vencedor = set1 > set2 ? dupla1 : dupla2;\n    setResultados(prevResultados => {\n      var _prevResultados$dupla, _prevResultados$dupla2, _prevResultados$dupla3, _prevResultados$dupla4, _prevResultados$dupla5, _prevResultados$dupla6, _prevResultados$dupla7, _prevResultados$dupla8, _prevResultados$dupla9, _prevResultados$dupla10, _prevResultados$dupla11, _prevResultados$dupla12;\n      return {\n        ...prevResultados,\n        [dupla1.join(',')]: {\n          ...(prevResultados[dupla1.join(',')] || {\n            vitórias: 0,\n            derrotas: 0,\n            setsVencidos: 0,\n            setsPerdidos: 0\n          }),\n          vitórias: vencedor === dupla1 ? ((_prevResultados$dupla = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla === void 0 ? void 0 : _prevResultados$dupla.vitórias) + 1 || 1 : ((_prevResultados$dupla2 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla2 === void 0 ? void 0 : _prevResultados$dupla2.vitórias) || 0,\n          derrotas: vencedor === dupla2 ? ((_prevResultados$dupla3 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla3 === void 0 ? void 0 : _prevResultados$dupla3.derrotas) + 1 || 1 : ((_prevResultados$dupla4 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla4 === void 0 ? void 0 : _prevResultados$dupla4.derrotas) || 0,\n          setsVencidos: ((_prevResultados$dupla5 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla5 === void 0 ? void 0 : _prevResultados$dupla5.setsVencidos) + (vencedor === dupla1 ? set1 : set2) || (vencedor === dupla1 ? set1 : set2),\n          setsPerdidos: ((_prevResultados$dupla6 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla6 === void 0 ? void 0 : _prevResultados$dupla6.setsPerdidos) + (vencedor === dupla1 ? set2 : set1) || (vencedor === dupla1 ? set2 : set1)\n        },\n        [dupla2.join(',')]: {\n          ...(prevResultados[dupla2.join(',')] || {\n            vitórias: 0,\n            derrotas: 0,\n            setsVencidos: 0,\n            setsPerdidos: 0\n          }),\n          vitórias: vencedor === dupla2 ? ((_prevResultados$dupla7 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla7 === void 0 ? void 0 : _prevResultados$dupla7.vitórias) + 1 || 1 : ((_prevResultados$dupla8 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla8 === void 0 ? void 0 : _prevResultados$dupla8.vitórias) || 0,\n          derrotas: vencedor === dupla1 ? ((_prevResultados$dupla9 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla9 === void 0 ? void 0 : _prevResultados$dupla9.derrotas) + 1 || 1 : ((_prevResultados$dupla10 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla10 === void 0 ? void 0 : _prevResultados$dupla10.derrotas) || 0,\n          setsVencidos: ((_prevResultados$dupla11 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla11 === void 0 ? void 0 : _prevResultados$dupla11.setsVencidos) + (vencedor === dupla2 ? set1 : set2) || (vencedor === dupla2 ? set1 : set2),\n          setsPerdidos: ((_prevResultados$dupla12 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla12 === void 0 ? void 0 : _prevResultados$dupla12.setsPerdidos) + (vencedor === dupla2 ? set2 : set1) || (vencedor === dupla2 ? set2 : set1)\n        }\n      };\n    });\n  };\n\n  // Função para determinar Vencedores\n  const determinarVencedores = () => {\n    // Supondo que jogosEliminatoria agora contém apenas a final\n    if (jogosEliminatoria.length !== 1) {\n      console.error(\"Erro: Esperava-se um jogo final.\");\n      return;\n    }\n    const final = jogosEliminatoria[0];\n    const [set1, set2] = final.placar.split('-').map(Number);\n    const campeao = set1 > set2 ? final.dupla1 : final.dupla2;\n    const viceCampeao = campeao === final.dupla1 ? final.dupla2 : final.dupla1;\n\n    // Para terceiro e quarto lugar, você pode decidir como quer fazer isso (desempate, jogo de terceiro lugar, etc.)\n    // Aqui, assumimos que os perdedores das semifinais são terceiro e quarto lugar, mas isso depende do regulamento\n    const semifinal1 = jogosEliminatoria[1]; // Assumindo que essas foram as semifinais\n    const semifinal2 = jogosEliminatoria[0]; // antes da final ser definida\n    const terceiroLugar = set1 > set2 ? semifinal1.dupla2 : semifinal1.dupla1; // Perdedor da semifinal 1\n    const quartoLugar = set1 > set2 ? semifinal2.dupla2 : semifinal2.dupla1; // Perdedor da semifinal 2\n\n    return {\n      primeiro: campeao,\n      segundo: viceCampeao,\n      terceiro: terceiroLugar,\n      quarto: quartoLugar\n    };\n  };\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar as semifinais.');\n      return;\n    }\n\n    // Determinar os finalistas. Assumindo que jogosEliminatoria[0] e [1] são as semifinais\n    const vencedorSemifinal1 = jogosEliminatoria[0].placar.split('-')[0] > jogosEliminatoria[0].placar.split('-')[1] ? jogosEliminatoria[0].dupla1 : jogosEliminatoria[0].dupla2;\n    const vencedorSemifinal2 = jogosEliminatoria[1].placar.split('-')[0] > jogosEliminatoria[1].placar.split('-')[1] ? jogosEliminatoria[1].dupla1 : jogosEliminatoria[1].dupla2;\n\n    // Criar a final\n    const final = [{\n      dupla1: vencedorSemifinal1,\n      dupla2: vencedorSemifinal2,\n      placar: '',\n      submetido: false,\n      jogoIndex: 0 // Aqui estava o erro, você deve ter apenas um jogo na final\n    }];\n    console.log('Estado dos jogos eliminatórios antes de criar a final:', jogosEliminatoria);\n    setJogosEliminatoria(final);\n    setFaseAtual('final');\n    console.log('Estado dos jogos eliminatórios após criar a final:', jogosEliminatoria);\n  };\n\n  // Novamente, após a final, definir o ranking\n  const finalizarTorneio = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('O jogo da final deve ser submetido antes de finalizar o torneio.');\n      return;\n    }\n    const ranking = determinarVencedores();\n    setResultados(prev => ({\n      ...prev,\n      ranking\n    }));\n    setFaseAtual('finalizado');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          style: {\n            textTransform: 'uppercase'\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Adicionar Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: startTournament,\n            disabled: duplas.length < 3,\n            children: \"Come\\xE7ar Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas (Teste)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : faseAtual === 'final' ? 'Final' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onEncerrarFase: encerrarFaseGrupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), (faseAtual === 'eliminatória' || faseAtual === 'final') && /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          fase: faseAtual === 'final' ? 'Final' : 'Fase Eliminatória',\n          jogos: jogosEliminatoria,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onUpdateJogos: setJogosEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseEliminatoria,\n          disabled: jogosEliminatoria.some(jogo => !jogo.submetido),\n          children: \"Encerrar Semifinais\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: finalizarTorneio,\n          disabled: jogosEliminatoria.some(jogo => !jogo.submetido),\n          children: \"Finalizar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        style: {\n          display: faseAtual === 'finalizado' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Resultado Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: resultados.ranking && Object.entries(resultados.ranking).map(([posicao, dupla]) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posicao === 'primeiro' ? 'Primeiro Lugar' : posicao === 'segundo' ? 'Segundo Lugar' : posicao === 'terceiro' ? 'Terceiro Lugar' : posicao === 'quarto' ? 'Quarto Lugar' : '', \": \", dupla.join(' e ')]\n          }, posicao, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5IuBVLN/qiVbYyoU6oVVNSInAlY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","dividirGrupos","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","resultados","setResultados","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","encerrarFaseGrupos","console","log","grupo","jogos","jogo","submetido","classificados","forEach","classificadosGrupo","push","slice","join","iniciarFaseEliminatoria","dupla1","dupla2","placar","jogoIndex","add8Duplas","newDuplas","atualizarEstatisticas","set1","set2","split","map","Number","vencedor","prevResultados","_prevResultados$dupla","_prevResultados$dupla2","_prevResultados$dupla3","_prevResultados$dupla4","_prevResultados$dupla5","_prevResultados$dupla6","_prevResultados$dupla7","_prevResultados$dupla8","_prevResultados$dupla9","_prevResultados$dupla10","_prevResultados$dupla11","_prevResultados$dupla12","vitórias","derrotas","setsVencidos","setsPerdidos","determinarVencedores","error","final","campeao","viceCampeao","semifinal1","semifinal2","terceiroLugar","quartoLugar","primeiro","segundo","terceiro","quarto","encerrarFaseEliminatoria","vencedorSemifinal1","vencedorSemifinal2","finalizarTorneio","ranking","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","placeholder","style","textTransform","required","onAddDupla","onRemoveDupla","onClick","disabled","display","onAtualizarEstatisticas","onEncerrarFase","onUpdateGroups","fase","onUpdateJogos","Object","entries","posicao","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport './App.css';\nimport { \n  dividirGrupos, \n  classificarDuplasPorDesempate \n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [resultados, setResultados] = useState({});  // Adicionando o estado resultados\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    console.log('Estado dos grupos antes de verificar:', grupos); \n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n\n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado'); // Ou qualquer outro estado final\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  // Função para iniciar a fase eliminatória\n  const iniciarFaseEliminatoria = (classificados) => {\n    let jogosEliminatoria = [];\n    \n    // Assumindo que classificados está corretamente ordenado com 4 duplas (2 de cada grupo)\n    jogosEliminatoria.push({\n      dupla1: classificados[0],  // 1º Grupo 1\n      dupla2: classificados[3],  // 2º Grupo 2\n      placar: '',\n      submetido: false,\n      jogoIndex: 0\n    });\n    jogosEliminatoria.push({\n      dupla1: classificados[2],  // 1º Grupo 2\n      dupla2: classificados[1],  // 2º Grupo 1\n      placar: '',\n      submetido: false,\n      jogoIndex: 1\n    });\n  \n    setJogosEliminatoria(jogosEliminatoria);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para adicionar 8 duplas automaticamente\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const atualizarEstatisticas = (jogo) => {\n    const { dupla1, dupla2, placar } = jogo;\n    const [set1, set2] = placar.split('-').map(Number);\n    const vencedor = set1 > set2 ? dupla1 : dupla2;\n\n    setResultados(prevResultados => {\n      return {\n        ...prevResultados,\n        [dupla1.join(',')]: {\n          ...(prevResultados[dupla1.join(',')] || { vitórias: 0, derrotas: 0, setsVencidos: 0, setsPerdidos: 0 }),\n          vitórias: vencedor === dupla1 ? prevResultados[dupla1.join(',')]?.vitórias + 1 || 1 : prevResultados[dupla1.join(',')]?.vitórias || 0,\n          derrotas: vencedor === dupla2 ? prevResultados[dupla1.join(',')]?.derrotas + 1 || 1 : prevResultados[dupla1.join(',')]?.derrotas || 0,\n          setsVencidos: prevResultados[dupla1.join(',')]?.setsVencidos + (vencedor === dupla1 ? set1 : set2) || (vencedor === dupla1 ? set1 : set2),\n          setsPerdidos: prevResultados[dupla1.join(',')]?.setsPerdidos + (vencedor === dupla1 ? set2 : set1) || (vencedor === dupla1 ? set2 : set1)\n        },\n        [dupla2.join(',')]: {\n          ...(prevResultados[dupla2.join(',')] || { vitórias: 0, derrotas: 0, setsVencidos: 0, setsPerdidos: 0 }),\n          vitórias: vencedor === dupla2 ? prevResultados[dupla2.join(',')]?.vitórias + 1 || 1 : prevResultados[dupla2.join(',')]?.vitórias || 0,\n          derrotas: vencedor === dupla1 ? prevResultados[dupla2.join(',')]?.derrotas + 1 || 1 : prevResultados[dupla2.join(',')]?.derrotas || 0,\n          setsVencidos: prevResultados[dupla2.join(',')]?.setsVencidos + (vencedor === dupla2 ? set1 : set2) || (vencedor === dupla2 ? set1 : set2),\n          setsPerdidos: prevResultados[dupla2.join(',')]?.setsPerdidos + (vencedor === dupla2 ? set2 : set1) || (vencedor === dupla2 ? set2 : set1)\n        }\n      };\n    });\n  };\n\n  // Função para determinar Vencedores\n  const determinarVencedores = () => {\n    // Supondo que jogosEliminatoria agora contém apenas a final\n    if (jogosEliminatoria.length !== 1) {\n      console.error(\"Erro: Esperava-se um jogo final.\");\n      return;\n    }\n  \n    const final = jogosEliminatoria[0];\n    const [set1, set2] = final.placar.split('-').map(Number);\n    const campeao = set1 > set2 ? final.dupla1 : final.dupla2;\n    const viceCampeao = campeao === final.dupla1 ? final.dupla2 : final.dupla1;\n  \n    // Para terceiro e quarto lugar, você pode decidir como quer fazer isso (desempate, jogo de terceiro lugar, etc.)\n    // Aqui, assumimos que os perdedores das semifinais são terceiro e quarto lugar, mas isso depende do regulamento\n    const semifinal1 = jogosEliminatoria[1]; // Assumindo que essas foram as semifinais\n    const semifinal2 = jogosEliminatoria[0]; // antes da final ser definida\n    const terceiroLugar = set1 > set2 ? semifinal1.dupla2 : semifinal1.dupla1; // Perdedor da semifinal 1\n    const quartoLugar = set1 > set2 ? semifinal2.dupla2 : semifinal2.dupla1; // Perdedor da semifinal 2\n  \n    return {\n      primeiro: campeao,\n      segundo: viceCampeao,\n      terceiro: terceiroLugar,\n      quarto: quartoLugar\n    };\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar as semifinais.');\n      return;\n    }\n    \n    // Determinar os finalistas. Assumindo que jogosEliminatoria[0] e [1] são as semifinais\n    const vencedorSemifinal1 = jogosEliminatoria[0].placar.split('-')[0] > jogosEliminatoria[0].placar.split('-')[1] ? jogosEliminatoria[0].dupla1 : jogosEliminatoria[0].dupla2;\n    const vencedorSemifinal2 = jogosEliminatoria[1].placar.split('-')[0] > jogosEliminatoria[1].placar.split('-')[1] ? jogosEliminatoria[1].dupla1 : jogosEliminatoria[1].dupla2;\n  \n    // Criar a final\n    const final = [{\n      dupla1: vencedorSemifinal1,\n      dupla2: vencedorSemifinal2,\n      placar: '',\n      submetido: false,\n      jogoIndex: 0 // Aqui estava o erro, você deve ter apenas um jogo na final\n    }];\n\n    console.log('Estado dos jogos eliminatórios antes de criar a final:', jogosEliminatoria);\n  setJogosEliminatoria(final);\n  setFaseAtual('final');\n  console.log('Estado dos jogos eliminatórios após criar a final:', jogosEliminatoria);\n};\n  \n  // Novamente, após a final, definir o ranking\n  const finalizarTorneio = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('O jogo da final deve ser submetido antes de finalizar o torneio.');\n      return;\n    }\n    const ranking = determinarVencedores();\n    setResultados(prev => ({...prev, ranking}));\n    setFaseAtual('finalizado');\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n\n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" style={{ textTransform: 'uppercase' }} required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n\n        <section className=\"section\">\n          <h2>Adicionar Duplas</h2>\n          {faseAtual === 'duplas' && \n            <>\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n              <Button \n                onClick={startTournament} \n                disabled={duplas.length < 3}>\n                Começar Torneio\n              </Button>\n              <Button onClick={add8Duplas}>Adicionar 8 Duplas (Teste)</Button>\n            </>\n          }\n        </section>\n\n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">{faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : faseAtual === 'final' ? 'Final' : 'Torneio Finalizado'}</h3>\n          {faseAtual === 'grupos' && \n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onEncerrarFase={encerrarFaseGrupos} onUpdateGroups={setGrupos} />\n          }\n          {(faseAtual === 'eliminatória' || faseAtual === 'final') && \n            <FaseEliminatoria fase={faseAtual === 'final' ? 'Final' : 'Fase Eliminatória'} jogos={jogosEliminatoria} onAtualizarEstatisticas={atualizarEstatisticas} onUpdateJogos={setJogosEliminatoria} />\n          }\n          {faseAtual === 'grupos' && \n            <Button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</Button>\n          }\n          {faseAtual === 'eliminatória' && \n            <Button \n              onClick={encerrarFaseEliminatoria} \n              disabled={jogosEliminatoria.some(jogo => !jogo.submetido)}\n            >\n              Encerrar Semifinais\n            </Button>\n          }\n          {faseAtual === 'final' && \n            <Button \n              onClick={finalizarTorneio} \n              disabled={jogosEliminatoria.some(jogo => !jogo.submetido)}\n            >\n              Finalizar Torneio\n            </Button>\n          }\n        </section>\n\n        {/* Adicionando a seção de resultados finais */}\n        <section className=\"section\" style={{ display: faseAtual === 'finalizado' ? 'block' : 'none' }}>\n          <h2>Resultado Final</h2>\n          <ul>\n            {resultados.ranking && Object.entries(resultados.ranking).map(([posicao, dupla]) => (\n              <li key={posicao}>\n                {posicao === 'primeiro' ? 'Primeiro Lugar' : \n                 posicao === 'segundo' ? 'Segundo Lugar' : \n                 posicao === 'terceiro' ? 'Terceiro Lugar' : \n                 posicao === 'quarto' ? 'Quarto Lugar' : ''}: {dupla.join(' e ')}\n              </li>\n            ))}\n          </ul>\n        </section>\n      </main>\n\n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}