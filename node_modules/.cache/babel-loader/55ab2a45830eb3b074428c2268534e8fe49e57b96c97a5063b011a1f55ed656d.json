{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils'; // Mantemos apenas o necessário\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]); // Novo estado para BYEs\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    // Gera os jogos apenas uma vez\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n\n      // Filtrar jogos com validação robusta\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        return classificadosPorGrupo.some(d => d.join('') === chave1) || classificadosPorGrupo.some(d => d.join('') === chave2);\n      });\n\n      // Log para depuração\n      console.log('Classificados por grupo:', classificadosPorGrupo);\n      console.log('Jogos classificados:', jogosClassificados);\n      const rankingGeral = classificarDuplasPorDesempate(classificadosPorGrupo, jogosClassificados);\n      const duplasByeLocal = rankingGeral.slice(0, 2); // 2 melhores com BYE\n      const duplasQuartas = rankingGeral.slice(2, 6); // 4 para quartas\n\n      const jogosQuartas = [{\n        dupla1: duplasQuartas[0],\n        dupla2: duplasQuartas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Quartas de Final',\n        rodada: 1\n      }, {\n        dupla1: duplasQuartas[2],\n        dupla2: duplasQuartas[3],\n        placar: '',\n        submetido: false,\n        fase: 'Quartas de Final',\n        rodada: 1\n      }];\n      setJogosEliminatoria(jogosQuartas);\n      setDuplasBye(duplasByeLocal);\n      setFaseAtual('eliminatória');\n    }\n  };\n  const renderizarHistoricoEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      if (jogosDaRodada.length === 0) return null;\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), jogosDaRodada.map((jogo, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jogo\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [jogo.dupla1.join(' & '), \" vs \", jogo.dupla2.join(' & ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Placar: \", jogo.placar, \" \", jogo.submetido ? \"(Submetido)\" : \"(Não submetido)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this))]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n      const rodadaAtual = Math.max(...updatedJogos.map(j => j.rodada));\n      const jogosRodadaAtual = updatedJogos.filter(j => j.rodada === rodadaAtual);\n      if (jogosRodadaAtual.every(j => j.submetido) && jogosRodadaAtual.length > 1 && jogosRodadaAtual.some(j => j.fase !== 'Semifinal')) {\n        const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n        return [...updatedJogos, ...novaRodada];\n      }\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    setJogosEliminatoria(prev => [...prev, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final')) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        return;\n      }\n      const semifinalMatches = [{\n        dupla1: duplasBye[0],\n        dupla2: vencedoresQuartas[0],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: duplasBye[1],\n        dupla2: vencedoresQuartas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n      setFaseAtual('eliminatória'); // Mantém na eliminatória até a próxima etapa\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev, ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: add27Duplas,\n    children: \"Adicionar 27 Duplas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"iniciar-torneio\",\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), renderizarHistoricoEliminatoria(jogosEliminatoria.filter(jogo => jogo.submetido && jogo.rodada < Math.max(...jogosEliminatoria.map(j => j.rodada)))), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 42\n        }, this), jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' & ')]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7IWgc7YyDANS9tq8w+goJidxMHE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","duplasBye","setDuplasBye","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","gruposCriados","gruposComJogos","map","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","rankingGrupo1","rankingGrupo2","semifinalMatches","dupla1","dupla2","placar","fase","rodada","classificadosPorGrupo","slice","flat","jogosClassificados","Array","isArray","console","error","chave1","chave2","log","rankingGeral","duplasByeLocal","duplasQuartas","jogosQuartas","renderizarHistoricoEliminatoria","rodadas","Set","j","a","b","_jogosDaRodada$","jogosDaRodada","className","children","fileName","_jsxFileName","lineNumber","columnNumber","atualizarPlacarNaEliminatoria","prevJogos","updatedJogos","rodadaAtual","max","jogosRodadaAtual","every","novaRodada","iniciarFinal","semifinalGames","finalistas","set1","set2","split","Number","perdedores","prev","atualizarPlacarNaFinal","encerrarFaseEliminatoria","vencedoresQuartas","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","add8Duplas","newDuplas","push","add27Duplas","onClick","onAddDupla","onRemoveDupla","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils'; // Mantemos apenas o necessário\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]); // Novo estado para BYEs\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    // Gera os jogos apenas uma vez\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n  \n      // Filtrar jogos com validação robusta\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        return classificadosPorGrupo.some(d => d.join('') === chave1) || \n               classificadosPorGrupo.some(d => d.join('') === chave2);\n      });\n  \n      // Log para depuração\n      console.log('Classificados por grupo:', classificadosPorGrupo);\n      console.log('Jogos classificados:', jogosClassificados);\n  \n      const rankingGeral = classificarDuplasPorDesempate(classificadosPorGrupo, jogosClassificados);\n  \n      const duplasByeLocal = rankingGeral.slice(0, 2); // 2 melhores com BYE\n      const duplasQuartas = rankingGeral.slice(2, 6); // 4 para quartas\n  \n      const jogosQuartas = [\n        { dupla1: duplasQuartas[0], dupla2: duplasQuartas[1], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 },\n        { dupla1: duplasQuartas[2], dupla2: duplasQuartas[3], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 }\n      ];\n  \n      setJogosEliminatoria(jogosQuartas);\n      setDuplasBye(duplasByeLocal);\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const renderizarHistoricoEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      if (jogosDaRodada.length === 0) return null;\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          {jogosDaRodada.map((jogo, index) => (\n            <div key={index} className=\"jogo\">\n              <p>{jogo.dupla1.join(' & ')} vs {jogo.dupla2.join(' & ')}</p>\n              <p>Placar: {jogo.placar} {jogo.submetido ? \"(Submetido)\" : \"(Não submetido)\"}</p>\n            </div>\n          ))}\n        </div>\n      );\n    });\n  };\n\nconst atualizarPlacarNaEliminatoria = (jogo, placar) => {\n  if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n    setJogosEliminatoria(prevJogos =>\n      prevJogos.map(j =>\n        j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n      )\n    );\n    return;\n  }\n  setJogosEliminatoria(prevJogos => {\n    const updatedJogos = prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    );\n\n    const rodadaAtual = Math.max(...updatedJogos.map(j => j.rodada));\n    const jogosRodadaAtual = updatedJogos.filter(j => j.rodada === rodadaAtual);\n\n    if (jogosRodadaAtual.every(j => j.submetido) && jogosRodadaAtual.length > 1 && jogosRodadaAtual.some(j => j.fase !== 'Semifinal')) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      return [...updatedJogos, ...novaRodada];\n    }\n    return updatedJogos;\n  });\n};\n\nconst iniciarFinal = (jogos) => {\n  const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n  if (semifinalGames.length !== 2) {\n    console.error('Erro: Esperados 2 jogos de semifinal.');\n    return;\n  }\n\n  const finalistas = semifinalGames.map(jogo => {\n    const [set1, set2] = jogo.placar.split('-').map(Number);\n    return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n  });\n\n  const perdedores = semifinalGames.map(jogo => {\n    const [set1, set2] = jogo.placar.split('-').map(Number);\n    return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n  });\n\n  setJogosEliminatoria(prev => [\n    ...prev,\n    {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n    },\n    {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }\n  ]);\n  setFinalConfigurada(true);\n  setTerceiroLugarConfigurado(true);\n};\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n  \n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n  \n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final')) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n  \n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        return;\n      }\n  \n      const semifinalMatches = [\n        { dupla1: duplasBye[0], dupla2: vencedoresQuartas[0], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n        { dupla1: duplasBye[1], dupla2: vencedoresQuartas[1], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n      ];\n      setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n      setFaseAtual('eliminatória'); // Mantém na eliminatória até a próxima etapa\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev, ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button className=\"iniciar-torneio\" onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n          </>\n        )}\n\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            {renderizarHistoricoEliminatoria(jogosEliminatoria.filter(jogo => jogo.submetido && jogo.rodada < Math.max(...jogosEliminatoria.map(j => j.rodada))))}\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n          </>\n        )}\n\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(\n                jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado && <p>A disputa pelo 3º lugar está configurada!</p>}\n\n            {/* Mostrar botão \"Encerrar Campeonato\" somente quando todos os jogos finais forem submetidos */}\n            {jogosEliminatoria\n              .filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')\n              .every(jogo => jogo.submetido) && (\n                <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n              )}\n          </>\n        )}\n\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <ul>\n              {ranking.map((posição, index) => (\n                <li key={index}>\n                  {posição.lugar}º Lugar: {posição.dupla.join(' & ')}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n\n\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}