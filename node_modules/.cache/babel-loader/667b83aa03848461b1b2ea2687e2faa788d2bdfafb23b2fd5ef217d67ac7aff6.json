{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils'; // Mantemos apenas o necessário\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({}); // Novo estado\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    // Gera os jogos apenas uma vez\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1]));\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        const dupla1Presente = duplasUnicas.some(d => d.join('') === dupla1Str);\n        const dupla2Presente = duplasUnicas.some(d => d.join('') === dupla2Str);\n        if (!dupla1Presente || !dupla2Presente) {\n          console.log('Jogo excluído devido a duplas não classificadas:', {\n            dupla1Str,\n            dupla2Str\n          });\n        }\n        return dupla1Presente && dupla2Presente;\n      });\n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n\n      // Atualizar histórico\n      const resultados = duplasUnicas.reduce((acc, dupla) => {\n        acc[dupla.join('')] = {\n          dupla,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          setsVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        return acc;\n      }, {});\n      jogosClassificados.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (resultados[chave1] && resultados[chave2]) {\n          resultados[chave1].jogos += 1;\n          resultados[chave2].jogos += 1;\n          if (g1 > g2) {\n            resultados[chave1].pontos += 5;\n            resultados[chave1].jogosVencidos += 1;\n            resultados[chave1].setsVencidos += 1;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n            resultados[chave2].pontos += 2;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n          } else {\n            resultados[chave2].pontos += 5;\n            resultados[chave2].jogosVencidos += 1;\n            resultados[chave2].setsVencidos += 1;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n            resultados[chave1].pontos += 2;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n          }\n        }\n      });\n      setHistoricoDuplas(resultados);\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      const duplasByeLocal = rankingGeral.slice(0, 2);\n      const duplasQuartas = rankingGeral.slice(2, 6);\n      if (duplasQuartas.length < 4) {\n        console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n        alert('Erro ao configurar as quartas de final. Verifique os dados.');\n        return;\n      }\n      const jogosQuartas = [{\n        dupla1: duplasQuartas[0],\n        dupla2: duplasQuartas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Quartas de Final',\n        rodada: 1\n      }, {\n        dupla1: duplasQuartas[2],\n        dupla2: duplasQuartas[3],\n        placar: '',\n        submetido: false,\n        fase: 'Quartas de Final',\n        rodada: 1\n      }];\n      setJogosEliminatoria(jogosQuartas);\n      setDuplasBye(duplasByeLocal);\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n\n      // Atualizar histórico\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          setsVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          setsVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].setsVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].setsVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n      const rodadaAtual = Math.max(...updatedJogos.map(j => j.rodada));\n      const jogosRodadaAtual = updatedJogos.filter(j => j.rodada === rodadaAtual);\n      if (jogosRodadaAtual.every(j => j.submetido) && jogosRodadaAtual.length > 1 && jogosRodadaAtual.some(j => j.fase !== 'Semifinal')) {\n        const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n        return [...updatedJogos, ...novaRodada];\n      }\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    setJogosEliminatoria(prev => [...prev, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final')) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas. Usando histórico como fallback.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        // Fallback usando historicoDuplas\n        const rankingHistorico = Object.values(historicoDuplas).sort((a, b) => b.pontos - a.pontos || b.gamesVencidos - b.gamesPerdidos).map(h => h.dupla);\n        const duplasByeFallback = rankingHistorico.slice(0, 2);\n        const semifinalMatches = [{\n          dupla1: duplasByeFallback[0],\n          dupla2: vencedoresQuartas[0],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1\n        }, {\n          dupla1: duplasByeFallback[1],\n          dupla2: vencedoresQuartas[1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1\n        }];\n        setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n        setDuplasBye(duplasByeFallback);\n      } else {\n        const semifinalMatches = [{\n          dupla1: duplasBye[0],\n          dupla2: vencedoresQuartas[0],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1\n        }, {\n          dupla1: duplasBye[1],\n          dupla2: vencedoresQuartas[1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1\n        }];\n        setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n      }\n      console.log('Semifinal Matches criados:', jogosEliminatoria);\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev, ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const chave = dupla.join('');\n            const hist = historicoDuplas[chave] || {\n              jogos: 0,\n              jogosVencidos: 0,\n              setsVencidos: 0,\n              gamesVencidos: 0,\n              gamesPerdidos: 0\n            };\n            const classificado = index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [hist.jogosVencidos, \"/\", hist.jogos - hist.jogosVencidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [hist.setsVencidos, \"/\", hist.jogos - hist.setsVencidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [hist.gamesVencidos, \"/\", hist.gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const dataHora = `DOM, 16FEV - ${12 + Math.floor(idx / 3)}:00`;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? jogo.placar.split('-')[0] > jogo.placar.split('-')[1] ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 436,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 437,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 439,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: add27Duplas,\n    children: \"Adicionar 27 Duplas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 468,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"iniciar-torneio\",\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add27Duplas,\n          children: \"Adicionar 27 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this), grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 42\n        }, this), jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [posição.lugar, \"\\xBA Lugar\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: posição.dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 472,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aDP/tP0w5cxhlJZ/iUv1MmqnOMo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","duplasBye","setDuplasBye","historicoDuplas","setHistoricoDuplas","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","gruposCriados","gruposComJogos","map","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","rankingGrupo1","rankingGrupo2","semifinalMatches","dupla1","dupla2","placar","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","Array","isArray","console","error","dupla1Str","dupla2Str","dupla1Presente","dupla2Presente","log","resultados","reduce","acc","pontos","jogosVencidos","setsVencidos","gamesVencidos","gamesPerdidos","forEach","g1","g2","split","Number","chave1","chave2","rankingGeral","duplasByeLocal","duplasQuartas","jogosQuartas","atualizarPlacarNaEliminatoria","prevJogos","j","updatedJogos","prev","novoHistorico","rodadaAtual","max","jogosRodadaAtual","every","novaRodada","iniciarFinal","semifinalGames","finalistas","set1","set2","perdedores","atualizarPlacarNaFinal","encerrarFaseEliminatoria","vencedoresQuartas","rankingHistorico","Object","values","a","b","h","duplasByeFallback","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","renderClassificacaoGrupo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","chave","hist","classificado","idx","vencedor","dataHora","floor","renderizarFaseEliminatoria","rodadas","Set","_jogosDaRodada$","jogosDaRodada","add8Duplas","newDuplas","push","add27Duplas","onClick","onAddDupla","onRemoveDupla","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils'; // Mantemos apenas o necessário\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({}); // Novo estado\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    // Gera os jogos apenas uma vez\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n  \n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) =>\n        index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1])\n      );\n  \n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        const dupla1Presente = duplasUnicas.some(d => d.join('') === dupla1Str);\n        const dupla2Presente = duplasUnicas.some(d => d.join('') === dupla2Str);\n        if (!dupla1Presente || !dupla2Presente) {\n          console.log('Jogo excluído devido a duplas não classificadas:', { dupla1Str, dupla2Str });\n        }\n        return dupla1Presente && dupla2Presente;\n      });\n  \n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n  \n      // Atualizar histórico\n      const resultados = duplasUnicas.reduce((acc, dupla) => {\n        acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        return acc;\n      }, {});\n      jogosClassificados.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (resultados[chave1] && resultados[chave2]) {\n          resultados[chave1].jogos += 1;\n          resultados[chave2].jogos += 1;\n          if (g1 > g2) {\n            resultados[chave1].pontos += 5;\n            resultados[chave1].jogosVencidos += 1;\n            resultados[chave1].setsVencidos += 1;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n            resultados[chave2].pontos += 2;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n          } else {\n            resultados[chave2].pontos += 5;\n            resultados[chave2].jogosVencidos += 1;\n            resultados[chave2].setsVencidos += 1;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n            resultados[chave1].pontos += 2;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n          }\n        }\n      });\n      setHistoricoDuplas(resultados);\n  \n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      const duplasByeLocal = rankingGeral.slice(0, 2);\n      const duplasQuartas = rankingGeral.slice(2, 6);\n  \n      if (duplasQuartas.length < 4) {\n        console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n        alert('Erro ao configurar as quartas de final. Verifique os dados.');\n        return;\n      }\n  \n      const jogosQuartas = [\n        { dupla1: duplasQuartas[0], dupla2: duplasQuartas[1], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 },\n        { dupla1: duplasQuartas[2], dupla2: duplasQuartas[3], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 }\n      ];\n  \n      setJogosEliminatoria(jogosQuartas);\n      setDuplasBye(duplasByeLocal);\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos =>\n        prevJogos.map(j =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        )\n      );\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n\n      // Atualizar histórico\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].setsVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].setsVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n\n      const rodadaAtual = Math.max(...updatedJogos.map(j => j.rodada));\n      const jogosRodadaAtual = updatedJogos.filter(j => j.rodada === rodadaAtual);\n\n      if (jogosRodadaAtual.every(j => j.submetido) && jogosRodadaAtual.length > 1 && jogosRodadaAtual.some(j => j.fase !== 'Semifinal')) {\n        const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n        return [...updatedJogos, ...novaRodada];\n      }\n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n\n    setJogosEliminatoria(prev => [\n      ...prev,\n      {\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n      },\n      {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1\n      }\n    ]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n  \n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n  \n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n  \n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final')) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n  \n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas. Usando histórico como fallback.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        // Fallback usando historicoDuplas\n        const rankingHistorico = Object.values(historicoDuplas)\n          .sort((a, b) => b.pontos - a.pontos || b.gamesVencidos - b.gamesPerdidos)\n          .map(h => h.dupla);\n        const duplasByeFallback = rankingHistorico.slice(0, 2);\n        const semifinalMatches = [\n          { dupla1: duplasByeFallback[0], dupla2: vencedoresQuartas[0], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n          { dupla1: duplasByeFallback[1], dupla2: vencedoresQuartas[1], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n        ];\n        setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n        setDuplasBye(duplasByeFallback);\n      } else {\n        const semifinalMatches = [\n          { dupla1: duplasBye[0], dupla2: vencedoresQuartas[0], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n          { dupla1: duplasBye[1], dupla2: vencedoresQuartas[1], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n        ];\n        setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n      }\n      console.log('Semifinal Matches criados:', jogosEliminatoria);\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev, ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n    setFaseAtual('finalizado');\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const chave = dupla.join('');\n              const hist = historicoDuplas[chave] || { jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n              const classificado = index < 2 ? '✓' : '';\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{hist.jogosVencidos}/{hist.jogos - hist.jogosVencidos}</td>\n                  <td>{hist.setsVencidos}/{hist.jogos - hist.setsVencidos}</td>\n                  <td>{hist.gamesVencidos}/{hist.gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar ? (g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate') : 'A definir';\n              const dataHora = `DOM, 16FEV - ${12 + Math.floor(idx / 3)}:00`;\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor = jogo.placar && jogo.submetido\n                  ? (jogo.placar.split('-')[0] > jogo.placar.split('-')[1] ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & '))\n                  : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button className=\"iniciar-torneio\" onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n            <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n          </>\n        )}\n\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {grupos.map(grupo => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria)}\n            </div>\n          </>\n        )}\n\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado && <p>A disputa pelo 3º lugar está configurada!</p>}\n            {jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))}\n            </div>\n          </>\n        )}\n\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>JOGADORES</th>\n                </tr>\n              </thead>\n              <tbody>\n                {ranking.map((posição, index) => (\n                  <tr key={index}>\n                    <td>{posição.lugar}º Lugar</td>\n                    <td>{posição.dupla.join(' & ')}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n      </main>\n    </div>\n  );\n\n\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}