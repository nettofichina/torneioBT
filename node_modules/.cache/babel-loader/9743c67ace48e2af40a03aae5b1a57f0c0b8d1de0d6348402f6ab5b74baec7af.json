{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseDeGrupos.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseDeGrupos = ({\n  grupos,\n  onAtualizarEstatisticas\n}) => {\n  _s();\n  const [gruposState, setGruposState] = useState(grupos);\n  const handleSubmitScore = (placar, jogoIndex, grupoIndex) => {\n    setGruposState(prevGrupos => prevGrupos.map(grupo => grupo.id === grupoIndex ? {\n      ...grupo,\n      jogos: grupo.jogos.map(jogo => jogo.jogoIndex === jogoIndex ? {\n        ...jogo,\n        placar: placar,\n        submetido: true\n      } : jogo)\n    } : grupo));\n    // Aqui você chama a função de atualização de estatísticas\n    onAtualizarEstatisticas({\n      ...gruposState.find(g => g.id === grupoIndex).jogos.find(j => j.jogoIndex === jogoIndex),\n      placar\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Fase de Grupos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), gruposState.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), grupo.jogos.map(jogo => /*#__PURE__*/_jsxDEV(Jogo, {\n        jogo: jogo,\n        onSubmitScore: placar => handleSubmitScore(placar, jogo.jogoIndex, grupo.id)\n      }, jogo.jogoIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this))]\n    }, grupo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(FaseDeGrupos, \"8s+ydJu3aanXXJscLK+jVtIFZs4=\");\n_c = FaseDeGrupos;\nexport default FaseDeGrupos;\nvar _c;\n$RefreshReg$(_c, \"FaseDeGrupos\");","map":{"version":3,"names":["React","useState","Jogo","jsxDEV","_jsxDEV","FaseDeGrupos","grupos","onAtualizarEstatisticas","_s","gruposState","setGruposState","handleSubmitScore","placar","jogoIndex","grupoIndex","prevGrupos","map","grupo","id","jogos","jogo","submetido","find","g","j","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmitScore","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseDeGrupos.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseDeGrupos = ({ grupos, onAtualizarEstatisticas }) => {\r\n  const [gruposState, setGruposState] = useState(grupos);\r\n\r\n  const handleSubmitScore = (placar, jogoIndex, grupoIndex) => {\r\n    setGruposState(prevGrupos => prevGrupos.map(grupo => \r\n      grupo.id === grupoIndex ? {\r\n        ...grupo,\r\n        jogos: grupo.jogos.map(jogo => \r\n          jogo.jogoIndex === jogoIndex ? \r\n          {...jogo, placar: placar, submetido: true} : jogo\r\n        )\r\n      } : grupo\r\n    ));\r\n    // Aqui você chama a função de atualização de estatísticas\r\n    onAtualizarEstatisticas({...gruposState.find(g => g.id === grupoIndex).jogos.find(j => j.jogoIndex === jogoIndex), placar});\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Fase de Grupos</h2>\r\n      {gruposState.map(grupo => (\r\n        <div key={grupo.id}>\r\n          <h3>Grupo {grupo.id + 1}</h3>\r\n          {grupo.jogos.map(jogo => (\r\n            <Jogo \r\n              key={jogo.jogoIndex} \r\n              jogo={jogo} \r\n              onSubmitScore={(placar) => handleSubmitScore(placar, jogo.jogoIndex, grupo.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseDeGrupos;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAwB,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAACK,MAAM,CAAC;EAEtD,MAAMK,iBAAiB,GAAGA,CAACC,MAAM,EAAEC,SAAS,EAAEC,UAAU,KAAK;IAC3DJ,cAAc,CAACK,UAAU,IAAIA,UAAU,CAACC,GAAG,CAACC,KAAK,IAC/CA,KAAK,CAACC,EAAE,KAAKJ,UAAU,GAAG;MACxB,GAAGG,KAAK;MACRE,KAAK,EAAEF,KAAK,CAACE,KAAK,CAACH,GAAG,CAACI,IAAI,IACzBA,IAAI,CAACP,SAAS,KAAKA,SAAS,GAC5B;QAAC,GAAGO,IAAI;QAAER,MAAM,EAAEA,MAAM;QAAES,SAAS,EAAE;MAAI,CAAC,GAAGD,IAC/C;IACF,CAAC,GAAGH,KACN,CAAC,CAAC;IACF;IACAV,uBAAuB,CAAC;MAAC,GAAGE,WAAW,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKJ,UAAU,CAAC,CAACK,KAAK,CAACG,IAAI,CAACE,CAAC,IAAIA,CAAC,CAACX,SAAS,KAAKA,SAAS,CAAC;MAAED;IAAM,CAAC,CAAC;EAC7H,CAAC;EAED,oBACER,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBpB,WAAW,CAACO,GAAG,CAACC,KAAK,iBACpBb,OAAA;MAAAqB,QAAA,gBACErB,OAAA;QAAAqB,QAAA,GAAI,QAAM,EAACR,KAAK,CAACC,EAAE,GAAG,CAAC;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC5BZ,KAAK,CAACE,KAAK,CAACH,GAAG,CAACI,IAAI,iBACnBhB,OAAA,CAACF,IAAI;QAEHkB,IAAI,EAAEA,IAAK;QACXU,aAAa,EAAGlB,MAAM,IAAKD,iBAAiB,CAACC,MAAM,EAAEQ,IAAI,CAACP,SAAS,EAAEI,KAAK,CAACC,EAAE;MAAE,GAF1EE,IAAI,CAACP,SAAS;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGpB,CACF,CAAC;IAAA,GARMZ,KAAK,CAACC,EAAE;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASb,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACrB,EAAA,CAlCIH,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAoClB,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}