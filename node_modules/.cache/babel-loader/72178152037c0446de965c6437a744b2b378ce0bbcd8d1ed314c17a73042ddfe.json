{"ast":null,"code":"// src/utils/torneioUtils.js\nexport const classificarDuplas = grupos => {\n  let classificados = [];\n  grupos.forEach(grupo => {\n    // Ordena duplas do grupo com base nos critérios de desempate\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n\n    // Adiciona os 2 melhores de cada grupo à lista de classificados\n    classificados.push(duplasClassificadas[0], duplasClassificadas[1]);\n  });\n  console.log(\"Duplas classificadas para a fase eliminatória:\", classificados);\n  return classificados;\n};\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\n  const jogos = [];\n  for (let i = 0; i < duplas.length; i++) {\n    for (let j = i + 1; j < duplas.length; j++) {\n      jogos.push({\n        dupla1: duplas[i],\n        dupla2: duplas[j],\n        placar: '',\n        submetido: false,\n        grupoId\n      });\n    }\n  }\n  return jogos;\n};\nexport const dividirGrupos = duplas => {\n  let numGrupos = Math.ceil(duplas.length / 3); // 3 é o número mínimo de duplas por grupo\n\n  if (duplas.length <= 5) numGrupos = 1; // Grupo único para até 5 duplas\n  else if (duplas.length <= 8) numGrupos = 2;else if (duplas.length <= 11) numGrupos = 3;else if (duplas.length <= 14) numGrupos = 4;else if (duplas.length <= 17) numGrupos = 5;else if (duplas.length <= 20) numGrupos = 6;\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\n    id: i,\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\n  }));\n  return grupos;\n};\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\n  const resultados = duplas.reduce((acc, dupla) => {\n    acc[dupla.join('')] = {\n      dupla,\n      pontos: 0,\n      saldoGames: 0\n    };\n    return acc;\n  }, {});\n  jogos.forEach(jogo => {\n    if (jogo.placar) {\n      const [games1, games2] = jogo.placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (games1 > games2) {\n        resultados[chave1].pontos += 5;\n        resultados[chave2].pontos += 2; // Pode ajustar essa pontuação se necessário\n      } else {\n        resultados[chave2].pontos += 5;\n        resultados[chave1].pontos += 2;\n      }\n\n      // Adiciona saldo de games para critério de desempate\n      resultados[chave1].saldoGames += games1 - games2;\n      resultados[chave2].saldoGames += games2 - games1;\n    }\n  });\n\n  // Ordena primeiro por pontos, depois por saldo de games\n  return Object.values(resultados).sort((a, b) => b.pontos - a.pontos || b.saldoGames - a.saldoGames).map(r => r.dupla);\n};\nexport const iniciarFaseEliminatoria = classificados => {\n  let totalDuplas = classificados.length;\n  let rodadas = Math.ceil(Math.log2(totalDuplas));\n  // Ajusta o número de duplas para uma potência de 2 (adiciona BYEs se necessário)\n  let proximoMultiplo = Math.pow(2, rodadas);\n  let byes = proximoMultiplo - totalDuplas;\n  let classificadosAjustados = [...classificados];\n  for (let i = 0; i < byes; i++) {\n    classificadosAjustados.push(['BYE', '']);\n  }\n\n  // Define o nome da fase com base na quantidade de rodadas:\n  let faseNome;\n  if (rodadas === 1) {\n    faseNome = 'Final';\n  } else if (rodadas === 2) {\n    faseNome = 'Semifinal';\n  } else if (rodadas === 3) {\n    faseNome = 'Quartas de Final';\n  } else {\n    faseNome = `Rodada 1`;\n  }\n\n  // Gera apenas a primeira rodada:\n  let jogosRodada = [];\n  for (let i = 0; i < classificadosAjustados.length; i += 2) {\n    jogosRodada.push({\n      dupla1: classificadosAjustados[i],\n      dupla2: classificadosAjustados[i + 1],\n      placar: '',\n      submetido: false,\n      fase: faseNome,\n      rodada: 1\n    });\n  }\n  return jogosRodada;\n};\nexport const avancarRodadaEliminatoria = jogosRodadaAtual => {\n  // Calcula os vencedores dos jogos atuais\n  let vencedores = jogosRodadaAtual.map(jogo => {\n    const [score1, score2] = jogo.placar.split('-').map(Number);\n    // Se houver BYE, ou se o placar ainda não foi preenchido, retorne a dupla1 como placeholder\n    if (jogo.dupla2[0] === 'BYE' || isNaN(score1) || isNaN(score2)) {\n      return jogo.dupla1;\n    }\n    return score1 > score2 ? jogo.dupla1 : jogo.dupla2;\n  });\n  let rodadasTotal = Math.ceil(Math.log2(vencedores.length));\n  let novaFaseNome;\n  if (rodadasTotal === 1) {\n    novaFaseNome = 'Final';\n  } else if (rodadasTotal === 2) {\n    novaFaseNome = 'Semifinal';\n  } else if (rodadasTotal === 3) {\n    novaFaseNome = 'Quartas de Final';\n  } else {\n    novaFaseNome = `Rodada ${jogosRodadaAtual[0].rodada + 1}`;\n  }\n\n  // Ajusta para BYEs se necessário\n  let proximoMultiplo = Math.pow(2, Math.ceil(Math.log2(vencedores.length)));\n  let byes = proximoMultiplo - vencedores.length;\n  let vencedoresAjustados = [...vencedores];\n  for (let i = 0; i < byes; i++) {\n    vencedoresAjustados.push(['BYE', '']);\n  }\n\n  // Gera os jogos da nova rodada\n  let novaRodada = [];\n  for (let i = 0; i < vencedoresAjustados.length; i += 2) {\n    novaRodada.push({\n      dupla1: vencedoresAjustados[i],\n      dupla2: vencedoresAjustados[i + 1],\n      placar: '',\n      submetido: false,\n      fase: novaFaseNome,\n      rodada: jogosRodadaAtual[0].rodada + 1\n    });\n  }\n  return novaRodada;\n};","map":{"version":3,"names":["classificarDuplas","grupos","classificados","forEach","grupo","duplasClassificadas","classificarDuplasPorDesempate","duplas","jogos","push","console","log","criarJogosParaGrupo","grupoId","i","length","j","dupla1","dupla2","placar","submetido","dividirGrupos","numGrupos","Math","ceil","Array","fill","map","_","id","slice","resultados","reduce","acc","dupla","join","pontos","saldoGames","jogo","games1","games2","split","Number","chave1","chave2","Object","values","sort","a","b","r","iniciarFaseEliminatoria","totalDuplas","rodadas","log2","proximoMultiplo","pow","byes","classificadosAjustados","faseNome","jogosRodada","fase","rodada","avancarRodadaEliminatoria","jogosRodadaAtual","vencedores","score1","score2","isNaN","rodadasTotal","novaFaseNome","vencedoresAjustados","novaRodada"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["// src/utils/torneioUtils.js\r\nexport const classificarDuplas = (grupos) => {\r\n  let classificados = [];\r\n\r\n  grupos.forEach(grupo => {\r\n    // Ordena duplas do grupo com base nos critérios de desempate\r\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\r\n\r\n    // Adiciona os 2 melhores de cada grupo à lista de classificados\r\n    classificados.push(duplasClassificadas[0], duplasClassificadas[1]);\r\n  });\r\n\r\n  console.log(\"Duplas classificadas para a fase eliminatória:\", classificados);\r\n  return classificados;\r\n};\r\n\r\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\r\n  const jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        grupoId\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const dividirGrupos = (duplas) => {\r\n  let numGrupos = Math.ceil(duplas.length / 3); // 3 é o número mínimo de duplas por grupo\r\n  \r\n  if (duplas.length <= 5) numGrupos = 1; // Grupo único para até 5 duplas\r\n  else if (duplas.length <= 8) numGrupos = 2;\r\n  else if (duplas.length <= 11) numGrupos = 3;\r\n  else if (duplas.length <= 14) numGrupos = 4;\r\n  else if (duplas.length <= 17) numGrupos = 5;\r\n  else if (duplas.length <= 20) numGrupos = 6;\r\n\r\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\r\n    id: i,\r\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\r\n  }));\r\n\r\n  return grupos;\r\n};\r\n\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  const resultados = duplas.reduce((acc, dupla) => {\r\n    acc[dupla.join('')] = { dupla, pontos: 0, saldoGames: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  jogos.forEach(jogo => {\r\n    if (jogo.placar) {\r\n      const [games1, games2] = jogo.placar.split('-').map(Number);\r\n      const chave1 = jogo.dupla1.join('');\r\n      const chave2 = jogo.dupla2.join('');\r\n\r\n      if (games1 > games2) {\r\n        resultados[chave1].pontos += 5;\r\n        resultados[chave2].pontos += 2; // Pode ajustar essa pontuação se necessário\r\n      } else {\r\n        resultados[chave2].pontos += 5;\r\n        resultados[chave1].pontos += 2;\r\n      }\r\n\r\n      // Adiciona saldo de games para critério de desempate\r\n      resultados[chave1].saldoGames += games1 - games2;\r\n      resultados[chave2].saldoGames += games2 - games1;\r\n    }\r\n  });\r\n\r\n  // Ordena primeiro por pontos, depois por saldo de games\r\n  return Object.values(resultados)\r\n    .sort((a, b) => b.pontos - a.pontos || b.saldoGames - a.saldoGames)\r\n    .map(r => r.dupla);\r\n};\r\n\r\n\r\nexport const iniciarFaseEliminatoria = (classificados) => {\r\n  let totalDuplas = classificados.length;\r\n  let rodadas = Math.ceil(Math.log2(totalDuplas));\r\n  // Ajusta o número de duplas para uma potência de 2 (adiciona BYEs se necessário)\r\n  let proximoMultiplo = Math.pow(2, rodadas);\r\n  let byes = proximoMultiplo - totalDuplas;\r\n  let classificadosAjustados = [...classificados];\r\n  for (let i = 0; i < byes; i++) {\r\n    classificadosAjustados.push(['BYE', '']);\r\n  }\r\n\r\n  // Define o nome da fase com base na quantidade de rodadas:\r\n  let faseNome;\r\n  if (rodadas === 1) {\r\n    faseNome = 'Final';\r\n  } else if (rodadas === 2) {\r\n    faseNome = 'Semifinal';\r\n  } else if (rodadas === 3) {\r\n    faseNome = 'Quartas de Final';\r\n  } else {\r\n    faseNome = `Rodada 1`;\r\n  }\r\n\r\n  // Gera apenas a primeira rodada:\r\n  let jogosRodada = [];\r\n  for (let i = 0; i < classificadosAjustados.length; i += 2) {\r\n    jogosRodada.push({\r\n      dupla1: classificadosAjustados[i],\r\n      dupla2: classificadosAjustados[i + 1],\r\n      placar: '',\r\n      submetido: false,\r\n      fase: faseNome,\r\n      rodada: 1\r\n    });\r\n  }\r\n  return jogosRodada;\r\n};\r\n\r\nexport const avancarRodadaEliminatoria = (jogosRodadaAtual) => {\r\n  // Calcula os vencedores dos jogos atuais\r\n  let vencedores = jogosRodadaAtual.map(jogo => {\r\n    const [score1, score2] = jogo.placar.split('-').map(Number);\r\n    // Se houver BYE, ou se o placar ainda não foi preenchido, retorne a dupla1 como placeholder\r\n    if (jogo.dupla2[0] === 'BYE' || isNaN(score1) || isNaN(score2)) {\r\n      return jogo.dupla1;\r\n    }\r\n    return score1 > score2 ? jogo.dupla1 : jogo.dupla2;\r\n  });\r\n\r\n  let rodadasTotal = Math.ceil(Math.log2(vencedores.length));\r\n  let novaFaseNome;\r\n  if (rodadasTotal === 1) {\r\n    novaFaseNome = 'Final';\r\n  } else if (rodadasTotal === 2) {\r\n    novaFaseNome = 'Semifinal';\r\n  } else if (rodadasTotal === 3) {\r\n    novaFaseNome = 'Quartas de Final';\r\n  } else {\r\n    novaFaseNome = `Rodada ${jogosRodadaAtual[0].rodada + 1}`;\r\n  }\r\n\r\n  // Ajusta para BYEs se necessário\r\n  let proximoMultiplo = Math.pow(2, Math.ceil(Math.log2(vencedores.length)));\r\n  let byes = proximoMultiplo - vencedores.length;\r\n  let vencedoresAjustados = [...vencedores];\r\n  for (let i = 0; i < byes; i++) {\r\n    vencedoresAjustados.push(['BYE', '']);\r\n  }\r\n\r\n  // Gera os jogos da nova rodada\r\n  let novaRodada = [];\r\n  for (let i = 0; i < vencedoresAjustados.length; i += 2) {\r\n    novaRodada.push({\r\n      dupla1: vencedoresAjustados[i],\r\n      dupla2: vencedoresAjustados[i + 1],\r\n      placar: '',\r\n      submetido: false,\r\n      fase: novaFaseNome,\r\n      rodada: jogosRodadaAtual[0].rodada + 1\r\n    });\r\n  }\r\n  return novaRodada;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}