{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport { dividirGrupos, classificarDuplasPorDesempate, criarJogosParaGrupo } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n  const [historicoFases, setHistoricoFases] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = classificarDuplasPorDesempate([...duplas], grupos.flatMap(grupo => grupo.jogos), grupos);\n    setHistoricoFases(prevHistorico => [...prevHistorico, {\n      fase: 'Fase de Grupos',\n      resultados: grupos.map(grupo => ({\n        grupoId: grupo.id,\n        jogos: grupo.jogos.map(jogo => ({\n          dupla1: jogo.dupla1,\n          dupla2: jogo.dupla2,\n          placar: jogo.placar,\n          vencedor: jogo.placar.split('-').map(Number)[0] > jogo.placar.split('-').map(Number)[1] ? jogo.dupla1 : jogo.dupla2,\n          diferencaSets: Math.abs(jogo.placar.split('-').map(Number)[0] - jogo.placar.split('-').map(Number)[1])\n        }))\n      })),\n      classificados: classificados\n    }]);\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let currentIndex = 0;\n    if (classificados.length === 4) {\n      // 4 duplas classificadas para as semifinais\n      // Criar as semifinais\n      jogos.push({\n        dupla1: classificados[0],\n        // Primeiro do Grupo 1\n        dupla2: classificados[3],\n        // Segundo do Grupo 2\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 1,\n        fase: 'Semifinal'\n      });\n      jogos.push({\n        dupla1: classificados[2],\n        // Segundo do Grupo 1\n        dupla2: classificados[1],\n        // Primeiro do Grupo 2\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 1,\n        fase: 'Semifinal'\n      });\n\n      // A final será adicionada posteriormente, quando os vencedores forem conhecidos.\n    } else {\n      // Lógica para torneios com mais de 4 classificados (usando BYEs se necessário)\n      let rodadas = Math.ceil(Math.log2(classificados.length));\n      let nextPowerOf2 = Math.pow(2, rodadas);\n      let byes = nextPowerOf2 - classificados.length;\n      for (let i = 0; i < byes; i++) {\n        classificados.push(['BYE', '']);\n      }\n      for (let r = 1; r <= rodadas; r++) {\n        let jogosDaRodada = [];\n        for (let i = 0; i < classificados.length; i += 2) {\n          let dupla1 = classificados[i];\n          let dupla2 = classificados[i + 1] || ['BYE', ''];\n          let jogoConfig = {\n            placar: '',\n            submetido: false,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`\n          };\n          if (dupla1[0] !== 'BYE' && dupla2[0] !== 'BYE') {\n            jogosDaRodada.push({\n              ...jogoConfig,\n              dupla1: dupla1,\n              dupla2: dupla2\n            });\n          } else if (dupla1[0] === 'BYE') {\n            jogosDaRodada.push({\n              ...jogoConfig,\n              dupla1: dupla2,\n              dupla2: ['BYE', ''],\n              placar: 'BYE',\n              submetido: true\n            });\n          } else {\n            jogosDaRodada.push({\n              ...jogoConfig,\n              dupla1: dupla1,\n              dupla2: ['BYE', ''],\n              placar: 'BYE',\n              submetido: true\n            });\n          }\n        }\n        jogos.push(...jogosDaRodada);\n        let novosClassificados = [];\n        for (let i = 0; i < classificados.length; i += 2) {\n          if (classificados[i][0] === 'BYE') {\n            if (i + 1 < classificados.length) {\n              novosClassificados.push(classificados[i + 1]);\n            }\n          } else if (i + 1 < classificados.length && classificados[i + 1][0] === 'BYE') {\n            novosClassificados.push(classificados[i]);\n          } else {\n            novosClassificados.push(classificados[i]); // Aqui pode ser ajustado para definir um vencedor corretamente\n          }\n        }\n        classificados = novosClassificados;\n      }\n    }\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função que cria a final quando ambas as semifinais forem concluídas\n  const verificarCriacaoFinal = jogos => {\n    // Filtra os jogos da semifinal\n    const semifinais = jogos.filter(jogo => jogo.fase === 'Semifinal');\n\n    // Verifica se todas as semifinais foram finalizadas\n    if (semifinais.every(jogo => jogo.submetido)) {\n      // Determina os vencedores (assumindo que a dupla com maior pontuação vence)\n      const vencedores = semifinais.map(jogo => jogo.placar.split('-')[0] > jogo.placar.split('-')[1] ? jogo.dupla1 : jogo.dupla2);\n\n      // Criar a final apenas se ainda não existir\n      const finalJaExiste = jogos.some(jogo => jogo.fase === 'Final');\n      if (!finalJaExiste) {\n        const jogoFinal = {\n          dupla1: vencedores[0],\n          dupla2: vencedores[1],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogos.length,\n          rodada: 2,\n          fase: 'Final'\n        };\n        setJogosEliminatoria([...jogos, jogoFinal]);\n      }\n    }\n  };\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n    if (jogosUltimaRodada.length === 2) {\n      // Semifinais concluídas\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      setJogosEliminatoria(prevJogos => {\n        const newJogos = [...prevJogos];\n        const indiceFinal = newJogos.findIndex(jogo => jogo.fase === 'Final');\n        if (indiceFinal !== -1) {\n          newJogos[indiceFinal] = {\n            ...newJogos[indiceFinal],\n            dupla1: vencedores[0],\n            dupla2: vencedores[1]\n          };\n        }\n        return newJogos;\n      });\n\n      // Adicionar disputa pelo terceiro lugar\n      let perdedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n      setJogosEliminatoria(prevJogos => [...prevJogos, {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        jogoIndex: prevJogos.length,\n        rodada: ultimaRodada + 1,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      setFinalConfigurada(true); // Indica que a final foi configurada\n    } else if (jogosUltimaRodada.length === 1) {\n      const final = jogosUltimaRodada[0];\n      const vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      const perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n      finalizarTorneio(vencedorFinal, perdedorFinal);\n    }\n  };\n  const atualizarEstatisticas = jogoInfo => {\n    // Certifique-se de que historicoJogos é um array antes de tentar adicionar ou verificar elementos\n    if (Array.isArray(historicoJogos)) {\n      if (!historicoJogos.some(historicoJogo => historicoJogo.jogoIndex === jogoInfo.jogoIndex)) {\n        setHistoricoJogos(prevHistorico => [...prevHistorico, {\n          ...jogoInfo\n        }]);\n      } else {\n        console.warn('Jogo já existente no histórico:', jogoInfo.jogoIndex);\n      }\n    } else {\n      console.error('historicoJogos não é um array:', historicoJogos);\n      // Considerar inicializar ou corrigir historicoJogos aqui\n      setHistoricoJogos([{\n        ...jogoInfo\n      }]); // Reinicializar como array com o novo jogo\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo => jogo.jogoIndex === jogoInfo.jogoIndex ? {\n        ...jogo,\n        placar: jogoInfo.placar,\n        submetido: true\n      } : jogo);\n      return updatedJogos;\n    });\n  };\n  const finalizarTorneio = (vencedorFinal, perdedorFinal) => {\n    let disputaTerceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (disputaTerceiroLugar && disputaTerceiroLugar.submetido) {\n      let terceiroLugar = disputaTerceiroLugar.placar.split('-').map(Number)[0] > disputaTerceiroLugar.placar.split('-').map(Number)[1] ? disputaTerceiroLugar.dupla1 : disputaTerceiroLugar.dupla2;\n      let quartoLugar = terceiroLugar === disputaTerceiroLugar.dupla1 ? disputaTerceiroLugar.dupla2 : disputaTerceiroLugar.dupla1;\n      setRanking([{\n        lugar: 1,\n        dupla: vencedorFinal\n      }, {\n        lugar: 2,\n        dupla: perdedorFinal\n      }, {\n        lugar: 3,\n        dupla: terceiroLugar\n      }, {\n        lugar: 4,\n        dupla: quartoLugar\n      }]);\n      setFaseAtual('finalizado');\n    }\n  };\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 1\",\n            ref: jogador1Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 2\",\n            ref: jogador2Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              var _jogador1Ref$current, _jogador2Ref$current;\n              const jogador1 = (_jogador1Ref$current = jogador1Ref.current) === null || _jogador1Ref$current === void 0 ? void 0 : _jogador1Ref$current.value;\n              const jogador2 = (_jogador2Ref$current = jogador2Ref.current) === null || _jogador2Ref$current === void 0 ? void 0 : _jogador2Ref$current.value;\n              if (jogador1 && jogador2) {\n                addDupla([jogador1, jogador2]);\n                if (jogador1Ref.current) jogador1Ref.current.value = '';\n                if (jogador2Ref.current) jogador2Ref.current.value = '';\n              } else {\n                alert('Por favor, insira os nomes dos dois jogadores.');\n              }\n            },\n            children: \"Adicionar Dupla\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: startTournament,\n          disabled: duplas.length < 3,\n          children: \"Come\\xE7ar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n            fase: \"Fase Eliminat\\xF3ria\",\n            jogos: jogosEliminatoria,\n            onAtualizarEstatisticas: atualizarEstatisticas\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 15\n          }, this), jogosEliminatoria.every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: encerrarFaseEliminatoria,\n              children: \"Encerrar Fase Eliminat\\xF3ria\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 19\n            }, this), finalConfigurada && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [jogosEliminatoria.find(jogo => jogo.fase === 'Final') && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Disputa Final: \", jogosEliminatoria.find(jogo => jogo.fase === 'Final').dupla1.join(' e '), \" vs \", jogosEliminatoria.find(jogo => jogo.fase === 'Final').dupla2.join(' e ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 25\n              }, this), jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar') && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Disputa Pelo Terceiro: \", jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar').dupla1.join(' e '), \" vs \", jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar').dupla2.join(' e ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: finalizarTorneio,\n              children: \"Finalizar Torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), historicoJogos.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hist\\xF3rico de Jogos:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 15\n          }, this), grupos.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Grupo \", grupo.id + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: historicoJogos.filter(jogo => jogo.grupo === grupo.id).map((jogo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Rodada \", jogo.fase || 'Desconhecida', \":\", Array.isArray(jogo.dupla1) ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida', \"vs\", Array.isArray(jogo.dupla2) ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida', \"- Placar: \", jogo.placar || 'Não Submetido']\n              }, `${jogo.jogoIndex}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 19\n            }, this)]\n          }, grupo.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this), historicoFases.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hist\\xF3rico de Fases:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 15\n          }, this), historicoFases.map((fase, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: fase.fase\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Classificados:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: fase.classificados.map((dupla, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: dupla.join(' e ')\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 13\n        }, this), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"O torneio foi finalizado. Parab\\xE9ns aos vencedores!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Ranking Final:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [posição.lugar, \"\\xBA Lugar:\", Array.isArray(posição.dupla) ? posição.dupla.join(' e ') : posição.dupla || 'Desconhecido']\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6ZBOHdehfAGsHS3jYRYYcQIDLaQ=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","Input","dividirGrupos","classificarDuplasPorDesempate","criarJogosParaGrupo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","ranking","setRanking","historicoJogos","setHistoricoJogos","historicoFases","setHistoricoFases","finalConfigurada","setFinalConfigurada","console","log","jogador1Ref","jogador2Ref","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","forEach","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","classificados","flatMap","prevHistorico","fase","resultados","map","grupoId","dupla1","dupla2","placar","vencedor","split","Number","diferencaSets","abs","join","iniciarFaseEliminatoria","currentIndex","push","jogoIndex","rodada","rodadas","ceil","log2","nextPowerOf2","pow","byes","r","jogosDaRodada","jogoConfig","novosClassificados","verificarCriacaoFinal","semifinais","every","vencedores","finalJaExiste","jogoFinal","encerrarFaseEliminatoria","ultimaRodada","max","jogosUltimaRodada","set1","set2","prevJogos","newJogos","indiceFinal","findIndex","perdedores","final","vencedorFinal","perdedorFinal","finalizarTorneio","atualizarEstatisticas","jogoInfo","Array","isArray","historicoJogo","warn","error","updatedJogos","disputaTerceiroLugar","find","terceiroLugar","quartoLugar","lugar","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","required","onRemoveDupla","ref","onClick","_jogador1Ref$current","_jogador2Ref$current","jogador1","current","value","jogador2","disabled","style","display","onAtualizarEstatisticas","onUpdateGroups","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport {\n  dividirGrupos,\n  classificarDuplasPorDesempate,\n  criarJogosParaGrupo\n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n  const [historicoFases, setHistoricoFases] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    let classificados = classificarDuplasPorDesempate([...duplas], grupos.flatMap(grupo => grupo.jogos), grupos);\n    setHistoricoFases(prevHistorico => [...prevHistorico, {\n      fase: 'Fase de Grupos',\n      resultados: grupos.map(grupo => ({\n        grupoId: grupo.id,\n        jogos: grupo.jogos.map(jogo => ({\n          dupla1: jogo.dupla1,\n          dupla2: jogo.dupla2,\n          placar: jogo.placar,\n          vencedor: jogo.placar.split('-').map(Number)[0] > jogo.placar.split('-').map(Number)[1] ? jogo.dupla1 : jogo.dupla2,\n          diferencaSets: Math.abs(jogo.placar.split('-').map(Number)[0] - jogo.placar.split('-').map(Number)[1])\n        }))\n      })),\n      classificados: classificados\n    }]);\n\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let currentIndex = 0;\n  \n    if (classificados.length === 4) { // 4 duplas classificadas para as semifinais\n      // Criar as semifinais\n      jogos.push({\n        dupla1: classificados[0], // Primeiro do Grupo 1\n        dupla2: classificados[3], // Segundo do Grupo 2\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 1,\n        fase: 'Semifinal'\n      });\n      jogos.push({\n        dupla1: classificados[2], // Segundo do Grupo 1\n        dupla2: classificados[1], // Primeiro do Grupo 2\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 1,\n        fase: 'Semifinal'\n      });\n  \n      // A final será adicionada posteriormente, quando os vencedores forem conhecidos.\n    } else {\n      // Lógica para torneios com mais de 4 classificados (usando BYEs se necessário)\n      let rodadas = Math.ceil(Math.log2(classificados.length));\n      let nextPowerOf2 = Math.pow(2, rodadas);\n      let byes = nextPowerOf2 - classificados.length;\n  \n      for (let i = 0; i < byes; i++) {\n        classificados.push(['BYE', '']);\n      }\n  \n      for (let r = 1; r <= rodadas; r++) {\n        let jogosDaRodada = [];\n        for (let i = 0; i < classificados.length; i += 2) {\n          let dupla1 = classificados[i];\n          let dupla2 = classificados[i + 1] || ['BYE', ''];\n  \n          let jogoConfig = {\n            placar: '',\n            submetido: false,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : (r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`)\n          };\n  \n          if (dupla1[0] !== 'BYE' && dupla2[0] !== 'BYE') {\n            jogosDaRodada.push({ ...jogoConfig, dupla1: dupla1, dupla2: dupla2 });\n          } else if (dupla1[0] === 'BYE') {\n            jogosDaRodada.push({ ...jogoConfig, dupla1: dupla2, dupla2: ['BYE', ''], placar: 'BYE', submetido: true });\n          } else {\n            jogosDaRodada.push({ ...jogoConfig, dupla1: dupla1, dupla2: ['BYE', ''], placar: 'BYE', submetido: true });\n          }\n        }\n        jogos.push(...jogosDaRodada);\n  \n        let novosClassificados = [];\n        for (let i = 0; i < classificados.length; i += 2) {\n          if (classificados[i][0] === 'BYE') {\n            if (i + 1 < classificados.length) {\n              novosClassificados.push(classificados[i + 1]);\n            }\n          } else if (i + 1 < classificados.length && classificados[i + 1][0] === 'BYE') {\n            novosClassificados.push(classificados[i]);\n          } else {\n            novosClassificados.push(classificados[i]); // Aqui pode ser ajustado para definir um vencedor corretamente\n          }\n        }\n        classificados = novosClassificados;\n      }\n    }\n  \n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  \n  // Função que cria a final quando ambas as semifinais forem concluídas\n  const verificarCriacaoFinal = (jogos) => {\n    // Filtra os jogos da semifinal\n    const semifinais = jogos.filter(jogo => jogo.fase === 'Semifinal');\n  \n    // Verifica se todas as semifinais foram finalizadas\n    if (semifinais.every(jogo => jogo.submetido)) {\n      // Determina os vencedores (assumindo que a dupla com maior pontuação vence)\n      const vencedores = semifinais.map(jogo => \n        jogo.placar.split('-')[0] > jogo.placar.split('-')[1] ? jogo.dupla1 : jogo.dupla2\n      );\n  \n      // Criar a final apenas se ainda não existir\n      const finalJaExiste = jogos.some(jogo => jogo.fase === 'Final');\n      if (!finalJaExiste) {\n        const jogoFinal = {\n          dupla1: vencedores[0],\n          dupla2: vencedores[1],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogos.length,\n          rodada: 2,\n          fase: 'Final'\n        };\n  \n        setJogosEliminatoria([...jogos, jogoFinal]);\n      }\n    }\n  };\n  \n\n  \n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n\n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n\n    if (jogosUltimaRodada.length === 2) { // Semifinais concluídas\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      setJogosEliminatoria(prevJogos => {\n        const newJogos = [...prevJogos];\n        const indiceFinal = newJogos.findIndex(jogo => jogo.fase === 'Final');\n        if (indiceFinal !== -1) {\n          newJogos[indiceFinal] = {\n            ...newJogos[indiceFinal],\n            dupla1: vencedores[0],\n            dupla2: vencedores[1]\n          };\n        }\n        return newJogos;\n      });\n\n      // Adicionar disputa pelo terceiro lugar\n      let perdedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n\n      setJogosEliminatoria(prevJogos => [\n        ...prevJogos,\n        {\n          dupla1: perdedores[0],\n          dupla2: perdedores[1],\n          placar: '',\n          submetido: false,\n          jogoIndex: prevJogos.length,\n          rodada: ultimaRodada + 1,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n\n      setFinalConfigurada(true); // Indica que a final foi configurada\n    } else if (jogosUltimaRodada.length === 1) {\n      const final = jogosUltimaRodada[0];\n      const vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      const perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n      finalizarTorneio(vencedorFinal, perdedorFinal);\n    }\n  };\n\n  const atualizarEstatisticas = (jogoInfo) => {\n    // Certifique-se de que historicoJogos é um array antes de tentar adicionar ou verificar elementos\n    if (Array.isArray(historicoJogos)) {\n      if (!historicoJogos.some(historicoJogo => historicoJogo.jogoIndex === jogoInfo.jogoIndex)) {\n        setHistoricoJogos(prevHistorico => [...prevHistorico, { ...jogoInfo }]);\n      } else {\n        console.warn('Jogo já existente no histórico:', jogoInfo.jogoIndex);\n      }\n    } else {\n      console.error('historicoJogos não é um array:', historicoJogos);\n      // Considerar inicializar ou corrigir historicoJogos aqui\n      setHistoricoJogos([{ ...jogoInfo }]);  // Reinicializar como array com o novo jogo\n    }\n  \n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo =>\n        jogo.jogoIndex === jogoInfo.jogoIndex ? { ...jogo, placar: jogoInfo.placar, submetido: true } : jogo\n      );\n  \n      return updatedJogos;\n    });\n  };\n\n  const finalizarTorneio = (vencedorFinal, perdedorFinal) => {\n    let disputaTerceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (disputaTerceiroLugar && disputaTerceiroLugar.submetido) {\n      let terceiroLugar = disputaTerceiroLugar.placar.split('-').map(Number)[0] > disputaTerceiroLugar.placar.split('-').map(Number)[1] ? disputaTerceiroLugar.dupla1 : disputaTerceiroLugar.dupla2;\n      let quartoLugar = terceiroLugar === disputaTerceiroLugar.dupla1 ? disputaTerceiroLugar.dupla2 : disputaTerceiroLugar.dupla1;\n\n      setRanking([\n        { lugar: 1, dupla: vencedorFinal },\n        { lugar: 2, dupla: perdedorFinal },\n        { lugar: 3, dupla: terceiroLugar },\n        { lugar: 4, dupla: quartoLugar }\n      ]);\n\n      setFaseAtual('finalizado');\n    }\n  };\n\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onRemoveDupla={removeDupla} />\n            <div>\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 1\"\n                ref={jogador1Ref}\n              />\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 2\"\n                ref={jogador2Ref}\n              />\n              <Button\n                onClick={() => {\n                  const jogador1 = jogador1Ref.current?.value;\n                  const jogador2 = jogador2Ref.current?.value;\n                  if (jogador1 && jogador2) {\n                    addDupla([jogador1, jogador2]);\n                    if (jogador1Ref.current) jogador1Ref.current.value = '';\n                    if (jogador2Ref.current) jogador2Ref.current.value = '';\n                  } else {\n                    alert('Por favor, insira os nomes dos dois jogadores.');\n                  }\n                }}\n              >\n                Adicionar Dupla\n              </Button>\n              <Button onClick={add8Duplas}>\n                Adicionar 8 Duplas\n              </Button>\n            </div>\n            <Button onClick={startTournament} disabled={duplas.length < 3}>\n              Começar Torneio\n            </Button>\n          </>\n        )}\n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">\n            {faseAtual === 'grupos' ? 'Fase de Grupos' :\n              faseAtual === 'eliminatória' ? 'Fase Eliminatória' :\n                'Torneio Finalizado'}\n          </h3>\n          {faseAtual === 'grupos' && (\n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onUpdateGroups={setGrupos} />\n          )}\n          {faseAtual === 'eliminatória' && (\n            <>\n              <FaseEliminatoria\n                fase=\"Fase Eliminatória\"\n                jogos={jogosEliminatoria}\n                onAtualizarEstatisticas={atualizarEstatisticas}\n              />\n              {jogosEliminatoria.every(jogo => jogo.submetido) && (\n                <React.Fragment>\n                  <Button onClick={encerrarFaseEliminatoria}>Encerrar Fase Eliminatória</Button>\n                  {finalConfigurada && (\n                    <>\n                      {jogosEliminatoria.find(jogo => jogo.fase === 'Final') && (\n                        <p>Disputa Final: {jogosEliminatoria.find(jogo => jogo.fase === 'Final').dupla1.join(' e ')} vs {jogosEliminatoria.find(jogo => jogo.fase === 'Final').dupla2.join(' e ')}</p>\n                      )}\n                      {jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar') && (\n                        <p>Disputa Pelo Terceiro: {jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar').dupla1.join(' e ')} vs {jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar').dupla2.join(' e ')}</p>\n                      )}\n                    </>\n                  )}\n                  <Button onClick={finalizarTorneio}>\n                    Finalizar Torneio\n                  </Button>\n                </React.Fragment>\n              )}\n            </>\n          )}\n          {historicoJogos.length > 0 && (\n            <section className=\"section\">\n              <h3>Histórico de Jogos:</h3>\n              {grupos.map(grupo => (\n                <div key={grupo.id}>\n                  <h4>Grupo {grupo.id + 1}</h4>\n                  <ul>\n                    {historicoJogos\n                      .filter(jogo => jogo.grupo === grupo.id)\n                      .map((jogo, index) => (\n                        <li key={`${jogo.jogoIndex}-${index}`}>\n                          Rodada {jogo.fase || 'Desconhecida'}:\n                          {Array.isArray(jogo.dupla1) ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida'}\n                          vs\n                          {Array.isArray(jogo.dupla2) ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida'}\n                          - Placar: {jogo.placar || 'Não Submetido'}\n                        </li>\n                      ))}\n                  </ul>\n                </div>\n              ))}\n            </section>\n          )}\n          {historicoFases.length > 0 && (\n            <section className=\"section\">\n              <h3>Histórico de Fases:</h3>\n              {historicoFases.map((fase, index) => (\n                <div key={index}>\n                  <h4>{fase.fase}</h4>\n                  <p>Classificados:</p>\n                  <ul>\n                    {fase.classificados.map((dupla, i) => (\n                      <li key={i}>{dupla.join(' e ')}</li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </section>\n          )}\n          {faseAtual === 'grupos' && (\n            <Button onClick={encerrarFaseGrupos}>\n              Encerrar Fase de Grupos\n            </Button>\n          )}\n          {faseAtual === 'finalizado' && (\n            <>\n              <p>O torneio foi finalizado. Parabéns aos vencedores!</p>\n              <h3>Ranking Final:</h3>\n              <ul>\n                {ranking.map((posição, index) => (\n                  <li key={index}>\n                    {posição.lugar}º Lugar:\n                    {Array.isArray(posição.dupla) ? posição.dupla.join(' e ') : posição.dupla || 'Desconhecido'}\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n        </section>\n      </main>\n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}