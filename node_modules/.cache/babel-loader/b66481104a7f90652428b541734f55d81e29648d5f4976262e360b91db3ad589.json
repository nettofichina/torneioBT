{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria'; // Adicionei esta importação que estava faltando\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport { dividirGrupos, classificarDuplasPorDesempate, criarJogosParaGrupo } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id); // Usando a função aqui\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let duplasRestantes = classificados.length;\n    let rodadas = Math.ceil(Math.log2(duplasRestantes)); // Número de rodadas para eliminar até um vencedor\n\n    for (let r = 1; r <= rodadas; r++) {\n      let jogosDaRodada = [];\n      for (let i = 0; i < duplasRestantes; i += 2) {\n        let jogo = {\n          dupla1: classificados[i] || ['TBD', ''],\n          // 'TBD' para duplas ainda não definidas\n          dupla2: classificados[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogos.length,\n          rodada: r,\n          // Adicionado para identificar a rodada\n          fase: r === rodadas ? 'Final' : r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`\n        };\n        jogosDaRodada.push(jogo);\n      }\n      jogos.push(...jogosDaRodada);\n      duplasRestantes = Math.ceil(duplasRestantes / 2); // Arredonda para cima para manter o número de jogos\n\n      // Atualiza classificados para a próxima rodada\n      classificados = jogosDaRodada.map(jogo => ['Vencedor Jogo ' + jogo.jogoIndex, '']);\n    }\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  const encerrarFaseEliminatoria = () => {\n    // Verifica se todos os jogos da rodada atual estão submetidos\n    console.log('Estado dos jogos antes de avançar:', jogosEliminatoria);\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n\n    // Determinar a última rodada\n    const ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n\n    // Jogos da última rodada\n    const jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n    if (jogosUltimaRodada.length === 1) {\n      // Último jogo, então é a final\n      setFaseAtual('finalizado'); // Finalizar o torneio\n    } else {\n      // Gerar a próxima rodada\n      const vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      let novaRodada = ultimaRodada + 1;\n      let novosJogos = [];\n      for (let i = 0; i < vencedores.length; i += 2) {\n        novosJogos.push({\n          dupla1: vencedores[i],\n          dupla2: vencedores[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length + i / 2,\n          rodada: novaRodada,\n          fase: novaRodada === Math.ceil(Math.log2(vencedores.length)) ? 'Final' : `Rodada ${novaRodada}`\n        });\n      }\n      setJogosEliminatoria(prevJogos => [...prevJogos, ...novosJogos]);\n    }\n  };\n  const encerrarFaseGrupos = () => {\n    console.log('Estado dos grupos antes de encerrar:', grupos);\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      console.log('Classificados do grupo', grupo.id, ':', classificadosGrupo);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n    console.log('Classificados para a fase eliminatória:', classificados);\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      console.log('Iniciando fase eliminatória...');\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const atualizarEstatisticas = jogoInfo => {\n    console.log('Atualizando estatísticas...', jogoInfo);\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo => jogo.jogoIndex === jogoInfo.jogoIndex ? {\n        ...jogo,\n        placar: jogoInfo.placar,\n        submetido: true\n      } : jogo);\n      return JSON.stringify(prevJogos) !== JSON.stringify(updatedJogos) ? updatedJogos : prevJogos;\n    });\n  };\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 1\",\n            ref: jogador1Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 2\",\n            ref: jogador2Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              var _jogador1Ref$current, _jogador2Ref$current;\n              const jogador1 = (_jogador1Ref$current = jogador1Ref.current) === null || _jogador1Ref$current === void 0 ? void 0 : _jogador1Ref$current.value;\n              const jogador2 = (_jogador2Ref$current = jogador2Ref.current) === null || _jogador2Ref$current === void 0 ? void 0 : _jogador2Ref$current.value;\n              if (jogador1 && jogador2) {\n                addDupla([jogador1, jogador2]);\n                if (jogador1Ref.current) jogador1Ref.current.value = '';\n                if (jogador2Ref.current) jogador2Ref.current.value = '';\n              } else {\n                alert('Por favor, insira os nomes dos dois jogadores.');\n              }\n            },\n            children: \"Adicionar Dupla\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: startTournament,\n          disabled: duplas.length < 3,\n          children: \"Come\\xE7ar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          fase: \"Fase Eliminat\\xF3ria\",\n          jogos: jogosEliminatoria,\n          onAtualizarEstatisticas: atualizarEstatisticas\n          // onUpdateJogos={setJogosEliminatoria}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseEliminatoria,\n          disabled: jogosEliminatoria.some(jogo => !jogo.submetido),\n          children: \"Finalizar Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"O torneio foi finalizado. Parab\\xE9ns aos vencedores!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QmLSmU4Iv44XB/2AMNm1oApv/yc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","Input","dividirGrupos","classificarDuplasPorDesempate","criarJogosParaGrupo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","console","log","jogador1Ref","jogador2Ref","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","forEach","grupo","jogos","id","iniciarFaseEliminatoria","classificados","duplasRestantes","rodadas","ceil","log2","r","jogosDaRodada","jogo","dupla1","dupla2","placar","submetido","jogoIndex","rodada","fase","push","map","encerrarFaseEliminatoria","ultimaRodada","max","jogosUltimaRodada","vencedores","set1","set2","split","Number","novaRodada","novosJogos","prevJogos","encerrarFaseGrupos","classificadosGrupo","slice","join","atualizarEstatisticas","jogoInfo","updatedJogos","JSON","stringify","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","required","onRemoveDupla","ref","onClick","_jogador1Ref$current","_jogador2Ref$current","jogador1","current","value","jogador2","disabled","style","display","onAtualizarEstatisticas","onUpdateGroups","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria'; // Adicionei esta importação que estava faltando\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport {\n  dividirGrupos,\n  classificarDuplasPorDesempate,\n  criarJogosParaGrupo\n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id); // Usando a função aqui\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let duplasRestantes = classificados.length;\n    let rodadas = Math.ceil(Math.log2(duplasRestantes)); // Número de rodadas para eliminar até um vencedor\n\n    for (let r = 1; r <= rodadas; r++) {\n      let jogosDaRodada = [];\n      for (let i = 0; i < duplasRestantes; i += 2) {\n        let jogo = {\n          dupla1: classificados[i] || ['TBD', ''], // 'TBD' para duplas ainda não definidas\n          dupla2: classificados[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogos.length,\n          rodada: r, // Adicionado para identificar a rodada\n          fase: r === rodadas ? 'Final' : (r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`)\n        };\n        jogosDaRodada.push(jogo);\n      }\n      jogos.push(...jogosDaRodada);\n      duplasRestantes = Math.ceil(duplasRestantes / 2); // Arredonda para cima para manter o número de jogos\n\n      // Atualiza classificados para a próxima rodada\n      classificados = jogosDaRodada.map(jogo => ['Vencedor Jogo ' + jogo.jogoIndex, '']);\n    }\n\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    // Verifica se todos os jogos da rodada atual estão submetidos\n    console.log('Estado dos jogos antes de avançar:', jogosEliminatoria);\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n\n    // Determinar a última rodada\n    const ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n\n    // Jogos da última rodada\n    const jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n\n    if (jogosUltimaRodada.length === 1) { // Último jogo, então é a final\n      setFaseAtual('finalizado'); // Finalizar o torneio\n    } else {\n      // Gerar a próxima rodada\n      const vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      let novaRodada = ultimaRodada + 1;\n      let novosJogos = [];\n      for (let i = 0; i < vencedores.length; i += 2) {\n        novosJogos.push({\n          dupla1: vencedores[i],\n          dupla2: vencedores[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length + i / 2,\n          rodada: novaRodada,\n          fase: novaRodada === Math.ceil(Math.log2(vencedores.length)) ? 'Final' : `Rodada ${novaRodada}`\n        });\n      }\n\n      setJogosEliminatoria(prevJogos => [...prevJogos, ...novosJogos]);\n    }\n  };\n\n  const encerrarFaseGrupos = () => {\n    console.log('Estado dos grupos antes de encerrar:', grupos);\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      console.log('Classificados do grupo', grupo.id, ':', classificadosGrupo);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n\n    console.log('Classificados para a fase eliminatória:', classificados);\n\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      console.log('Iniciando fase eliminatória...');\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  const atualizarEstatisticas = (jogoInfo) => {\n    console.log('Atualizando estatísticas...', jogoInfo);\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo =>\n        jogo.jogoIndex === jogoInfo.jogoIndex ? { ...jogo, placar: jogoInfo.placar, submetido: true } : jogo\n      );\n      return JSON.stringify(prevJogos) !== JSON.stringify(updatedJogos) ? updatedJogos : prevJogos;\n    });\n  };\n\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onRemoveDupla={removeDupla} />\n            <div>\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 1\"\n                ref={jogador1Ref}\n              />\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 2\"\n                ref={jogador2Ref}\n              />\n              <Button\n                onClick={() => {\n                  const jogador1 = jogador1Ref.current?.value;\n                  const jogador2 = jogador2Ref.current?.value;\n                  if (jogador1 && jogador2) {\n                    addDupla([jogador1, jogador2]);\n                    if (jogador1Ref.current) jogador1Ref.current.value = '';\n                    if (jogador2Ref.current) jogador2Ref.current.value = '';\n                  } else {\n                    alert('Por favor, insira os nomes dos dois jogadores.');\n                  }\n                }}\n              >\n                Adicionar Dupla\n              </Button>\n              <Button onClick={add8Duplas}>\n                Adicionar 8 Duplas\n              </Button>\n            </div>\n            <Button onClick={startTournament} disabled={duplas.length < 3}>\n              Começar Torneio\n            </Button>\n          </>\n        )}\n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">{faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'}</h3>\n          {faseAtual === 'grupos' &&\n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onUpdateGroups={setGrupos} />\n          }\n          {faseAtual === 'eliminatória' &&\n            <FaseEliminatoria\n              fase=\"Fase Eliminatória\"\n              jogos={jogosEliminatoria}\n              onAtualizarEstatisticas={atualizarEstatisticas}\n            // onUpdateJogos={setJogosEliminatoria}\n            />\n          }\n          {faseAtual === 'grupos' &&\n            <Button onClick={encerrarFaseGrupos}>\n              Encerrar Fase de Grupos\n            </Button>\n          }\n          {faseAtual === 'eliminatória' &&\n            <Button\n              onClick={encerrarFaseEliminatoria}\n              disabled={jogosEliminatoria.some(jogo => !jogo.submetido)}\n            >\n              Finalizar Fase Eliminatória\n            </Button>\n          }\n          {faseAtual === 'finalizado' &&\n            <p>O torneio foi finalizado. Parabéns aos vencedores!</p>\n          }\n        </section>\n      </main>\n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}