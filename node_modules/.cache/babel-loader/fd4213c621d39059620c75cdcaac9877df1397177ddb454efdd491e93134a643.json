{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport { dividirGrupos, classificarDuplasPorDesempate, criarJogosParaGrupo } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n  const [historicoFases, setHistoricoFases] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = classificarDuplasPorDesempate([...duplas], grupos.flatMap(grupo => grupo.jogos), grupos);\n    setHistoricoFases(prevHistorico => [...prevHistorico, {\n      fase: 'Fase de Grupos',\n      resultados: grupos.map(grupo => ({\n        grupoId: grupo.id,\n        jogos: grupo.jogos.map(jogo => ({\n          dupla1: jogo.dupla1,\n          dupla2: jogo.dupla2,\n          placar: jogo.placar,\n          vencedor: jogo.placar.split('-').map(Number)[0] > jogo.placar.split('-').map(Number)[1] ? jogo.dupla1 : jogo.dupla2,\n          diferencaSets: Math.abs(jogo.placar.split('-').map(Number)[0] - jogo.placar.split('-').map(Number)[1])\n        }))\n      })),\n      classificados: classificados\n    }]);\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let currentIndex = 0;\n    if (classificados.length === 4) {\n      // Assumindo que 4 duplas classificaram-se para as semifinais\n      // Configurar as semifinais\n      jogos.push({\n        dupla1: classificados[0],\n        // Primeiro de Grupo 1\n        dupla2: classificados[3],\n        // Segundo de Grupo 2\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 1,\n        fase: 'Semifinal'\n      });\n      jogos.push({\n        dupla1: classificados[2],\n        // Segundo de Grupo 1\n        dupla2: classificados[1],\n        // Primeiro de Grupo 2\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 1,\n        fase: 'Semifinal'\n      });\n\n      // Configurando a final com espaços vazios que serão preenchidos depois\n      jogos.push({\n        dupla1: [],\n        // Vencedor da primeira semifinal\n        dupla2: [],\n        // Vencedor da segunda semifinal\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 2,\n        fase: 'Final'\n      });\n    } else {\n      // Lógica para outros cenários de classificação com BYEs\n      let rodadas = Math.ceil(Math.log2(classificados.length));\n      let nextPowerOf2 = Math.pow(2, rodadas);\n      let byes = nextPowerOf2 - classificados.length;\n\n      // Adicionar BYEs aos classificados\n      for (let i = 0; i < byes; i++) {\n        classificados.push(['BYE', '']);\n      }\n\n      // Ordenar classificados para garantir que BYEs sejam distribuídos aos melhores\n      classificados = classificados.sort((a, b) => {\n        // Supondo que a classificação já está em ordem de desempenho\n        return 0;\n      });\n\n      // Criar jogos para cada rodada\n      for (let r = 1; r <= rodadas; r++) {\n        let jogosDaRodada = [];\n        for (let i = 0; i < classificados.length; i += 2) {\n          let dupla1 = classificados[i];\n          let dupla2 = classificados[i + 1] || ['BYE', '']; // Se não houver dupla, é um BYE\n\n          let jogoConfig = {\n            placar: '',\n            submetido: false,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`\n          };\n          if (dupla1[0] !== 'BYE' && dupla2[0] !== 'BYE') {\n            // Jogo normal\n            jogosDaRodada.push({\n              ...jogoConfig,\n              dupla1: dupla1,\n              dupla2: dupla2\n            });\n          } else if (dupla1[0] === 'BYE') {\n            // Dupla 2 passa direto\n            jogosDaRodada.push({\n              ...jogoConfig,\n              dupla1: dupla2,\n              dupla2: ['BYE', ''],\n              placar: 'BYE',\n              submetido: true\n            });\n          } else {\n            // Dupla 1 passa direto\n            jogosDaRodada.push({\n              ...jogoConfig,\n              dupla1: dupla1,\n              dupla2: ['BYE', ''],\n              placar: 'BYE',\n              submetido: true\n            });\n          }\n        }\n        jogos.push(...jogosDaRodada);\n\n        // Atualização de classificados sem usar função dentro do loop\n        let novosClassificados = [];\n        for (let i = 0; i < classificados.length; i += 2) {\n          if (classificados[i][0] === 'BYE') {\n            if (i + 1 < classificados.length) {\n              novosClassificados.push(classificados[i + 1]);\n            }\n          } else if (i + 1 < classificados.length && classificados[i + 1][0] === 'BYE') {\n            novosClassificados.push(classificados[i]);\n          } else {\n            novosClassificados.push(classificados[i]); // Aqui você pode decidir quem realmente venceu, mas para simplificação, estamos assumindo a primeira dupla.\n          }\n        }\n        classificados = novosClassificados;\n      }\n    }\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  const atualizarFinal = useCallback(() => {\n    const semifinais = jogosEliminatoria.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinais.every(jogo => jogo.submetido)) {\n      const finalIndex = jogosEliminatoria.findIndex(jogo => jogo.fase === 'Final');\n      if (finalIndex !== -1) {\n        let vencedorSF1 = semifinais[0].placar.split('-')[0] > semifinais[0].placar.split('-')[1] ? semifinais[0].dupla1 : semifinais[0].dupla2;\n        let vencedorSF2 = semifinais[1].placar.split('-')[0] > semifinais[1].placar.split('-')[1] ? semifinais[1].dupla1 : semifinais[1].dupla2;\n        setJogosEliminatoria(prevJogos => {\n          const newJogos = [...prevJogos];\n          newJogos[finalIndex] = {\n            ...newJogos[finalIndex],\n            dupla1: vencedorSF1,\n            dupla2: vencedorSF2\n          };\n          return newJogos;\n        });\n      }\n    }\n  }, [jogosEliminatoria]);\n  useEffect(() => {\n    atualizarFinal();\n  }, [atualizarFinal]);\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n    if (jogosUltimaRodada.length === 2) {\n      // Semifinais concluídas\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      setJogosEliminatoria(prevJogos => {\n        const newJogos = [...prevJogos];\n        const indiceFinal = newJogos.findIndex(jogo => jogo.fase === 'Final');\n        if (indiceFinal !== -1) {\n          newJogos[indiceFinal] = {\n            ...newJogos[indiceFinal],\n            dupla1: vencedores[0],\n            dupla2: vencedores[1]\n          };\n        }\n        return newJogos;\n      });\n\n      // Adicionar disputa pelo terceiro lugar\n      let perdedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n      setJogosEliminatoria(prevJogos => [...prevJogos, {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        jogoIndex: prevJogos.length,\n        rodada: ultimaRodada + 1,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      setFinalConfigurada(true); // Indica que a final foi configurada\n    } else if (jogosUltimaRodada.length === 1) {\n      const final = jogosUltimaRodada[0];\n      const vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      const perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n      finalizarTorneio(vencedorFinal, perdedorFinal);\n    }\n  };\n  const atualizarEstatisticas = jogoInfo => {\n    // Certifique-se de que historicoJogos é um array antes de tentar adicionar ou verificar elementos\n    if (Array.isArray(historicoJogos)) {\n      if (!historicoJogos.some(historicoJogo => historicoJogo.jogoIndex === jogoInfo.jogoIndex)) {\n        setHistoricoJogos(prevHistorico => [...prevHistorico, {\n          ...jogoInfo\n        }]);\n      } else {\n        console.warn('Jogo já existente no histórico:', jogoInfo.jogoIndex);\n      }\n    } else {\n      console.error('historicoJogos não é um array:', historicoJogos);\n      // Considerar inicializar ou corrigir historicoJogos aqui\n      setHistoricoJogos([{\n        ...jogoInfo\n      }]); // Reinicializar como array com o novo jogo\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo => jogo.jogoIndex === jogoInfo.jogoIndex ? {\n        ...jogo,\n        placar: jogoInfo.placar,\n        submetido: true\n      } : jogo);\n      return updatedJogos;\n    });\n  };\n  const finalizarTorneio = (vencedorFinal, perdedorFinal) => {\n    let disputaTerceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (disputaTerceiroLugar && disputaTerceiroLugar.submetido) {\n      let terceiroLugar = disputaTerceiroLugar.placar.split('-').map(Number)[0] > disputaTerceiroLugar.placar.split('-').map(Number)[1] ? disputaTerceiroLugar.dupla1 : disputaTerceiroLugar.dupla2;\n      let quartoLugar = terceiroLugar === disputaTerceiroLugar.dupla1 ? disputaTerceiroLugar.dupla2 : disputaTerceiroLugar.dupla1;\n      setRanking([{\n        lugar: 1,\n        dupla: vencedorFinal\n      }, {\n        lugar: 2,\n        dupla: perdedorFinal\n      }, {\n        lugar: 3,\n        dupla: terceiroLugar\n      }, {\n        lugar: 4,\n        dupla: quartoLugar\n      }]);\n      setFaseAtual('finalizado');\n    }\n  };\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 1\",\n            ref: jogador1Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 2\",\n            ref: jogador2Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              var _jogador1Ref$current, _jogador2Ref$current;\n              const jogador1 = (_jogador1Ref$current = jogador1Ref.current) === null || _jogador1Ref$current === void 0 ? void 0 : _jogador1Ref$current.value;\n              const jogador2 = (_jogador2Ref$current = jogador2Ref.current) === null || _jogador2Ref$current === void 0 ? void 0 : _jogador2Ref$current.value;\n              if (jogador1 && jogador2) {\n                addDupla([jogador1, jogador2]);\n                if (jogador1Ref.current) jogador1Ref.current.value = '';\n                if (jogador2Ref.current) jogador2Ref.current.value = '';\n              } else {\n                alert('Por favor, insira os nomes dos dois jogadores.');\n              }\n            },\n            children: \"Adicionar Dupla\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: startTournament,\n          disabled: duplas.length < 3,\n          children: \"Come\\xE7ar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n            fase: \"Fase Eliminat\\xF3ria\",\n            jogos: jogosEliminatoria,\n            onAtualizarEstatisticas: atualizarEstatisticas\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 15\n          }, this), jogosEliminatoria.every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: encerrarFaseEliminatoria,\n              children: \"Encerrar Fase Eliminat\\xF3ria\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 19\n            }, this), finalConfigurada && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [jogosEliminatoria.find(jogo => jogo.fase === 'Final') && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Disputa Final: \", jogosEliminatoria.find(jogo => jogo.fase === 'Final').dupla1.join(' e '), \" vs \", jogosEliminatoria.find(jogo => jogo.fase === 'Final').dupla2.join(' e ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 25\n              }, this), jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar') && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Disputa Pelo Terceiro: \", jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar').dupla1.join(' e '), \" vs \", jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar').dupla2.join(' e ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: finalizarTorneio,\n              children: \"Finalizar Torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), historicoJogos.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hist\\xF3rico de Jogos:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this), grupos.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Grupo \", grupo.id + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: historicoJogos.filter(jogo => jogo.grupo === grupo.id).map((jogo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Rodada \", jogo.fase || 'Desconhecida', \":\", Array.isArray(jogo.dupla1) ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida', \"vs\", Array.isArray(jogo.dupla2) ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida', \"- Placar: \", jogo.placar || 'Não Submetido']\n              }, `${jogo.jogoIndex}-${index}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 19\n            }, this)]\n          }, grupo.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), historicoFases.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hist\\xF3rico de Fases:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this), historicoFases.map((fase, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: fase.fase\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Classificados:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: fase.classificados.map((dupla, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: dupla.join(' e ')\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 13\n        }, this), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"O torneio foi finalizado. Parab\\xE9ns aos vencedores!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Ranking Final:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [posição.lugar, \"\\xBA Lugar:\", Array.isArray(posição.dupla) ? posição.dupla.join(' e ') : posição.dupla || 'Desconhecido']\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"D6NXurJwYF8AKLtidXye83VTQpk=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","Input","dividirGrupos","classificarDuplasPorDesempate","criarJogosParaGrupo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","ranking","setRanking","historicoJogos","setHistoricoJogos","historicoFases","setHistoricoFases","finalConfigurada","setFinalConfigurada","console","log","jogador1Ref","useRef","jogador2Ref","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","forEach","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","classificados","flatMap","prevHistorico","fase","resultados","map","grupoId","dupla1","dupla2","placar","vencedor","split","Number","diferencaSets","abs","join","iniciarFaseEliminatoria","currentIndex","push","jogoIndex","rodada","rodadas","ceil","log2","nextPowerOf2","pow","byes","a","b","r","jogosDaRodada","jogoConfig","novosClassificados","atualizarFinal","useCallback","semifinais","every","finalIndex","findIndex","vencedorSF1","vencedorSF2","prevJogos","newJogos","encerrarFaseEliminatoria","ultimaRodada","max","jogosUltimaRodada","vencedores","set1","set2","indiceFinal","perdedores","final","vencedorFinal","perdedorFinal","finalizarTorneio","atualizarEstatisticas","jogoInfo","Array","isArray","historicoJogo","warn","error","updatedJogos","disputaTerceiroLugar","find","terceiroLugar","quartoLugar","lugar","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","required","onRemoveDupla","ref","onClick","_jogador1Ref$current","_jogador2Ref$current","jogador1","current","value","jogador2","disabled","style","display","onAtualizarEstatisticas","onUpdateGroups","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport {\n  dividirGrupos,\n  classificarDuplasPorDesempate,\n  criarJogosParaGrupo\n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n  const [historicoFases, setHistoricoFases] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    let classificados = classificarDuplasPorDesempate([...duplas], grupos.flatMap(grupo => grupo.jogos), grupos);\n    setHistoricoFases(prevHistorico => [...prevHistorico, {\n      fase: 'Fase de Grupos',\n      resultados: grupos.map(grupo => ({\n        grupoId: grupo.id,\n        jogos: grupo.jogos.map(jogo => ({\n          dupla1: jogo.dupla1,\n          dupla2: jogo.dupla2,\n          placar: jogo.placar,\n          vencedor: jogo.placar.split('-').map(Number)[0] > jogo.placar.split('-').map(Number)[1] ? jogo.dupla1 : jogo.dupla2,\n          diferencaSets: Math.abs(jogo.placar.split('-').map(Number)[0] - jogo.placar.split('-').map(Number)[1])\n        }))\n      })),\n      classificados: classificados\n    }]);\n\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  \n  const iniciarFaseEliminatoria = (classificados) => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let currentIndex = 0;\n\n    if (classificados.length === 4) { // Assumindo que 4 duplas classificaram-se para as semifinais\n      // Configurar as semifinais\n      jogos.push({\n        dupla1: classificados[0], // Primeiro de Grupo 1\n        dupla2: classificados[3], // Segundo de Grupo 2\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 1,\n        fase: 'Semifinal'\n      });\n      jogos.push({\n        dupla1: classificados[2], // Segundo de Grupo 1\n        dupla2: classificados[1], // Primeiro de Grupo 2\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 1,\n        fase: 'Semifinal'\n      });\n\n      // Configurando a final com espaços vazios que serão preenchidos depois\n      jogos.push({\n        dupla1: [], // Vencedor da primeira semifinal\n        dupla2: [], // Vencedor da segunda semifinal\n        placar: '',\n        submetido: false,\n        jogoIndex: currentIndex++,\n        rodada: 2,\n        fase: 'Final'\n      });\n    } else {\n      // Lógica para outros cenários de classificação com BYEs\n      let rodadas = Math.ceil(Math.log2(classificados.length));\n      let nextPowerOf2 = Math.pow(2, rodadas);\n      let byes = nextPowerOf2 - classificados.length;\n\n      // Adicionar BYEs aos classificados\n      for (let i = 0; i < byes; i++) {\n        classificados.push(['BYE', '']);\n      }\n\n      // Ordenar classificados para garantir que BYEs sejam distribuídos aos melhores\n      classificados = classificados.sort((a, b) => {\n        // Supondo que a classificação já está em ordem de desempenho\n        return 0;\n      });\n\n      // Criar jogos para cada rodada\n      for (let r = 1; r <= rodadas; r++) {\n        let jogosDaRodada = [];\n        for (let i = 0; i < classificados.length; i += 2) {\n          let dupla1 = classificados[i];\n          let dupla2 = classificados[i + 1] || ['BYE', '']; // Se não houver dupla, é um BYE\n\n          let jogoConfig = {\n            placar: '',\n            submetido: false,\n            jogoIndex: currentIndex++,\n            rodada: r,\n            fase: r === rodadas ? 'Final' : (r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`)\n          };\n\n          if (dupla1[0] !== 'BYE' && dupla2[0] !== 'BYE') {\n            // Jogo normal\n            jogosDaRodada.push({ ...jogoConfig, dupla1: dupla1, dupla2: dupla2 });\n          } else if (dupla1[0] === 'BYE') {\n            // Dupla 2 passa direto\n            jogosDaRodada.push({ ...jogoConfig, dupla1: dupla2, dupla2: ['BYE', ''], placar: 'BYE', submetido: true });\n          } else {\n            // Dupla 1 passa direto\n            jogosDaRodada.push({ ...jogoConfig, dupla1: dupla1, dupla2: ['BYE', ''], placar: 'BYE', submetido: true });\n          }\n        }\n        jogos.push(...jogosDaRodada);\n\n        // Atualização de classificados sem usar função dentro do loop\n        let novosClassificados = [];\n        for (let i = 0; i < classificados.length; i += 2) {\n          if (classificados[i][0] === 'BYE') {\n            if (i + 1 < classificados.length) {\n              novosClassificados.push(classificados[i + 1]);\n            }\n          } else if (i + 1 < classificados.length && classificados[i + 1][0] === 'BYE') {\n            novosClassificados.push(classificados[i]);\n          } else {\n            novosClassificados.push(classificados[i]); // Aqui você pode decidir quem realmente venceu, mas para simplificação, estamos assumindo a primeira dupla.\n          }\n        }\n        classificados = novosClassificados;\n      }\n    }\n\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  const atualizarFinal = useCallback(() => {\n    const semifinais = jogosEliminatoria.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinais.every(jogo => jogo.submetido)) {\n      const finalIndex = jogosEliminatoria.findIndex(jogo => jogo.fase === 'Final');\n      if (finalIndex !== -1) {\n        let vencedorSF1 = semifinais[0].placar.split('-')[0] > semifinais[0].placar.split('-')[1] ? semifinais[0].dupla1 : semifinais[0].dupla2;\n        let vencedorSF2 = semifinais[1].placar.split('-')[0] > semifinais[1].placar.split('-')[1] ? semifinais[1].dupla1 : semifinais[1].dupla2;\n  \n        setJogosEliminatoria(prevJogos => {\n          const newJogos = [...prevJogos];\n          newJogos[finalIndex] = {\n            ...newJogos[finalIndex],\n            dupla1: vencedorSF1,\n            dupla2: vencedorSF2\n          };\n          return newJogos;\n        });\n      }\n    }\n  }, [jogosEliminatoria]);\n  \n  useEffect(() => {\n    atualizarFinal();\n  }, [atualizarFinal]);\n\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n\n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n\n    if (jogosUltimaRodada.length === 2) { // Semifinais concluídas\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      setJogosEliminatoria(prevJogos => {\n        const newJogos = [...prevJogos];\n        const indiceFinal = newJogos.findIndex(jogo => jogo.fase === 'Final');\n        if (indiceFinal !== -1) {\n          newJogos[indiceFinal] = {\n            ...newJogos[indiceFinal],\n            dupla1: vencedores[0],\n            dupla2: vencedores[1]\n          };\n        }\n        return newJogos;\n      });\n\n      // Adicionar disputa pelo terceiro lugar\n      let perdedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n\n      setJogosEliminatoria(prevJogos => [\n        ...prevJogos,\n        {\n          dupla1: perdedores[0],\n          dupla2: perdedores[1],\n          placar: '',\n          submetido: false,\n          jogoIndex: prevJogos.length,\n          rodada: ultimaRodada + 1,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n\n      setFinalConfigurada(true); // Indica que a final foi configurada\n    } else if (jogosUltimaRodada.length === 1) {\n      const final = jogosUltimaRodada[0];\n      const vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      const perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n      finalizarTorneio(vencedorFinal, perdedorFinal);\n    }\n  };\n\n  const atualizarEstatisticas = (jogoInfo) => {\n    // Certifique-se de que historicoJogos é um array antes de tentar adicionar ou verificar elementos\n    if (Array.isArray(historicoJogos)) {\n      if (!historicoJogos.some(historicoJogo => historicoJogo.jogoIndex === jogoInfo.jogoIndex)) {\n        setHistoricoJogos(prevHistorico => [...prevHistorico, { ...jogoInfo }]);\n      } else {\n        console.warn('Jogo já existente no histórico:', jogoInfo.jogoIndex);\n      }\n    } else {\n      console.error('historicoJogos não é um array:', historicoJogos);\n      // Considerar inicializar ou corrigir historicoJogos aqui\n      setHistoricoJogos([{ ...jogoInfo }]);  // Reinicializar como array com o novo jogo\n    }\n  \n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo =>\n        jogo.jogoIndex === jogoInfo.jogoIndex ? { ...jogo, placar: jogoInfo.placar, submetido: true } : jogo\n      );\n  \n      return updatedJogos;\n    });\n  };\n\n  const finalizarTorneio = (vencedorFinal, perdedorFinal) => {\n    let disputaTerceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (disputaTerceiroLugar && disputaTerceiroLugar.submetido) {\n      let terceiroLugar = disputaTerceiroLugar.placar.split('-').map(Number)[0] > disputaTerceiroLugar.placar.split('-').map(Number)[1] ? disputaTerceiroLugar.dupla1 : disputaTerceiroLugar.dupla2;\n      let quartoLugar = terceiroLugar === disputaTerceiroLugar.dupla1 ? disputaTerceiroLugar.dupla2 : disputaTerceiroLugar.dupla1;\n\n      setRanking([\n        { lugar: 1, dupla: vencedorFinal },\n        { lugar: 2, dupla: perdedorFinal },\n        { lugar: 3, dupla: terceiroLugar },\n        { lugar: 4, dupla: quartoLugar }\n      ]);\n\n      setFaseAtual('finalizado');\n    }\n  };\n\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onRemoveDupla={removeDupla} />\n            <div>\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 1\"\n                ref={jogador1Ref}\n              />\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 2\"\n                ref={jogador2Ref}\n              />\n              <Button\n                onClick={() => {\n                  const jogador1 = jogador1Ref.current?.value;\n                  const jogador2 = jogador2Ref.current?.value;\n                  if (jogador1 && jogador2) {\n                    addDupla([jogador1, jogador2]);\n                    if (jogador1Ref.current) jogador1Ref.current.value = '';\n                    if (jogador2Ref.current) jogador2Ref.current.value = '';\n                  } else {\n                    alert('Por favor, insira os nomes dos dois jogadores.');\n                  }\n                }}\n              >\n                Adicionar Dupla\n              </Button>\n              <Button onClick={add8Duplas}>\n                Adicionar 8 Duplas\n              </Button>\n            </div>\n            <Button onClick={startTournament} disabled={duplas.length < 3}>\n              Começar Torneio\n            </Button>\n          </>\n        )}\n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">\n            {faseAtual === 'grupos' ? 'Fase de Grupos' :\n              faseAtual === 'eliminatória' ? 'Fase Eliminatória' :\n                'Torneio Finalizado'}\n          </h3>\n          {faseAtual === 'grupos' && (\n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onUpdateGroups={setGrupos} />\n          )}\n          {faseAtual === 'eliminatória' && (\n            <>\n              <FaseEliminatoria\n                fase=\"Fase Eliminatória\"\n                jogos={jogosEliminatoria}\n                onAtualizarEstatisticas={atualizarEstatisticas}\n              />\n              {jogosEliminatoria.every(jogo => jogo.submetido) && (\n                <React.Fragment>\n                  <Button onClick={encerrarFaseEliminatoria}>Encerrar Fase Eliminatória</Button>\n                  {finalConfigurada && (\n                    <>\n                      {jogosEliminatoria.find(jogo => jogo.fase === 'Final') && (\n                        <p>Disputa Final: {jogosEliminatoria.find(jogo => jogo.fase === 'Final').dupla1.join(' e ')} vs {jogosEliminatoria.find(jogo => jogo.fase === 'Final').dupla2.join(' e ')}</p>\n                      )}\n                      {jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar') && (\n                        <p>Disputa Pelo Terceiro: {jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar').dupla1.join(' e ')} vs {jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar').dupla2.join(' e ')}</p>\n                      )}\n                    </>\n                  )}\n                  <Button onClick={finalizarTorneio}>\n                    Finalizar Torneio\n                  </Button>\n                </React.Fragment>\n              )}\n            </>\n          )}\n          {historicoJogos.length > 0 && (\n            <section className=\"section\">\n              <h3>Histórico de Jogos:</h3>\n              {grupos.map(grupo => (\n                <div key={grupo.id}>\n                  <h4>Grupo {grupo.id + 1}</h4>\n                  <ul>\n                    {historicoJogos\n                      .filter(jogo => jogo.grupo === grupo.id)\n                      .map((jogo, index) => (\n                        <li key={`${jogo.jogoIndex}-${index}`}>\n                          Rodada {jogo.fase || 'Desconhecida'}:\n                          {Array.isArray(jogo.dupla1) ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida'}\n                          vs\n                          {Array.isArray(jogo.dupla2) ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida'}\n                          - Placar: {jogo.placar || 'Não Submetido'}\n                        </li>\n                      ))}\n                  </ul>\n                </div>\n              ))}\n            </section>\n          )}\n          {historicoFases.length > 0 && (\n            <section className=\"section\">\n              <h3>Histórico de Fases:</h3>\n              {historicoFases.map((fase, index) => (\n                <div key={index}>\n                  <h4>{fase.fase}</h4>\n                  <p>Classificados:</p>\n                  <ul>\n                    {fase.classificados.map((dupla, i) => (\n                      <li key={i}>{dupla.join(' e ')}</li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </section>\n          )}\n          {faseAtual === 'grupos' && (\n            <Button onClick={encerrarFaseGrupos}>\n              Encerrar Fase de Grupos\n            </Button>\n          )}\n          {faseAtual === 'finalizado' && (\n            <>\n              <p>O torneio foi finalizado. Parabéns aos vencedores!</p>\n              <h3>Ranking Final:</h3>\n              <ul>\n                {ranking.map((posição, index) => (\n                  <li key={index}>\n                    {posição.lugar}º Lugar:\n                    {Array.isArray(posição.dupla) ? posição.dupla.join(' e ') : posição.dupla || 'Desconhecido'}\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n        </section>\n      </main>\n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}