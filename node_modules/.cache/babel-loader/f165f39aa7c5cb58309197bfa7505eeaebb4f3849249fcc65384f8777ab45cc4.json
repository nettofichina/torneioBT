{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport { duplasEstatisticas } from './utils/torneioUtils';\nimport './App.css';\nimport { dividirGrupos, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [resultados, setResultados] = useState({});\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n\n  // Função para adicionar duplas\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  // Função para adicionar 8 duplas automaticamente\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  // Função para remover duplas\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  // Função para iniciar a fase eliminatória\n  const iniciarFaseEliminatoria = classificados => {\n    if (classificados.length === 4) {\n      // 4 duplas classificadas de 2 grupos\n      let jogosEliminatoria = [{\n        dupla1: classificados[0],\n        dupla2: classificados[3],\n        placar: '',\n        submetido: false,\n        jogoIndex: 0,\n        rodada: 1\n      },\n      // Semifinal 1\n      {\n        dupla1: classificados[1],\n        dupla2: classificados[2],\n        placar: '',\n        submetido: false,\n        jogoIndex: 1,\n        rodada: 1\n      },\n      // Semifinal 2\n      {\n        dupla1: ['Vencedor Jogo 1', ''],\n        dupla2: ['Vencedor Jogo 2', ''],\n        placar: '',\n        submetido: false,\n        jogoIndex: 2,\n        rodada: 2\n      } // Final\n      ];\n      setJogosEliminatoria(jogosEliminatoria);\n    } else {\n      console.error(\"Número inesperado de classificados.\");\n    }\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    console.log('Estado dos grupos antes de verificar:', grupos);\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      console.log('Classificados do grupo ', grupo.id, ':', classificadosGrupo); // Para debug\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados); // Garantir que esta linha está sendo chamada\n    }\n    console.log('Classificados para a fase eliminatória:', classificados); // Para debug\n  };\n  const atualizarEstatisticas = jogo => {\n    const {\n      dupla1,\n      dupla2,\n      placar\n    } = jogo;\n    const [set1, set2] = placar.split('-').map(Number);\n    const vencedor = set1 > set2 ? dupla1 : dupla2;\n    setResultados(prevResultados => {\n      var _duplasEstatisticas$d, _duplasEstatisticas$d2, _duplasEstatisticas$d3, _duplasEstatisticas$d4, _duplasEstatisticas$d5, _duplasEstatisticas$d6, _duplasEstatisticas$d7, _duplasEstatisticas$d8;\n      const updateStats = (dupla, isWin) => {\n        var _prevResultados$dupla, _prevResultados$dupla2, _prevResultados$dupla3, _prevResultados$dupla4, _prevResultados$dupla5, _prevResultados$dupla6;\n        const duplaKey = dupla.join(',');\n        return {\n          ...(prevResultados[duplaKey] || {\n            vitórias: 0,\n            derrotas: 0,\n            setsVencidos: 0,\n            setsPerdidos: 0\n          }),\n          vitórias: isWin ? (((_prevResultados$dupla = prevResultados[duplaKey]) === null || _prevResultados$dupla === void 0 ? void 0 : _prevResultados$dupla.vitórias) || 0) + 1 : ((_prevResultados$dupla2 = prevResultados[duplaKey]) === null || _prevResultados$dupla2 === void 0 ? void 0 : _prevResultados$dupla2.vitórias) || 0,\n          derrotas: isWin ? ((_prevResultados$dupla3 = prevResultados[duplaKey]) === null || _prevResultados$dupla3 === void 0 ? void 0 : _prevResultados$dupla3.derrotas) || 0 : (((_prevResultados$dupla4 = prevResultados[duplaKey]) === null || _prevResultados$dupla4 === void 0 ? void 0 : _prevResultados$dupla4.derrotas) || 0) + 1,\n          setsVencidos: (((_prevResultados$dupla5 = prevResultados[duplaKey]) === null || _prevResultados$dupla5 === void 0 ? void 0 : _prevResultados$dupla5.setsVencidos) || 0) + (isWin ? set1 : set2),\n          setsPerdidos: (((_prevResultados$dupla6 = prevResultados[duplaKey]) === null || _prevResultados$dupla6 === void 0 ? void 0 : _prevResultados$dupla6.setsPerdidos) || 0) + (isWin ? set2 : set1)\n        };\n      };\n\n      // Atualização para duplasEstatisticas\n      const isDupla1Win = vencedor === dupla1;\n      duplasEstatisticas[dupla1.join(',')] = {\n        ...(duplasEstatisticas[dupla1.join(',')] || {\n          pontos: 0,\n          setsVencidos: 0,\n          setsPerdidos: 0\n        }),\n        pontos: isDupla1Win ? (((_duplasEstatisticas$d = duplasEstatisticas[dupla1.join(',')]) === null || _duplasEstatisticas$d === void 0 ? void 0 : _duplasEstatisticas$d.pontos) || 0) + 1 : ((_duplasEstatisticas$d2 = duplasEstatisticas[dupla1.join(',')]) === null || _duplasEstatisticas$d2 === void 0 ? void 0 : _duplasEstatisticas$d2.pontos) || 0,\n        setsVencidos: (((_duplasEstatisticas$d3 = duplasEstatisticas[dupla1.join(',')]) === null || _duplasEstatisticas$d3 === void 0 ? void 0 : _duplasEstatisticas$d3.setsVencidos) || 0) + (isDupla1Win ? set1 : set2),\n        setsPerdidos: (((_duplasEstatisticas$d4 = duplasEstatisticas[dupla1.join(',')]) === null || _duplasEstatisticas$d4 === void 0 ? void 0 : _duplasEstatisticas$d4.setsPerdidos) || 0) + (isDupla1Win ? set2 : set1)\n      };\n      duplasEstatisticas[dupla2.join(',')] = {\n        ...(duplasEstatisticas[dupla2.join(',')] || {\n          pontos: 0,\n          setsVencidos: 0,\n          setsPerdidos: 0\n        }),\n        pontos: !isDupla1Win ? (((_duplasEstatisticas$d5 = duplasEstatisticas[dupla2.join(',')]) === null || _duplasEstatisticas$d5 === void 0 ? void 0 : _duplasEstatisticas$d5.pontos) || 0) + 1 : ((_duplasEstatisticas$d6 = duplasEstatisticas[dupla2.join(',')]) === null || _duplasEstatisticas$d6 === void 0 ? void 0 : _duplasEstatisticas$d6.pontos) || 0,\n        setsVencidos: (((_duplasEstatisticas$d7 = duplasEstatisticas[dupla2.join(',')]) === null || _duplasEstatisticas$d7 === void 0 ? void 0 : _duplasEstatisticas$d7.setsVencidos) || 0) + (!isDupla1Win ? set1 : set2),\n        setsPerdidos: (((_duplasEstatisticas$d8 = duplasEstatisticas[dupla2.join(',')]) === null || _duplasEstatisticas$d8 === void 0 ? void 0 : _duplasEstatisticas$d8.setsPerdidos) || 0) + (!isDupla1Win ? set2 : set1)\n      };\n      return {\n        ...prevResultados,\n        [dupla1.join(',')]: updateStats(dupla1, isDupla1Win),\n        [dupla2.join(',')]: updateStats(dupla2, !isDupla1Win)\n      };\n    });\n  };\n\n  // Função para determinar Vencedores\n  const determinarVencedores = () => {\n    if (jogosEliminatoria.length !== 1) {\n      console.error(\"Erro: Esperava-se um jogo final.\");\n      return;\n    }\n    const final = jogosEliminatoria[0];\n    const [set1, set2] = final.placar.split('-').map(Number);\n    const campeao = set1 > set2 ? final.dupla1 : final.dupla2;\n    const viceCampeao = campeao === final.dupla1 ? final.dupla2 : final.dupla1;\n\n    // Usar os resultados das semifinais armazenados para determinar terceiro e quarto lugar\n    const semifinalResults = resultados.semifinalResults;\n    const terceiroLugar = semifinalResults[0].placar.split('-')[0] < semifinalResults[0].placar.split('-')[1] ? semifinalResults[0].dupla1 : semifinalResults[0].dupla2;\n    const quartoLugar = semifinalResults[1].placar.split('-')[0] < semifinalResults[1].placar.split('-')[1] ? semifinalResults[1].dupla1 : semifinalResults[1].dupla2;\n    return {\n      primeiro: campeao,\n      segundo: viceCampeao,\n      terceiro: terceiroLugar,\n      quarto: quartoLugar\n    };\n  };\n\n  // Função para Encerrar Fase Eliminatória\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    // Verificar se é a última rodada (final)\n    const ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    const jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n    if (jogosUltimaRodada.length === 1) {\n      // Se só houver um jogo na última rodada, é a final\n      setFaseAtual('final');\n    } else {\n      // Lógica para avançar para a próxima rodada\n      setFaseAtual('eliminatória'); // Mantém a fase, mas ajusta a renderização para mostrar a próxima rodada\n    }\n  };\n\n  // Novamente, após a final, definir o ranking\n  const finalizarTorneio = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('O jogo da final deve ser submetido antes de finalizar o torneio.');\n      return;\n    }\n    const ranking = determinarVencedores();\n    setResultados(prev => ({\n      ...prev,\n      ranking\n    }));\n    setFaseAtual('finalizado');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          style: {\n            textTransform: 'uppercase'\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Adicionar Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: startTournament,\n            disabled: duplas.length < 3,\n            children: \"Come\\xE7ar Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas (Teste)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : faseAtual === 'terceiroLugar' ? 'Disputa pelo 3º Lugar' : faseAtual === 'final' ? 'Final' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onEncerrarFase: encerrarFaseGrupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this), (faseAtual === 'eliminatória' || faseAtual === 'terceiroLugar' || faseAtual === 'final') && /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          fase: faseAtual === 'final' ? 'Final' : faseAtual === 'terceiroLugar' ? 'Disputa pelo 3º Lugar' : 'Fase Eliminatória',\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === faseAtual || !jogo.fase) // Filtra jogos pela fase atual ou sem fase definida\n          ,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onUpdateJogos: jogosAtualizados => {\n            setJogosEliminatoria(prev => prev.map(jogo => jogosAtualizados.find(updated => updated.jogoIndex === jogo.jogoIndex) || jogo));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseEliminatoria,\n          disabled: jogosEliminatoria.some(jogo => !jogo.submetido),\n          children: \"Encerrar Semifinais\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), faseAtual === 'terceiroLugar' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            if (jogosEliminatoria.some(jogo => jogo.fase === 'terceiroLugar' && !jogo.submetido)) {\n              alert('O jogo pelo 3º lugar deve ser submetido antes de avançar para a final.');\n              return;\n            }\n            setFaseAtual('final');\n          },\n          disabled: jogosEliminatoria.some(jogo => jogo.fase === 'terceiroLugar' && !jogo.submetido),\n          children: \"Avan\\xE7ar para a Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: finalizarTorneio,\n          disabled: jogosEliminatoria.some(jogo => jogo.fase === 'final' && !jogo.submetido),\n          children: \"Finalizar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        style: {\n          display: faseAtual === 'finalizado' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Resultado Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: resultados.ranking && Object.entries(resultados.ranking).map(([posicao, dupla]) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posicao === 'primeiro' ? 'Primeiro Lugar' : posicao === 'segundo' ? 'Segundo Lugar' : posicao === 'terceiro' ? 'Terceiro Lugar' : posicao === 'quarto' ? 'Quarto Lugar' : '', \": \", dupla.join(' e ')]\n          }, posicao, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Eodwj86Rt5WIa2v/KdgEuE0fYn0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","duplasEstatisticas","dividirGrupos","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","resultados","setResultados","console","log","addDupla","dupla","some","d","includes","prevDuplas","alert","add8Duplas","newDuplas","i","push","removeDupla","index","filter","_","startTournament","length","gruposCriados","sort","Math","random","iniciarFaseEliminatoria","classificados","dupla1","dupla2","placar","submetido","jogoIndex","rodada","error","encerrarFaseGrupos","grupo","jogos","jogo","forEach","classificadosGrupo","id","slice","join","atualizarEstatisticas","set1","set2","split","map","Number","vencedor","prevResultados","_duplasEstatisticas$d","_duplasEstatisticas$d2","_duplasEstatisticas$d3","_duplasEstatisticas$d4","_duplasEstatisticas$d5","_duplasEstatisticas$d6","_duplasEstatisticas$d7","_duplasEstatisticas$d8","updateStats","isWin","_prevResultados$dupla","_prevResultados$dupla2","_prevResultados$dupla3","_prevResultados$dupla4","_prevResultados$dupla5","_prevResultados$dupla6","duplaKey","vitórias","derrotas","setsVencidos","setsPerdidos","isDupla1Win","pontos","determinarVencedores","final","campeao","viceCampeao","semifinalResults","terceiroLugar","quartoLugar","primeiro","segundo","terceiro","quarto","encerrarFaseEliminatoria","ultimaRodada","max","jogosUltimaRodada","finalizarTorneio","ranking","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","style","textTransform","required","onAddDupla","onRemoveDupla","onClick","disabled","display","onAtualizarEstatisticas","onEncerrarFase","onUpdateGroups","fase","onUpdateJogos","jogosAtualizados","find","updated","Object","entries","posicao","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport { duplasEstatisticas } from './utils/torneioUtils';\nimport './App.css';\nimport {\n  dividirGrupos,\n  classificarDuplasPorDesempate\n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [resultados, setResultados] = useState({});\n\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n\n\n  // Função para adicionar duplas\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  // Função para adicionar 8 duplas automaticamente\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  // Função para remover duplas\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  // Função para iniciar a fase eliminatória\n  const iniciarFaseEliminatoria = (classificados) => {\n    if (classificados.length === 4) { // 4 duplas classificadas de 2 grupos\n      let jogosEliminatoria = [\n        { dupla1: classificados[0], dupla2: classificados[3], placar: '', submetido: false, jogoIndex: 0, rodada: 1 }, // Semifinal 1\n        { dupla1: classificados[1], dupla2: classificados[2], placar: '', submetido: false, jogoIndex: 1, rodada: 1 }, // Semifinal 2\n        { dupla1: ['Vencedor Jogo 1', ''], dupla2: ['Vencedor Jogo 2', ''], placar: '', submetido: false, jogoIndex: 2, rodada: 2 } // Final\n      ];\n      setJogosEliminatoria(jogosEliminatoria);\n    } else {\n      console.error(\"Número inesperado de classificados.\");\n    }\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    console.log('Estado dos grupos antes de verificar:', grupos);\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      console.log('Classificados do grupo ', grupo.id, ':', classificadosGrupo); // Para debug\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n\n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados); // Garantir que esta linha está sendo chamada\n    }\n    console.log('Classificados para a fase eliminatória:', classificados); // Para debug\n  };\n\n  const atualizarEstatisticas = (jogo) => {\n    const { dupla1, dupla2, placar } = jogo;\n    const [set1, set2] = placar.split('-').map(Number);\n    const vencedor = set1 > set2 ? dupla1 : dupla2;\n  \n    setResultados(prevResultados => {\n      const updateStats = (dupla, isWin) => {\n        const duplaKey = dupla.join(',');\n        return {\n          ...(prevResultados[duplaKey] || { vitórias: 0, derrotas: 0, setsVencidos: 0, setsPerdidos: 0 }),\n          vitórias: isWin ? (prevResultados[duplaKey]?.vitórias || 0) + 1 : (prevResultados[duplaKey]?.vitórias || 0),\n          derrotas: isWin ? prevResultados[duplaKey]?.derrotas || 0 : (prevResultados[duplaKey]?.derrotas || 0) + 1,\n          setsVencidos: (prevResultados[duplaKey]?.setsVencidos || 0) + (isWin ? set1 : set2),\n          setsPerdidos: (prevResultados[duplaKey]?.setsPerdidos || 0) + (isWin ? set2 : set1)\n        };\n      };\n  \n      // Atualização para duplasEstatisticas\n      const isDupla1Win = vencedor === dupla1;\n      duplasEstatisticas[dupla1.join(',')] = {\n        ...(duplasEstatisticas[dupla1.join(',')] || { pontos: 0, setsVencidos: 0, setsPerdidos: 0 }),\n        pontos: isDupla1Win ? (duplasEstatisticas[dupla1.join(',')]?.pontos || 0) + 1 : (duplasEstatisticas[dupla1.join(',')]?.pontos || 0),\n        setsVencidos: (duplasEstatisticas[dupla1.join(',')]?.setsVencidos || 0) + (isDupla1Win ? set1 : set2),\n        setsPerdidos: (duplasEstatisticas[dupla1.join(',')]?.setsPerdidos || 0) + (isDupla1Win ? set2 : set1)\n      };\n      duplasEstatisticas[dupla2.join(',')] = {\n        ...(duplasEstatisticas[dupla2.join(',')] || { pontos: 0, setsVencidos: 0, setsPerdidos: 0 }),\n        pontos: !isDupla1Win ? (duplasEstatisticas[dupla2.join(',')]?.pontos || 0) + 1 : (duplasEstatisticas[dupla2.join(',')]?.pontos || 0),\n        setsVencidos: (duplasEstatisticas[dupla2.join(',')]?.setsVencidos || 0) + (!isDupla1Win ? set1 : set2),\n        setsPerdidos: (duplasEstatisticas[dupla2.join(',')]?.setsPerdidos || 0) + (!isDupla1Win ? set2 : set1)\n      };\n  \n      return {\n        ...prevResultados,\n        [dupla1.join(',')]: updateStats(dupla1, isDupla1Win),\n        [dupla2.join(',')]: updateStats(dupla2, !isDupla1Win)\n      };\n    });\n  };\n\n  // Função para determinar Vencedores\n  const determinarVencedores = () => {\n    if (jogosEliminatoria.length !== 1) {\n      console.error(\"Erro: Esperava-se um jogo final.\");\n      return;\n    }\n\n    const final = jogosEliminatoria[0];\n    const [set1, set2] = final.placar.split('-').map(Number);\n    const campeao = set1 > set2 ? final.dupla1 : final.dupla2;\n    const viceCampeao = campeao === final.dupla1 ? final.dupla2 : final.dupla1;\n\n    // Usar os resultados das semifinais armazenados para determinar terceiro e quarto lugar\n    const semifinalResults = resultados.semifinalResults;\n    const terceiroLugar = semifinalResults[0].placar.split('-')[0] < semifinalResults[0].placar.split('-')[1] ? semifinalResults[0].dupla1 : semifinalResults[0].dupla2;\n    const quartoLugar = semifinalResults[1].placar.split('-')[0] < semifinalResults[1].placar.split('-')[1] ? semifinalResults[1].dupla1 : semifinalResults[1].dupla2;\n\n    return {\n      primeiro: campeao,\n      segundo: viceCampeao,\n      terceiro: terceiroLugar,\n      quarto: quartoLugar\n    };\n  };\n\n  // Função para Encerrar Fase Eliminatória\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    // Verificar se é a última rodada (final)\n    const ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    const jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n\n    if (jogosUltimaRodada.length === 1) { // Se só houver um jogo na última rodada, é a final\n      setFaseAtual('final');\n    } else {\n      // Lógica para avançar para a próxima rodada\n      setFaseAtual('eliminatória'); // Mantém a fase, mas ajusta a renderização para mostrar a próxima rodada\n    }\n  };\n\n  // Novamente, após a final, definir o ranking\n  const finalizarTorneio = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('O jogo da final deve ser submetido antes de finalizar o torneio.');\n      return;\n    }\n    const ranking = determinarVencedores();\n    setResultados(prev => ({ ...prev, ranking }));\n    setFaseAtual('finalizado');\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n\n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" style={{ textTransform: 'uppercase' }} required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n\n        <section className=\"section\">\n          <h2>Adicionar Duplas</h2>\n          {faseAtual === 'duplas' &&\n            <>\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n              <Button\n                onClick={startTournament}\n                disabled={duplas.length < 3}>\n                Começar Torneio\n              </Button>\n              <Button onClick={add8Duplas}>Adicionar 8 Duplas (Teste)</Button>\n            </>\n          }\n        </section>\n\n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">{faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' :\n            faseAtual === 'terceiroLugar' ? 'Disputa pelo 3º Lugar' :\n              faseAtual === 'final' ? 'Final' : 'Torneio Finalizado'}</h3>\n          {faseAtual === 'grupos' &&\n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onEncerrarFase={encerrarFaseGrupos} onUpdateGroups={setGrupos} />\n          }\n          {(faseAtual === 'eliminatória' || faseAtual === 'terceiroLugar' || faseAtual === 'final') &&\n            <FaseEliminatoria\n              fase={faseAtual === 'final' ? 'Final' : faseAtual === 'terceiroLugar' ? 'Disputa pelo 3º Lugar' : 'Fase Eliminatória'}\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === faseAtual || !jogo.fase)} // Filtra jogos pela fase atual ou sem fase definida\n              onAtualizarEstatisticas={atualizarEstatisticas}\n              onUpdateJogos={(jogosAtualizados) => {\n                setJogosEliminatoria(prev => prev.map(jogo =>\n                  jogosAtualizados.find(updated => updated.jogoIndex === jogo.jogoIndex) || jogo\n                ));\n              }}\n            />\n          }\n          {faseAtual === 'grupos' &&\n            <Button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</Button>\n          }\n          {faseAtual === 'eliminatória' &&\n            <Button\n              onClick={encerrarFaseEliminatoria}\n              disabled={jogosEliminatoria.some(jogo => !jogo.submetido)}\n            >\n              Encerrar Semifinais\n            </Button>\n          }\n          {faseAtual === 'terceiroLugar' &&\n            <Button\n              onClick={() => {\n                if (jogosEliminatoria.some(jogo => jogo.fase === 'terceiroLugar' && !jogo.submetido)) {\n                  alert('O jogo pelo 3º lugar deve ser submetido antes de avançar para a final.');\n                  return;\n                }\n                setFaseAtual('final');\n              }}\n              disabled={jogosEliminatoria.some(jogo => jogo.fase === 'terceiroLugar' && !jogo.submetido)}\n            >\n              Avançar para a Final\n            </Button>\n          }\n          {faseAtual === 'final' &&\n            <Button\n              onClick={finalizarTorneio}\n              disabled={jogosEliminatoria.some(jogo => jogo.fase === 'final' && !jogo.submetido)}\n            >\n              Finalizar Torneio\n            </Button>\n          }\n        </section>\n\n        {/* Adicionando a seção de resultados finais */}\n        <section className=\"section\" style={{ display: faseAtual === 'finalizado' ? 'block' : 'none' }}>\n          <h2>Resultado Final</h2>\n          <ul>\n            {resultados.ranking && Object.entries(resultados.ranking).map(([posicao, dupla]) => (\n              <li key={posicao}>\n                {posicao === 'primeiro' ? 'Primeiro Lugar' :\n                  posicao === 'segundo' ? 'Segundo Lugar' :\n                    posicao === 'terceiro' ? 'Terceiro Lugar' :\n                      posicao === 'quarto' ? 'Quarto Lugar' : ''}: {dupla.join(' e ')}\n              </li>\n            ))}\n          </ul>\n        </section>\n      </main>\n\n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}