{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport personAddIcon from './assets/icons/person_add.svg';\nimport groupRemoveIcon from './assets/icons/group_remove.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({});\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(null);\n  const [nomeTorneio, setNomeTorneio] = useState('');\n  const [dataInicio, setDataInicio] = useState('');\n  const [horaInicio, setHoraInicio] = useState('');\n  useEffect(() => {}, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto);\n    setDataCriacaoTorneio(dataTorneio);\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2)).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1]));\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => duplasUnicas.some(d => d.join('') === jogo.dupla1.join('') && duplasUnicas.some(e => e.join('') === jogo.dupla2.join(''))));\n      const resultados = duplasUnicas.reduce((acc, dupla) => {\n        acc[dupla.join('')] = {\n          dupla,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          setsVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        return acc;\n      }, {});\n      jogosClassificados.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (resultados[chave1] && resultados[chave2]) {\n          resultados[chave1].jogos += 1;\n          resultados[chave2].jogos += 1;\n          if (g1 > g2) {\n            resultados[chave1].pontos += 5;\n            resultados[chave1].jogosVencidos += 1;\n            resultados[chave1].setsVencidos += 1;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n            resultados[chave2].pontos += 2;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n          } else {\n            resultados[chave2].pontos += 5;\n            resultados[chave2].jogosVencidos += 1;\n            resultados[chave2].setsVencidos += 1;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n            resultados[chave1].pontos += 2;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n          }\n        }\n      });\n      setHistoricoDuplas(resultados);\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      if (duplas.length <= 11) {\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n        const jogosQuartas = [{\n          dupla1: [...duplasQuartas[0]],\n          dupla2: [...duplasQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }, {\n          dupla1: [...duplasQuartas[2]],\n          dupla2: [...duplasQuartas[3]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }];\n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n        setJogosEliminatoria(jogosOitavas);\n        setDuplasBye([]);\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar,\n        submetido: true\n      } : j);\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        [chave1, chave2].forEach(chave => {\n          if (!novoHistorico[chave]) novoHistorico[chave] = {\n            dupla: chave.split('&').map(p => p.trim()),\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            setsVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0\n          };\n        });\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].setsVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].setsVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    setJogosEliminatoria(prev => [...prev, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n      const semifinalMatches = [{\n        dupla1: [...duplasBye[0]],\n        dupla2: [...vencedoresQuartas[0]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: [...duplasBye[1]],\n        dupla2: [...vencedoresQuartas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      setJogosEliminatoria(prev => [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches]);\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      return `${diasSemana[data.getDay()]}, ${String(data.getDate()).padStart(2, '0')}${meses[data.getMonth()]} - ${String(data.getHours()).padStart(2, '0')}:${String(data.getMinutes()).padStart(2, '0')}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => j.placar && (j.dupla1.join('') === dupla.join('') ? +j.placar.split('-')[0] > +j.placar.split('-')[1] : +j.placar.split('-')[1] > +j.placar.split('-')[0])).length;\n            const jogosPerdidos = jogosDupla.filter(j => j.placar && (j.dupla1.join('') === dupla.join('') ? +j.placar.split('-')[0] < +j.placar.split('-')[1] : +j.placar.split('-')[1] < +j.placar.split('-')[0])).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => acc + (j.placar ? j.dupla1.join('') === dupla.join('') ? +j.placar.split('-')[0] : +j.placar.split('-')[1] : 0), 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => acc + (j.placar ? j.dupla1.join('') === dupla.join('') ? +j.placar.split('-')[1] : +j.placar.split('-')[0] : 0), 0);\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = (jogo.placar || '0-0').split('-').map(Number);\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatarDataHora(dataCriacaoTorneio, idx * 30)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 406,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const add8Duplas = () => {\n    const newDuplas = Array.from({\n      length: 8\n    }, (_, i) => [`JOGADOR${i * 2 + 1}`, `JOGADOR${i * 2 + 2}`]);\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = Array.from({\n      length: 27\n    }, (_, i) => [`Jogador${i * 2 + 1}`, `Jogador${i * 2 + 2}`]);\n    setDuplas(newDuplas);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: btConnectLogo,\n        alt: \"btConnect Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: nomeTorneio,\n              onChange: e => setNomeTorneio(e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: dataInicio,\n              onChange: e => setDataInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: horaInicio,\n              onChange: e => setHoraInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: tournamentsIcon,\n                alt: \"Tournament Icon\",\n                className: \"button-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 19\n              }, this), \"Iniciar Torneio\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add27Duplas,\n              children: \"Adicionar 27 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this), duplas.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"informe-jogadores\",\n            children: \"Informe os jogadores\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 15\n          }, this), grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 42\n        }, this), jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ranking.map((posição, index) => {\n              let medalha = '';\n              let color = '#000'; // Cor padrão para texto (preto)\n\n              if (posição.lugar === 1) {\n                medalha = '🥇';\n                color = 'gold';\n              } else if (posição.lugar === 2) {\n                medalha = '🥈';\n                color = 'silver';\n              } else if (posição.lugar === 3) {\n                medalha = '🥉';\n                color = 'brown'; // Cor próxima ao bronze\n              }\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color\n                  },\n                  children: [medalha, \" \", posição.lugar, \"\\xBA Lugar\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 552,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: posição.dupla.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 553,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"btConnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xa+QbAJ78cWlCefFgZhZPJUvZRw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","gameDay","btConnectLogo","tournamentsIcon","personAddIcon","groupRemoveIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","duplasBye","setDuplasBye","historicoDuplas","setHistoricoDuplas","dataCriacaoTorneio","setDataCriacaoTorneio","nomeTorneio","setNomeTorneio","dataInicio","setDataInicio","horaInicio","setHoraInicio","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","ano","mes","dia","split","map","Number","hora","minuto","dataTorneio","Date","duplasSorteadas","sort","Math","random","gruposCriados","gruposComJogos","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","rankingGrupo1","rankingGrupo2","semifinalMatches","dupla1","dupla2","placar","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","e","resultados","reduce","acc","pontos","jogosVencidos","setsVencidos","gamesVencidos","gamesPerdidos","forEach","g1","g2","chave1","chave2","rankingGeral","duplasByeLocal","duplasQuartas","console","error","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","prevJogos","j","updatedJogos","prev","novoHistorico","chave","p","trim","iniciarFinal","semifinalGames","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","log","novaRodada","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","setMinutes","getMinutes","diasSemana","meses","getDay","String","getDate","padStart","getMonth","getHours","className","children","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsPerdidos","classificado","idx","vencedor","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","add8Duplas","newDuplas","Array","from","add27Duplas","src","alt","type","value","onChange","target","toUpperCase","placeholder","onClick","onAddDupla","onRemoveDupla","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","medalha","color","style","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport personAddIcon from './assets/icons/person_add.svg';\nimport groupRemoveIcon from './assets/icons/group_remove.svg';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({});\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(null);\n  const [nomeTorneio, setNomeTorneio] = useState('');\n  const [dataInicio, setDataInicio] = useState('');\n  const [horaInicio, setHoraInicio] = useState('');\n\n  useEffect(() => {}, [duplas, grupos, jogosEliminatoria]);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto);\n    setDataCriacaoTorneio(dataTorneio);\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2)).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1]));\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => duplasUnicas.some(d => d.join('') === jogo.dupla1.join('') && duplasUnicas.some(e => e.join('') === jogo.dupla2.join(''))));\n\n      const resultados = duplasUnicas.reduce((acc, dupla) => {\n        acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        return acc;\n      }, {});\n      jogosClassificados.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (resultados[chave1] && resultados[chave2]) {\n          resultados[chave1].jogos += 1;\n          resultados[chave2].jogos += 1;\n          if (g1 > g2) {\n            resultados[chave1].pontos += 5;\n            resultados[chave1].jogosVencidos += 1;\n            resultados[chave1].setsVencidos += 1;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n            resultados[chave2].pontos += 2;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n          } else {\n            resultados[chave2].pontos += 5;\n            resultados[chave2].jogosVencidos += 1;\n            resultados[chave2].setsVencidos += 1;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n            resultados[chave1].pontos += 2;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n          }\n        }\n      });\n      setHistoricoDuplas(resultados);\n\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n\n      if (duplas.length <= 11) {\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n\n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n\n        const jogosQuartas = [\n          { dupla1: [...duplasQuartas[0]], dupla2: [...duplasQuartas[1]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 },\n          { dupla1: [...duplasQuartas[2]], dupla2: [...duplasQuartas[3]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 }\n        ];\n\n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({ dupla1: [...top16[i]], dupla2: [...top16[i + 1]], placar: '', submetido: false, fase: 'Oitavas de Final', rodada: 1 });\n        }\n        setJogosEliminatoria(jogosOitavas);\n        setDuplasBye([]);\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? { ...j, placar: 'BYE', submetido: true } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? { ...j, placar, submetido: true } : j);\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        [chave1, chave2].forEach(chave => {\n          if (!novoHistorico[chave]) novoHistorico[chave] = { dupla: chave.split('&').map(p => p.trim()), pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        });\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].setsVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].setsVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n\n    setJogosEliminatoria(prev => [\n      ...prev,\n      { dupla1: finalistas[0], dupla2: finalistas[1], placar: '', submetido: false, fase: 'Final', rodada: Math.max(...prev.map(j => j.rodada)) + 1 },\n      { dupla1: perdedores[0], dupla2: perdedores[1], placar: '', submetido: false, fase: 'Disputa 3º Lugar', rodada: Math.max(...prev.map(j => j.rodada)) + 1 }\n    ]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? { ...j, placar, submetido: true } : j));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n\n      const semifinalMatches = [\n        { dupla1: [...duplasBye[0]], dupla2: [...vencedoresQuartas[0]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n        { dupla1: [...duplasBye[1]], dupla2: [...vencedoresQuartas[1]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n      ];\n      setJogosEliminatoria(prev => [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches]);\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([{ lugar: 1, dupla: vencedorFinal }, { lugar: 2, dupla: perdedorFinal }, { lugar: 3, dupla: terceiro }, { lugar: 4, dupla: quarto }]);\n    setFaseAtual('finalizado');\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      return `${diasSemana[data.getDay()]}, ${String(data.getDate()).padStart(2, '0')}${meses[data.getMonth()]} - ${String(data.getHours()).padStart(2, '0')}:${String(data.getMinutes()).padStart(2, '0')}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n              const jogosVencidos = jogosDupla.filter(j => j.placar && (j.dupla1.join('') === dupla.join('') ? +j.placar.split('-')[0] > +j.placar.split('-')[1] : +j.placar.split('-')[1] > +j.placar.split('-')[0])).length;\n              const jogosPerdidos = jogosDupla.filter(j => j.placar && (j.dupla1.join('') === dupla.join('') ? +j.placar.split('-')[0] < +j.placar.split('-')[1] : +j.placar.split('-')[1] < +j.placar.split('-')[0])).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => acc + (j.placar ? (j.dupla1.join('') === dupla.join('') ? +j.placar.split('-')[0] : +j.placar.split('-')[1]) : 0), 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => acc + (j.placar ? (j.dupla1.join('') === dupla.join('') ? +j.placar.split('-')[1] : +j.placar.split('-')[0]) : 0), 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = (jogo.placar || '0-0').split('-').map(Number);\n              const vencedor = jogo.placar ? (g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate') : 'A definir';\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{formatarDataHora(dataCriacaoTorneio, idx * 30)}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor = jogo.placar && jogo.submetido\n                  ? (parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & '))\n                  : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  const add8Duplas = () => {\n    const newDuplas = Array.from({ length: 8 }, (_, i) => [`JOGADOR${i * 2 + 1}`, `JOGADOR${i * 2 + 2}`]);\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = Array.from({ length: 27 }, (_, i) => [`Jogador${i * 2 + 1}`, `Jogador${i * 2 + 2}`]);\n    setDuplas(newDuplas);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={nomeTorneio}\n                  onChange={(e) => setNomeTorneio(e.target.value.toUpperCase())}\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={dataInicio}\n                  onChange={(e) => setDataInicio(e.target.value)}\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={horaInicio}\n                  onChange={(e) => setHoraInicio(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button className=\"iniciar-torneio\" onClick={startTournament}>\n                  <img src={tournamentsIcon} alt=\"Tournament Icon\" className=\"button-icon\" />\n                  Iniciar Torneio\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n                <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n              </div>\n              {duplas.length === 0 && <p className=\"informe-jogadores\">Informe os jogadores</p>}\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {grupos.map(grupo => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado && <p>A disputa pelo 3º lugar está configurada!</p>}\n            {jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>JOGADORES</th>\n                </tr>\n              </thead>\n              <tbody>\n                {ranking.map((posição, index) => {\n                  let medalha = '';\n                  let color = '#000'; // Cor padrão para texto (preto)\n\n                  if (posição.lugar === 1) {\n                    medalha = '🥇';\n                    color = 'gold';\n                  } else if (posição.lugar === 2) {\n                    medalha = '🥈';\n                    color = 'silver';\n                  } else if (posição.lugar === 3) {\n                    medalha = '🥉';\n                    color = 'brown'; // Cor próxima ao bronze\n                  }\n\n                  return (\n                    <tr key={index}>\n                      <td style={{ color }}>{medalha} {posição.lugar}º Lugar</td>\n                      <td>{posição.dupla.join(' & ')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </>\n        )}\n      </main>\n      <footer>\n        <p>btConnect</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}