{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport './App.css';\nimport { dividirGrupos, atualizarEstatisticas, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado'); // Ou qualquer outro estado final\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  // Função para iniciar a fase eliminatória\n  const iniciarFaseEliminatoria = classificados => {\n    let jogosEliminatoria = [];\n    while (classificados.length > 1) {\n      let novosJogos = [];\n      for (let i = 0; i < classificados.length; i += 2) {\n        novosJogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['Bye', ''],\n          // Se for um número ímpar, adiciona 'Bye'\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length\n        });\n      }\n      jogosEliminatoria.push(...novosJogos);\n      classificados = novosJogos.map(jogo => jogo.dupla1); // Apenas dupla1 avança (ou dupla2 se houver 'Bye')\n    }\n    setJogosEliminatoria(jogosEliminatoria);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para adicionar 8 duplas automaticamente\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          style: {\n            textTransform: 'uppercase'\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Adicionar Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: startTournament,\n            disabled: duplas.length < 3,\n            children: \"Come\\xE7ar Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas (Teste)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : 'Fase Eliminatória'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          fase: \"Fase Eliminat\\xF3ria\",\n          jogos: jogosEliminatoria,\n          onAtualizarEstatisticas: atualizarEstatisticas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+Sa+9zmztxmwsaOWZuSwOiPF3jk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","dividirGrupos","atualizarEstatisticas","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","encerrarFaseGrupos","grupo","jogos","jogo","submetido","classificados","forEach","classificadosGrupo","push","slice","join","iniciarFaseEliminatoria","novosJogos","dupla1","dupla2","placar","jogoIndex","map","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","placeholder","style","textTransform","required","onAddDupla","onRemoveDupla","onClick","disabled","display","onAtualizarEstatisticas","fase","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport './App.css';\nimport { \n  dividirGrupos, \n  atualizarEstatisticas,\n  classificarDuplasPorDesempate \n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n\n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado'); // Ou qualquer outro estado final\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  // Função para iniciar a fase eliminatória\n  const iniciarFaseEliminatoria = (classificados) => {\n    let jogosEliminatoria = [];\n\n    while (classificados.length > 1) {\n      let novosJogos = [];\n      for (let i = 0; i < classificados.length; i += 2) {\n        novosJogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['Bye', ''], // Se for um número ímpar, adiciona 'Bye'\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length\n        });\n      }\n      jogosEliminatoria.push(...novosJogos);\n      classificados = novosJogos.map(jogo => jogo.dupla1); // Apenas dupla1 avança (ou dupla2 se houver 'Bye')\n    }\n\n    setJogosEliminatoria(jogosEliminatoria);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para adicionar 8 duplas automaticamente\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n\n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" style={{ textTransform: 'uppercase' }} required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n\n        <section className=\"section\">\n          <h2>Adicionar Duplas</h2>\n          {faseAtual === 'duplas' && \n            <>\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n              <Button \n                onClick={startTournament} \n                disabled={duplas.length < 3}>\n                Começar Torneio\n              </Button>\n              <Button onClick={add8Duplas}>Adicionar 8 Duplas (Teste)</Button>\n            </>\n          }\n        </section>\n\n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">{faseAtual === 'grupos' ? 'Fase de Grupos' : 'Fase Eliminatória'}</h3>\n          {faseAtual === 'grupos' && \n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} />\n          }\n          {faseAtual === 'eliminatória' && \n            <FaseEliminatoria fase=\"Fase Eliminatória\" jogos={jogosEliminatoria} onAtualizarEstatisticas={atualizarEstatisticas} />\n          }\n          {faseAtual === 'grupos' && \n            <Button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</Button>\n          }\n        </section>\n      </main>\n\n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}