{"ast":null,"code":"import _objectSpread from\"C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import DuplasList from'./components/Duplas/DuplasList';import FaseDeGrupos from'./components/Torneio/FaseDeGrupos';import FaseEliminatoria from'./components/Torneio/FaseEliminatoria';import{avancarRodadaEliminatoria}from'./utils/torneioUtils';import FaseFinal from'./components/Torneio/FaseFinal';import'./App.css';import{dividirGrupos,criarJogosParaGrupo,classificarDuplasPorDesempate}from'./utils/torneioUtils';import gameDay from'./assets/img/game-day.svg';// Importa a imagem SVG\nimport btConnectLogo from'./assets/img/btConnect.png';// Importa btConnect\nimport tournamentsIcon from'./assets/icons/tournaments.svg';// Ícone começar torneio\nimport{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[duplas,setDuplas]=useState(()=>{const savedDuplas=localStorage.getItem('torneioDuplas');return savedDuplas?JSON.parse(savedDuplas):[];});const[faseAtual,setFaseAtual]=useState(()=>localStorage.getItem('torneioFaseAtual')||'duplas');const[grupos,setGrupos]=useState(()=>{const savedGrupos=localStorage.getItem('torneioGrupos');return savedGrupos?JSON.parse(savedGrupos):[];});const[jogosEliminatoria,setJogosEliminatoria]=useState(()=>{const savedJogos=localStorage.getItem('torneioJogosEliminatoria');return savedJogos?JSON.parse(savedJogos):[];});const[finalConfigurada,setFinalConfigurada]=useState(()=>localStorage.getItem('torneioFinalConfigurada')==='true');const[terceiroLugarConfigurado,setTerceiroLugarConfigurado]=useState(()=>localStorage.getItem('torneioTerceiroLugarConfigurado')==='true');const[ranking,setRanking]=useState(()=>{const savedRanking=localStorage.getItem('torneioRanking');return savedRanking?JSON.parse(savedRanking):[];});const[duplasBye,setDuplasBye]=useState(()=>{const savedDuplasBye=localStorage.getItem('torneioDuplasBye');return savedDuplasBye?JSON.parse(savedDuplasBye):[];});const[historicoDuplas,setHistoricoDuplas]=useState(()=>{const savedHistorico=localStorage.getItem('torneioHistoricoDuplas');return savedHistorico?JSON.parse(savedHistorico):{};});const[dataCriacaoTorneio,setDataCriacaoTorneio]=useState(()=>localStorage.getItem('torneioDataCriacao')||null);const[nomeTorneio,setNomeTorneio]=useState(()=>localStorage.getItem('torneioNome')||'');const[dataInicio,setDataInicio]=useState(()=>localStorage.getItem('torneioDataInicio')||'');const[horaInicio,setHoraInicio]=useState(()=>localStorage.getItem('torneioHoraInicio')||'');// Salvar estado no localStorage sempre que houver alterações\nuseEffect(()=>{localStorage.setItem('torneioDuplas',JSON.stringify(duplas));localStorage.setItem('torneioFaseAtual',faseAtual);localStorage.setItem('torneioGrupos',JSON.stringify(grupos));localStorage.setItem('torneioJogosEliminatoria',JSON.stringify(jogosEliminatoria));localStorage.setItem('torneioFinalConfigurada',finalConfigurada);localStorage.setItem('torneioTerceiroLugarConfigurado',terceiroLugarConfigurado);localStorage.setItem('torneioRanking',JSON.stringify(ranking));localStorage.setItem('torneioDuplasBye',JSON.stringify(duplasBye));localStorage.setItem('torneioHistoricoDuplas',JSON.stringify(historicoDuplas));localStorage.setItem('torneioDataCriacao',dataCriacaoTorneio||'');localStorage.setItem('torneioNome',nomeTorneio);localStorage.setItem('torneioDataInicio',dataInicio);localStorage.setItem('torneioHoraInicio',horaInicio);},[duplas,faseAtual,grupos,jogosEliminatoria,finalConfigurada,terceiroLugarConfigurado,ranking,duplasBye,historicoDuplas,dataCriacaoTorneio,nomeTorneio,dataInicio,horaInicio]);const addDupla=dupla=>{if(!duplas.some(d=>d.includes(dupla[0])||d.includes(dupla[1]))){setDuplas(prevDuplas=>[...prevDuplas,dupla]);}else{alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');}};const removeDupla=index=>{setDuplas(duplas.filter((_,i)=>i!==index));};const startTournament=()=>{if(duplas.length<3){alert('É necessário pelo menos 3 duplas para começar o torneio.');return;}if(!nomeTorneio||!dataInicio||!horaInicio){alert('Por favor, preencha o nome, data e hora de início do torneio.');return;}const[ano,mes,dia]=dataInicio.split('-').map(Number);const[hora,minuto]=horaInicio.split(':').map(Number);const dataTorneio=new Date(ano,mes-1,dia,hora,minuto);setDataCriacaoTorneio(dataTorneio.toISOString());// Armazenar como string ISO\nconst duplasSorteadas=[...duplas].sort(()=>Math.random()-0.5);const gruposCriados=dividirGrupos(duplasSorteadas);const gruposComJogos=gruposCriados.map(grupo=>_objectSpread(_objectSpread({},grupo),{},{jogos:criarJogosParaGrupo(grupo.duplas,grupo.id)}));setGrupos(gruposComJogos);// Inicializar historicoDuplas com todas as duplas\nconst historicoInicial=duplasSorteadas.reduce((acc,dupla)=>{acc[dupla.join('')]={dupla,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};return acc;},{});setHistoricoDuplas(historicoInicial);console.log('Histórico Inicial:',historicoInicial);setFaseAtual('grupos');};const encerrarFaseGrupos=()=>{if(grupos.some(grupo=>grupo.jogos.some(jogo=>!jogo.submetido))){alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');return;}const todosOsJogos=grupos.flatMap(grupo=>grupo.jogos);setHistoricoDuplas(prev=>{const novoHistorico=_objectSpread({},prev);todosOsJogos.forEach(jogo=>{const[g1,g2]=jogo.placar.split('-').map(Number);const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!novoHistorico[chave1])novoHistorico[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};if(!novoHistorico[chave2])novoHistorico[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};novoHistorico[chave1].jogos+=1;novoHistorico[chave2].jogos+=1;if(g1>g2){novoHistorico[chave1].pontos+=5;novoHistorico[chave1].jogosVencidos+=1;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;novoHistorico[chave2].pontos+=2;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;}else{novoHistorico[chave2].pontos+=5;novoHistorico[chave2].jogosVencidos+=1;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;novoHistorico[chave1].pontos+=2;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;}});console.log('Histórico após Fase de Grupos:',novoHistorico);console.log('Total de jogos registrados na fase de grupos:',todosOsJogos.length);return novoHistorico;});if(duplas.length<=5){const todosOsJogos=grupos.flatMap(grupo=>grupo.jogos);const classificados=classificarDuplasPorDesempate(duplas,todosOsJogos);alert(\"Campe\\xE3o: \".concat(classificados[0].join(' e ')));setFaseAtual('finalizado');}else if(duplas.length===10){const rankingGrupo1=classificarDuplasPorDesempate(grupos[0].duplas,grupos[0].jogos);const rankingGrupo2=classificarDuplasPorDesempate(grupos[1].duplas,grupos[1].jogos);const semifinalMatches=[{dupla1:rankingGrupo1[0],dupla2:rankingGrupo2[1],placar:'',submetido:false,fase:'Semifinal',rodada:1},{dupla1:rankingGrupo2[0],dupla2:rankingGrupo1[1],placar:'',submetido:false,fase:'Semifinal',rodada:1}];setJogosEliminatoria(semifinalMatches);setFaseAtual('eliminatória');}else if(duplas.length<=8){const rankingGrupo1=classificarDuplasPorDesempate(grupos[0].duplas,grupos[0].jogos);const rankingGrupo2=classificarDuplasPorDesempate(grupos[1].duplas,grupos[1].jogos);const semifinalMatches=[{dupla1:rankingGrupo1[0],dupla2:rankingGrupo2[1],placar:'',submetido:false,fase:'Semifinal',rodada:1},{dupla1:rankingGrupo2[0],dupla2:rankingGrupo1[1],placar:'',submetido:false,fase:'Semifinal',rodada:1}];setJogosEliminatoria(semifinalMatches);setFaseAtual('eliminatória');}else{const classificadosPorGrupo=grupos.map(grupo=>{return classificarDuplasPorDesempate(grupo.duplas,grupo.jogos).slice(0,2);}).flat();const duplasUnicas=classificadosPorGrupo.filter((dupla,index,self)=>index===self.findIndex(d=>d[0]===dupla[0]&&d[1]===dupla[1]));const todosOsJogos=grupos.flatMap(grupo=>grupo.jogos);const jogosClassificados=todosOsJogos.filter(jogo=>{if(!jogo.dupla1||!jogo.dupla2||!Array.isArray(jogo.dupla1)||!Array.isArray(jogo.dupla2)){console.error('Jogo inválido encontrado:',jogo);return false;}const dupla1Str=jogo.dupla1.join('');const dupla2Str=jogo.dupla2.join('');return duplasUnicas.some(d=>d.join('')===dupla1Str)&&duplasUnicas.some(d=>d.join('')===dupla2Str);});console.log('Duplas classificadas:',duplasUnicas);console.log('Jogos classificados:',jogosClassificados);const rankingGeral=classificarDuplasPorDesempate(duplasUnicas,jogosClassificados);if(duplas.length<=11){const duplasByeLocal=rankingGeral.slice(0,2);const duplasQuartas=rankingGeral.slice(2,6);if(duplasQuartas.length<4){console.error('Erro: Menos de 4 duplas para as quartas:',duplasQuartas);alert('Erro ao configurar as quartas de final. Verifique os dados.');return;}const jogosQuartas=[{dupla1:[...duplasQuartas[0]],dupla2:[...duplasQuartas[1]],placar:'',submetido:false,fase:'Quartas de Final',rodada:1},{dupla1:[...duplasQuartas[2]],dupla2:[...duplasQuartas[3]],placar:'',submetido:false,fase:'Quartas de Final',rodada:1}];setJogosEliminatoria(jogosQuartas);setDuplasBye(duplasByeLocal);}else{const top16=rankingGeral.slice(0,16);const jogosOitavas=[];for(let i=0;i<top16.length;i+=2){jogosOitavas.push({dupla1:[...top16[i]],dupla2:[...top16[i+1]],placar:'',submetido:false,fase:'Oitavas de Final',rodada:1});}setJogosEliminatoria(jogosOitavas);setDuplasBye([]);}setFaseAtual('eliminatória');}};const atualizarPlacarNaEliminatoria=(jogo,placar)=>{if(jogo.dupla1[0]==='BYE'||jogo.dupla2[0]==='BYE'){setJogosEliminatoria(prevJogos=>prevJogos.map(j=>j===jogo?_objectSpread(_objectSpread({},j),{},{placar:'BYE',submetido:true}):j));return;}setJogosEliminatoria(prevJogos=>{const updatedJogos=prevJogos.map(j=>j===jogo?_objectSpread(_objectSpread({},j),{},{placar:placar,submetido:true}):j);setHistoricoDuplas(prev=>{const novoHistorico=_objectSpread({},prev);const[g1,g2]=placar.split('-').map(Number);const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!novoHistorico[chave1])novoHistorico[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};if(!novoHistorico[chave2])novoHistorico[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};novoHistorico[chave1].jogos+=1;novoHistorico[chave2].jogos+=1;if(g1>g2){novoHistorico[chave1].pontos+=5;novoHistorico[chave1].jogosVencidos+=1;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;novoHistorico[chave2].pontos+=2;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;}else{novoHistorico[chave2].pontos+=5;novoHistorico[chave2].jogosVencidos+=1;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;novoHistorico[chave1].pontos+=2;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;}console.log('Histórico após Eliminatória (jogo):',novoHistorico);return novoHistorico;});return updatedJogos;});};const iniciarFinal=jogos=>{const semifinalGames=jogos.filter(jogo=>jogo.fase==='Semifinal');if(semifinalGames.length!==2){console.error('Erro: Esperados 2 jogos de semifinal.');return;}const finalistas=semifinalGames.map(jogo=>{const[set1,set2]=jogo.placar.split('-').map(Number);return set1>set2?jogo.dupla1:jogo.dupla2;});const perdedores=semifinalGames.map(jogo=>{const[set1,set2]=jogo.placar.split('-').map(Number);return set1>set2?jogo.dupla2:jogo.dupla1;});setJogosEliminatoria(prev=>[...prev,{dupla1:finalistas[0],dupla2:finalistas[1],placar:'',submetido:false,fase:'Final',rodada:Math.max(...prev.map(j=>j.rodada))+1},{dupla1:perdedores[0],dupla2:perdedores[1],placar:'',submetido:false,fase:'Disputa 3º Lugar',rodada:Math.max(...prev.map(j=>j.rodada))+1}]);setFinalConfigurada(true);setTerceiroLugarConfigurado(true);};const atualizarPlacarNaFinal=(jogo,placar)=>{setJogosEliminatoria(prevJogos=>{const updatedJogos=prevJogos.map(j=>j===jogo?_objectSpread(_objectSpread({},j),{},{placar:placar,submetido:true}):j);setHistoricoDuplas(prev=>{const novoHistorico=_objectSpread({},prev);const[g1,g2]=placar.split('-').map(Number);const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!novoHistorico[chave1])novoHistorico[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};if(!novoHistorico[chave2])novoHistorico[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};novoHistorico[chave1].jogos+=1;novoHistorico[chave2].jogos+=1;if(g1>g2){novoHistorico[chave1].pontos+=5;novoHistorico[chave1].jogosVencidos+=1;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;novoHistorico[chave2].pontos+=2;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;}else{novoHistorico[chave2].pontos+=5;novoHistorico[chave2].jogosVencidos+=1;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;novoHistorico[chave1].pontos+=2;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;}console.log('Histórico após Final (jogo):',novoHistorico);return novoHistorico;});return updatedJogos;});};const encerrarFaseEliminatoria=()=>{const rodadaAtual=Math.max(...jogosEliminatoria.map(j=>j.rodada));const jogosRodadaAtual=jogosEliminatoria.filter(j=>j.rodada===rodadaAtual);if(!jogosRodadaAtual.every(j=>j.submetido)){alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');return;}console.log('Jogos da rodada atual:',jogosRodadaAtual);console.log('Duplas BYE:',duplasBye);console.log('Historico Duplas:',historicoDuplas);if(jogosRodadaAtual.some(j=>j.fase==='Semifinal')&&!finalConfigurada){iniciarFinal(jogosEliminatoria);setFaseAtual('final');}else if(jogosRodadaAtual.some(j=>j.fase==='Quartas de Final')&&duplas.length<=11){const vencedoresQuartas=jogosRodadaAtual.map(jogo=>{const[set1,set2]=jogo.placar.split('-').map(Number);return set1>set2?jogo.dupla1:jogo.dupla2;});if(duplasBye.length!==2){alert('Erro: Duplas com BYE não encontradas.');console.log('duplasBye:',duplasBye);console.log('Vencedores Quartas:',vencedoresQuartas);return;}const semifinalMatches=[{dupla1:[...duplasBye[0]],dupla2:[...vencedoresQuartas[0]],placar:'',submetido:false,fase:'Semifinal',rodada:rodadaAtual+1},{dupla1:[...duplasBye[1]],dupla2:[...vencedoresQuartas[1]],placar:'',submetido:false,fase:'Semifinal',rodada:rodadaAtual+1}];setJogosEliminatoria(prev=>{const updated=[...prev.filter(j=>j.rodada<rodadaAtual+1),...semifinalMatches];console.log('Novo estado jogosEliminatoria:',updated);return updated;});}else if(jogosRodadaAtual.length>1){const novaRodada=avancarRodadaEliminatoria(jogosRodadaAtual);setJogosEliminatoria(prev=>{const updated=[...prev.filter(j=>j.rodada<rodadaAtual+1),...novaRodada];console.log('Novo estado jogosEliminatoria:',updated);return updated;});}else{alert('Não há mais rodadas para avançar.');}};const finalizarTorneio=()=>{const final=jogosEliminatoria.find(jogo=>jogo.fase==='Final');const terceiroLugar=jogosEliminatoria.find(jogo=>jogo.fase==='Disputa 3º Lugar');if(!final||!terceiroLugar||!final.placar||!terceiroLugar.placar){alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');console.log('jogosEliminatoria:',jogosEliminatoria);return;}const[finalSet1,finalSet2]=final.placar.split('-').map(Number);const[vencedorFinal,perdedorFinal]=finalSet1>finalSet2?[final.dupla1,final.dupla2]:[final.dupla2,final.dupla1];const[terceiroSet1,terceiroSet2]=terceiroLugar.placar.split('-').map(Number);const[terceiro,quarto]=terceiroSet1>terceiroSet2?[terceiroLugar.dupla1,terceiroLugar.dupla2]:[terceiroLugar.dupla2,terceiroLugar.dupla1];setRanking([{lugar:1,dupla:vencedorFinal},{lugar:2,dupla:perdedorFinal},{lugar:3,dupla:terceiro},{lugar:4,dupla:quarto}]);setFaseAtual('finalizado');};const renderClassificacaoGrupo=grupo=>{const ranking=classificarDuplasPorDesempate(grupo.duplas,grupo.jogos);const todosSubmetidos=grupo.jogos.every(jogo=>jogo.submetido);const formatarDataHora=(dataBase,incrementoMinutos)=>{if(!dataBase)return'Pendente';const data=new Date(dataBase);data.setMinutes(data.getMinutes()+incrementoMinutos);const diasSemana=['DOM','SEG','TER','QUA','QUI','SEX','SAB'];const meses=['JAN','FEV','MAR','ABR','MAI','JUN','JUL','AGO','SET','OUT','NOV','DEZ'];const diaSemana=diasSemana[data.getDay()];const dia=String(data.getDate()).padStart(2,'0');const mes=meses[data.getMonth()];const hora=String(data.getHours()).padStart(2,'0');const minuto=String(data.getMinutes()).padStart(2,'0');return\"\".concat(diaSemana,\", \").concat(dia).concat(mes,\" - \").concat(hora,\":\").concat(minuto);};return/*#__PURE__*/_jsxs(\"div\",{className:\"grupo\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Grupo \",grupo.id+1]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"#\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGOS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"SETS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"GAMES\"}),/*#__PURE__*/_jsx(\"th\",{children:\"CLASSIF.\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:ranking.map((dupla,index)=>{const jogosDupla=grupo.jogos.filter(j=>j.dupla1.join('')===dupla.join('')||j.dupla2.join('')===dupla.join(''));const jogosVencidos=jogosDupla.filter(j=>{if(!j.placar)return false;const[g1,g2]=j.placar.split('-').map(Number);return j.dupla1.join('')===dupla.join('')?g1>g2:g2>g1;}).length;const jogosPerdidos=jogosDupla.filter(j=>{if(!j.placar)return false;const[g1,g2]=j.placar.split('-').map(Number);return j.dupla1.join('')===dupla.join('')?g1<g2:g2<g1;}).length;const setsVencidos=jogosVencidos;const setsPerdidos=jogosPerdidos;const gamesVencidos=jogosDupla.reduce((acc,j)=>{if(!j.placar)return acc;const[g1,g2]=j.placar.split('-').map(Number);return acc+(j.dupla1.join('')===dupla.join('')?g1:g2);},0);const gamesPerdidos=jogosDupla.reduce((acc,j)=>{if(!j.placar)return acc;const[g1,g2]=j.placar.split('-').map(Number);return acc+(j.dupla1.join('')===dupla.join('')?g2:g1);},0);const classificado=todosSubmetidos&&index<2?'✓':'';return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:dupla.join(' & ')}),/*#__PURE__*/_jsxs(\"td\",{children:[jogosVencidos,\"/\",jogosPerdidos]}),/*#__PURE__*/_jsxs(\"td\",{children:[setsVencidos,\"/\",setsPerdidos]}),/*#__PURE__*/_jsxs(\"td\",{children:[gamesVencidos,\"/\",gamesPerdidos]}),/*#__PURE__*/_jsx(\"td\",{children:classificado})]},index);})})]}),/*#__PURE__*/_jsx(\"h4\",{children:\"Jogos\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"#\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DATA/HORA\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 01\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PLACAR\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 02\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VENCEDOR\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:grupo.jogos.map((jogo,idx)=>{const[g1,g2]=jogo.placar?jogo.placar.split('-').map(Number):[0,0];const vencedor=jogo.placar?g1>g2?jogo.dupla1.join(' & '):g2>g1?jogo.dupla2.join(' & '):'Empate':'A definir';const incrementoMinutos=idx*30;const dataHora=formatarDataHora(dataCriacaoTorneio,incrementoMinutos);return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:idx+1}),/*#__PURE__*/_jsx(\"td\",{children:dataHora}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla1.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar||'Pendente'}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla2.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:vencedor})]},idx);})})]})]},\"grupo-\".concat(grupo.id));};const renderizarFaseEliminatoria=jogos=>{const rodadas=[...new Set(jogos.map(j=>j.rodada))].sort((a,b)=>a-b);return rodadas.map(rodada=>{var _jogosDaRodada$;const jogosDaRodada=jogos.filter(j=>j.rodada===rodada);const fase=((_jogosDaRodada$=jogosDaRodada[0])===null||_jogosDaRodada$===void 0?void 0:_jogosDaRodada$.fase)||'';return/*#__PURE__*/_jsxs(\"div\",{className:\"rodada\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[fase,\" - Rodada \",rodada]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 01\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PLACAR\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 02\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VENCEDOR\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:jogosDaRodada.map((jogo,index)=>{const vencedor=jogo.placar&&jogo.submetido?parseInt(jogo.placar.split('-')[0])>parseInt(jogo.placar.split('-')[1])?jogo.dupla1.join(' & '):jogo.dupla2.join(' & '):'A definir';return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla1.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar||'Pendente'}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla2.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:vencedor})]},index);})})]})]},rodada);});};const gerarRelatorioEstatisticas=()=>{const todosOsJogos=[...grupos.flatMap(grupo=>grupo.jogos),...jogosEliminatoria.filter(jogo=>jogo.placar!=='BYE')].filter(jogo=>jogo.submetido);const totalPartidas=todosOsJogos.length;const totalGames=todosOsJogos.reduce((acc,jogo)=>{const[g1,g2]=jogo.placar.split('-').map(Number);return acc+g1+g2;},0);const estatisticasDuplas=Object.values(historicoDuplas).map(dados=>{var _ranking$find;const aproveitamento=dados.jogos>0?(dados.jogosVencidos/dados.jogos*100).toFixed(2):0;const saldoGames=dados.gamesVencidos-dados.gamesPerdidos;const posicaoRanking=((_ranking$find=ranking.find(r=>r.dupla.join('')===dados.dupla.join('')))===null||_ranking$find===void 0?void 0:_ranking$find.lugar)||'-';return{dupla:dados.dupla.join(' & '),jogos:dados.jogos,vitorias:dados.jogosVencidos,gamesVencidos:dados.gamesVencidos,gamesPerdidos:dados.gamesPerdidos,saldoGames,aproveitamento,posicaoRanking};}).sort((a,b)=>{if(a.posicaoRanking==='-'&&b.posicaoRanking!=='-')return 1;if(b.posicaoRanking==='-'&&a.posicaoRanking!=='-')return-1;if(a.posicaoRanking!=='-'&&b.posicaoRanking!=='-')return a.posicaoRanking-b.posicaoRanking;return b.saldoGames-a.saldoGames;});const melhorCampanha=estatisticasDuplas.reduce((melhor,atual)=>{return atual.saldoGames>melhor.saldoGames?atual:melhor;},estatisticasDuplas[0]||{dupla:'Nenhuma',vitorias:0,jogos:0,saldoGames:0});console.log('Estatísticas por Dupla:',estatisticasDuplas);console.log('Melhor Campanha Calculada:',melhorCampanha);return{totalPartidas,totalGames,estatisticasDuplas,melhorCampanha};};const resetTournament=()=>{localStorage.clear();setDuplas([]);setFaseAtual('duplas');setGrupos([]);setJogosEliminatoria([]);setFinalConfigurada(false);setTerceiroLugarConfigurado(false);setRanking([]);setDuplasBye([]);setHistoricoDuplas({});setDataCriacaoTorneio(null);setNomeTorneio('');setDataInicio('');setHoraInicio('');};const add8Duplas=()=>{const newDuplas=[];for(let i=1;i<=8;i++){newDuplas.push([\"JOGADOR\".concat(i*2-1),\"JOGADOR\".concat(i*2)]);}setDuplas(prevDuplas=>[...prevDuplas,...newDuplas]);};const add27Duplas=()=>{const newDuplas=[];for(let i=1;i<=27;i++){newDuplas.push([\"Jogador\".concat(i*2-1),\"Jogador\".concat(i*2)]);}setDuplas(newDuplas);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"header\",{children:/*#__PURE__*/_jsx(\"img\",{src:btConnectLogo,alt:\"btConnect Logo\",className:\"header-logo\"})}),/*#__PURE__*/_jsxs(\"main\",{children:[faseAtual==='duplas'&&/*#__PURE__*/_jsxs(\"div\",{className:\"tournament-setup\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Nome do Torneio:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:nomeTorneio,onChange:e=>setNomeTorneio(e.target.value.toUpperCase()),placeholder:\"Nome do torneio\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Data de In\\xEDcio:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:dataInicio,onChange:e=>setDataInicio(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Hora de In\\xEDcio:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:horaInicio,onChange:e=>setHoraInicio(e.target.value)})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"image-section\",children:/*#__PURE__*/_jsx(\"img\",{src:gameDay,alt:\"Game Day\",className:\"tournament-image\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"duplas-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"iniciar-torneio\",onClick:startTournament,children:[/*#__PURE__*/_jsx(\"img\",{src:tournamentsIcon,alt:\"Tournament Icon\",className:\"button-icon\"}),\"Iniciar Torneio\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:add8Duplas,children:\"Adicionar 8 Duplas\"}),/*#__PURE__*/_jsx(\"button\",{onClick:add27Duplas,children:\"Adicionar 27 Duplas\"})]}),/*#__PURE__*/_jsx(DuplasList,{duplas:duplas,onAddDupla:addDupla,onRemoveDupla:removeDupla})]})]}),faseAtual==='grupos'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FaseDeGrupos,{grupos:grupos,onUpdateGroups:setGrupos}),/*#__PURE__*/_jsx(\"button\",{onClick:encerrarFaseGrupos,children:\"Encerrar Fase de Grupos\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"acompanhamento\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Acompanhamento - Fase de Grupos\"}),grupos.map(grupo=>renderClassificacaoGrupo(grupo))]})]}),faseAtual==='eliminatória'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Fase Eliminat\\xF3ria\"}),/*#__PURE__*/_jsx(FaseEliminatoria,{jogos:jogosEliminatoria.filter(jogo=>!jogo.submetido||jogo.rodada===Math.max(...jogosEliminatoria.map(j=>j.rodada))),onAtualizarPlacar:atualizarPlacarNaEliminatoria}),/*#__PURE__*/_jsx(\"button\",{onClick:encerrarFaseEliminatoria,children:\"Encerrar Etapa\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"acompanhamento\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Acompanhamento - Fase Eliminat\\xF3ria\"}),renderizarFaseEliminatoria(jogosEliminatoria)]})]}),faseAtual==='final'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Final do Torneio\"}),/*#__PURE__*/_jsx(FaseFinal,{jogos:jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar'),onAtualizarPlacar:atualizarPlacarNaFinal,onFinalizarTorneio:finalizarTorneio}),terceiroLugarConfigurado,jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar').every(jogo=>jogo.submetido)&&/*#__PURE__*/_jsx(\"button\",{onClick:finalizarTorneio,children:\"Encerrar Campeonato\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"acompanhamento\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Acompanhamento - Fase Final\"}),renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar'))]})]}),faseAtual==='finalizado'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Ranking Final:\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"POSI\\xC7\\xC3O\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DUPLAS\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:ranking.map((posição,index)=>{let medalha='';let color='#000';if(posição.lugar===1){medalha='🥇';color='gold';}else if(posição.lugar===2){medalha='🥈';color='silver';}else if(posição.lugar===3){medalha='🥉';color='brown';}return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{style:{color},children:[medalha,\" \",posição.lugar,\"\\xBA Colocado\"]}),/*#__PURE__*/_jsx(\"td\",{children:posição.dupla.join(' & ')})]},index);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"relatorio-estatisticas\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Estat\\xEDsticas Gerais do Torneio\"}),(()=>{const{totalPartidas,totalGames,estatisticasDuplas,melhorCampanha}=gerarRelatorioEstatisticas();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Total de Partidas Disputadas:\"}),\" \",totalPartidas]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Total de Games Disputados:\"}),\" \",totalGames]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Melhor Campanha:\"}),\" \",melhorCampanha.dupla,\" (Saldo de Games: \",melhorCampanha.saldoGames,\", \",melhorCampanha.vitorias,\" vit\\xF3rias em \",melhorCampanha.jogos,\" jogos)\"]}),/*#__PURE__*/_jsx(\"h4\",{children:\"Estat\\xEDsticas por Dupla\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"POSI\\xC7\\xC3O\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DUPLA\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PARTIDAS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VIT\\xD3RIAS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"GAMES (V/P)\"}),/*#__PURE__*/_jsx(\"th\",{children:\"SALDO GAMES\"}),/*#__PURE__*/_jsx(\"th\",{children:\"APROVEITAMENTO\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:estatisticasDuplas.map((dupla,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:dupla.posicaoRanking!=='-'?\"\".concat(dupla.posicaoRanking,\"\\xBA\"):'-'}),/*#__PURE__*/_jsx(\"td\",{children:dupla.dupla}),/*#__PURE__*/_jsx(\"td\",{children:dupla.jogos}),/*#__PURE__*/_jsx(\"td\",{children:dupla.vitorias}),/*#__PURE__*/_jsxs(\"td\",{children:[dupla.gamesVencidos,\"/\",dupla.gamesPerdidos]}),/*#__PURE__*/_jsx(\"td\",{children:dupla.saldoGames}),/*#__PURE__*/_jsxs(\"td\",{children:[dupla.aproveitamento,\"%\"]})]},index))})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Torneio Finalizado em \",new Date().toLocaleString('pt-BR'),\"!\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:resetTournament,className:\"novo-torneio-btn\",children:\"In\\xEDcio\"})]});})()]})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","gameDay","btConnectLogo","tournamentsIcon","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","App","duplas","setDuplas","savedDuplas","localStorage","getItem","JSON","parse","faseAtual","setFaseAtual","grupos","setGrupos","savedGrupos","jogosEliminatoria","setJogosEliminatoria","savedJogos","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","savedRanking","duplasBye","setDuplasBye","savedDuplasBye","historicoDuplas","setHistoricoDuplas","savedHistorico","dataCriacaoTorneio","setDataCriacaoTorneio","nomeTorneio","setNomeTorneio","dataInicio","setDataInicio","horaInicio","setHoraInicio","setItem","stringify","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","ano","mes","dia","split","map","Number","hora","minuto","dataTorneio","Date","toISOString","duplasSorteadas","sort","Math","random","gruposCriados","gruposComJogos","grupo","_objectSpread","jogos","id","historicoInicial","reduce","acc","join","pontos","jogosVencidos","gamesVencidos","gamesPerdidos","console","log","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","prev","novoHistorico","forEach","g1","g2","placar","chave1","dupla1","chave2","dupla2","classificados","concat","rankingGrupo1","rankingGrupo2","semifinalMatches","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","Array","isArray","error","dupla1Str","dupla2Str","rankingGeral","duplasByeLocal","duplasQuartas","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","prevJogos","j","updatedJogos","iniciarFinal","semifinalGames","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","updated","novaRodada","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","String","getDate","padStart","getMonth","getHours","className","children","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","gerarRelatorioEstatisticas","totalPartidas","totalGames","estatisticasDuplas","Object","values","dados","_ranking$find","aproveitamento","toFixed","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","resetTournament","clear","add8Duplas","newDuplas","add27Duplas","src","alt","type","value","onChange","e","target","toUpperCase","placeholder","onClick","onAddDupla","onRemoveDupla","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","medalha","color","style","toLocaleString"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport gameDay from './assets/img/game-day.svg'; // Importa a imagem SVG\nimport btConnectLogo from './assets/img/btConnect.png'; // Importa btConnect\nimport tournamentsIcon from './assets/icons/tournaments.svg'; // Ícone começar torneio\n\nfunction App() {\n  const [duplas, setDuplas] = useState(() => {\n    const savedDuplas = localStorage.getItem('torneioDuplas');\n    return savedDuplas ? JSON.parse(savedDuplas) : [];\n  });\n  const [faseAtual, setFaseAtual] = useState(() => localStorage.getItem('torneioFaseAtual') || 'duplas');\n  const [grupos, setGrupos] = useState(() => {\n    const savedGrupos = localStorage.getItem('torneioGrupos');\n    return savedGrupos ? JSON.parse(savedGrupos) : [];\n  });\n  const [jogosEliminatoria, setJogosEliminatoria] = useState(() => {\n    const savedJogos = localStorage.getItem('torneioJogosEliminatoria');\n    return savedJogos ? JSON.parse(savedJogos) : [];\n  });\n  const [finalConfigurada, setFinalConfigurada] = useState(() => localStorage.getItem('torneioFinalConfigurada') === 'true');\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(() => localStorage.getItem('torneioTerceiroLugarConfigurado') === 'true');\n  const [ranking, setRanking] = useState(() => {\n    const savedRanking = localStorage.getItem('torneioRanking');\n    return savedRanking ? JSON.parse(savedRanking) : [];\n  });\n  const [duplasBye, setDuplasBye] = useState(() => {\n    const savedDuplasBye = localStorage.getItem('torneioDuplasBye');\n    return savedDuplasBye ? JSON.parse(savedDuplasBye) : [];\n  });\n  const [historicoDuplas, setHistoricoDuplas] = useState(() => {\n    const savedHistorico = localStorage.getItem('torneioHistoricoDuplas');\n    return savedHistorico ? JSON.parse(savedHistorico) : {};\n  });\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(() => localStorage.getItem('torneioDataCriacao') || null);\n  const [nomeTorneio, setNomeTorneio] = useState(() => localStorage.getItem('torneioNome') || '');\n  const [dataInicio, setDataInicio] = useState(() => localStorage.getItem('torneioDataInicio') || '');\n  const [horaInicio, setHoraInicio] = useState(() => localStorage.getItem('torneioHoraInicio') || '');\n\n  // Salvar estado no localStorage sempre que houver alterações\n  useEffect(() => {\n    localStorage.setItem('torneioDuplas', JSON.stringify(duplas));\n    localStorage.setItem('torneioFaseAtual', faseAtual);\n    localStorage.setItem('torneioGrupos', JSON.stringify(grupos));\n    localStorage.setItem('torneioJogosEliminatoria', JSON.stringify(jogosEliminatoria));\n    localStorage.setItem('torneioFinalConfigurada', finalConfigurada);\n    localStorage.setItem('torneioTerceiroLugarConfigurado', terceiroLugarConfigurado);\n    localStorage.setItem('torneioRanking', JSON.stringify(ranking));\n    localStorage.setItem('torneioDuplasBye', JSON.stringify(duplasBye));\n    localStorage.setItem('torneioHistoricoDuplas', JSON.stringify(historicoDuplas));\n    localStorage.setItem('torneioDataCriacao', dataCriacaoTorneio || '');\n    localStorage.setItem('torneioNome', nomeTorneio);\n    localStorage.setItem('torneioDataInicio', dataInicio);\n    localStorage.setItem('torneioHoraInicio', horaInicio);\n  }, [\n    duplas,\n    faseAtual,\n    grupos,\n    jogosEliminatoria,\n    finalConfigurada,\n    terceiroLugarConfigurado,\n    ranking,\n    duplasBye,\n    historicoDuplas,\n    dataCriacaoTorneio,\n    nomeTorneio,\n    dataInicio,\n    horaInicio\n  ]);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto);\n    setDataCriacaoTorneio(dataTorneio.toISOString()); // Armazenar como string ISO\n  \n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n  \n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n  \n    // Inicializar historicoDuplas com todas as duplas\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n    setHistoricoDuplas(historicoInicial);\n    console.log('Histórico Inicial:', historicoInicial);\n  \n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    setHistoricoDuplas(prev => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      console.log('Histórico após Fase de Grupos:', novoHistorico);\n      console.log('Total de jogos registrados na fase de grupos:', todosOsJogos.length);\n      return novoHistorico;\n    });\n  \n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n  \n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) =>\n        index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1])\n      );\n  \n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n  \n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n  \n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n  \n      if (duplas.length <= 11) {\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n  \n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n  \n        const jogosQuartas = [\n          { dupla1: [...duplasQuartas[0]], dupla2: [...duplasQuartas[1]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 },\n          { dupla1: [...duplasQuartas[2]], dupla2: [...duplasQuartas[3]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 }\n        ];\n  \n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n  \n        setJogosEliminatoria(jogosOitavas);\n        setDuplasBye([]);\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos =>\n        prevJogos.map(j =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        )\n      );\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Eliminatória (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n  \n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n\n    setJogosEliminatoria(prev => [\n      ...prev,\n      {\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1\n      },\n      {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1\n      }\n    ]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Final (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n  \n      return updatedJogos;\n    });\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n\n      const semifinalMatches = [\n        { dupla1: [...duplasBye[0]], dupla2: [...vencedoresQuartas[0]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n        { dupla1: [...duplasBye[1]], dupla2: [...vencedoresQuartas[1]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n      ];\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n    setFaseAtual('finalizado');\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(j =>\n                j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar ? (g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate') : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(dataCriacaoTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor = jogo.placar && jogo.submetido\n                  ? (parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & '))\n                  : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [\n      ...grupos.flatMap(grupo => grupo.jogos),\n      ...jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')\n    ].filter(jogo => jogo.submetido);\n  \n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n  \n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      const aproveitamento = dados.jogos > 0 ? ((dados.jogosVencidos / dados.jogos) * 100).toFixed(2) : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ranking.find(r => r.dupla.join('') === dados.dupla.join(''))?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n  \n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => {\n      return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n    }, estatisticasDuplas[0] || { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 });\n  \n    console.log('Estatísticas por Dupla:', estatisticasDuplas);\n    console.log('Melhor Campanha Calculada:', melhorCampanha);\n  \n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n\n  const resetTournament = () => {\n    localStorage.clear();\n    setDuplas([]);\n    setFaseAtual('duplas');\n    setGrupos([]);\n    setJogosEliminatoria([]);\n    setFinalConfigurada(false);\n    setTerceiroLugarConfigurado(false);\n    setRanking([]);\n    setDuplasBye([]);\n    setHistoricoDuplas({});\n    setDataCriacaoTorneio(null);\n    setNomeTorneio('');\n    setDataInicio('');\n    setHoraInicio('');\n  };\n\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={nomeTorneio}\n                  onChange={(e) => setNomeTorneio(e.target.value.toUpperCase())}\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={dataInicio}\n                  onChange={(e) => setDataInicio(e.target.value)}\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={horaInicio}\n                  onChange={(e) => setHoraInicio(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button className=\"iniciar-torneio\" onClick={startTournament}>\n                  <img src={tournamentsIcon} alt=\"Tournament Icon\" className=\"button-icon\" />\n                  Iniciar Torneio\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n                <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n              </div>\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {grupos.map(grupo => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado}\n            {jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))}\n            </div>\n          </>\n        )}\n{faseAtual === 'finalizado' && (\n  <>\n    <h3>Ranking Final:</h3>\n    <table>\n      <thead>\n        <tr>\n          <th>POSIÇÃO</th>\n          <th>DUPLAS</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ranking.map((posição, index) => {\n          let medalha = '';\n          let color = '#000';\n          if (posição.lugar === 1) {\n            medalha = '🥇';\n            color = 'gold';\n          } else if (posição.lugar === 2) {\n            medalha = '🥈';\n            color = 'silver';\n          } else if (posição.lugar === 3) {\n            medalha = '🥉';\n            color = 'brown';\n          }\n          return (\n            <tr key={index}>\n              <td style={{ color }}>{medalha} {posição.lugar}º Colocado</td>\n              <td>{posição.dupla.join(' & ')}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n\n    <div className=\"relatorio-estatisticas\">\n      <h3>Estatísticas Gerais do Torneio</h3>\n      {(() => {\n        const { totalPartidas, totalGames, estatisticasDuplas, melhorCampanha } = gerarRelatorioEstatisticas();\n        return (\n          <>\n            <p><strong>Total de Partidas Disputadas:</strong> {totalPartidas}</p>\n            <p><strong>Total de Games Disputados:</strong> {totalGames}</p>\n            <p><strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (Saldo de Games: {melhorCampanha.saldoGames}, {melhorCampanha.vitorias} vitórias em {melhorCampanha.jogos} jogos)</p>\n            <h4>Estatísticas por Dupla</h4>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLA</th>\n                  <th>PARTIDAS</th>\n                  <th>VITÓRIAS</th>\n                  <th>GAMES (V/P)</th>\n                  <th>SALDO GAMES</th>\n                  <th>APROVEITAMENTO</th>\n                </tr>\n              </thead>\n              <tbody>\n                {estatisticasDuplas.map((dupla, index) => (\n                  <tr key={index}>\n                    <td>{dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'}</td>\n                    <td>{dupla.dupla}</td>\n                    <td>{dupla.jogos}</td>\n                    <td>{dupla.vitorias}</td>\n                    <td>{dupla.gamesVencidos}/{dupla.gamesPerdidos}</td>\n                    <td>{dupla.saldoGames}</td>\n                    <td>{dupla.aproveitamento}%</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <p>Torneio Finalizado em {new Date().toLocaleString('pt-BR')}!</p>\n            <button onClick={resetTournament} className=\"novo-torneio-btn\">Início</button>\n          </>\n        );\n      })()}\n    </div>\n  </>\n)}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}