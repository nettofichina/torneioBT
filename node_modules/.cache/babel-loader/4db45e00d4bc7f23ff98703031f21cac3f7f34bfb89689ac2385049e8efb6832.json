{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport './App.css';\nimport { dividirGrupos, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [resultados, setResultados] = useState({}); // Adicionando o estado resultados\n\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  // Função para iniciar a fase eliminatória\n  const iniciarFaseEliminatoria = classificados => {\n    let jogosEliminatoria = [];\n\n    // Assumindo que classificados está corretamente ordenado com 4 duplas (2 de cada grupo)\n    jogosEliminatoria.push({\n      dupla1: classificados[0],\n      // 1º Grupo 1\n      dupla2: classificados[3],\n      // 2º Grupo 2\n      placar: '',\n      submetido: false,\n      jogoIndex: 0\n    });\n    jogosEliminatoria.push({\n      dupla1: classificados[2],\n      // 1º Grupo 2\n      dupla2: classificados[1],\n      // 2º Grupo 1\n      placar: '',\n      submetido: false,\n      jogoIndex: 1\n    });\n    setJogosEliminatoria(jogosEliminatoria);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    console.log('Estado dos grupos antes de verificar:', grupos);\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado'); // Ou qualquer outro estado final\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const atualizarEstatisticas = jogo => {\n    const {\n      dupla1,\n      dupla2,\n      placar\n    } = jogo;\n    const [set1, set2] = placar.split('-').map(Number);\n    const vencedor = set1 > set2 ? dupla1 : dupla2;\n    setResultados(prevResultados => {\n      var _prevResultados$dupla, _prevResultados$dupla2, _prevResultados$dupla3, _prevResultados$dupla4, _prevResultados$dupla5, _prevResultados$dupla6, _prevResultados$dupla7, _prevResultados$dupla8, _prevResultados$dupla9, _prevResultados$dupla10, _prevResultados$dupla11, _prevResultados$dupla12;\n      return {\n        ...prevResultados,\n        [dupla1.join(',')]: {\n          ...(prevResultados[dupla1.join(',')] || {\n            vitórias: 0,\n            derrotas: 0,\n            setsVencidos: 0,\n            setsPerdidos: 0\n          }),\n          vitórias: vencedor === dupla1 ? ((_prevResultados$dupla = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla === void 0 ? void 0 : _prevResultados$dupla.vitórias) + 1 || 1 : ((_prevResultados$dupla2 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla2 === void 0 ? void 0 : _prevResultados$dupla2.vitórias) || 0,\n          derrotas: vencedor === dupla2 ? ((_prevResultados$dupla3 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla3 === void 0 ? void 0 : _prevResultados$dupla3.derrotas) + 1 || 1 : ((_prevResultados$dupla4 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla4 === void 0 ? void 0 : _prevResultados$dupla4.derrotas) || 0,\n          setsVencidos: ((_prevResultados$dupla5 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla5 === void 0 ? void 0 : _prevResultados$dupla5.setsVencidos) + (vencedor === dupla1 ? set1 : set2) || (vencedor === dupla1 ? set1 : set2),\n          setsPerdidos: ((_prevResultados$dupla6 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla6 === void 0 ? void 0 : _prevResultados$dupla6.setsPerdidos) + (vencedor === dupla1 ? set2 : set1) || (vencedor === dupla1 ? set2 : set1)\n        },\n        [dupla2.join(',')]: {\n          ...(prevResultados[dupla2.join(',')] || {\n            vitórias: 0,\n            derrotas: 0,\n            setsVencidos: 0,\n            setsPerdidos: 0\n          }),\n          vitórias: vencedor === dupla2 ? ((_prevResultados$dupla7 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla7 === void 0 ? void 0 : _prevResultados$dupla7.vitórias) + 1 || 1 : ((_prevResultados$dupla8 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla8 === void 0 ? void 0 : _prevResultados$dupla8.vitórias) || 0,\n          derrotas: vencedor === dupla1 ? ((_prevResultados$dupla9 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla9 === void 0 ? void 0 : _prevResultados$dupla9.derrotas) + 1 || 1 : ((_prevResultados$dupla10 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla10 === void 0 ? void 0 : _prevResultados$dupla10.derrotas) || 0,\n          setsVencidos: ((_prevResultados$dupla11 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla11 === void 0 ? void 0 : _prevResultados$dupla11.setsVencidos) + (vencedor === dupla2 ? set1 : set2) || (vencedor === dupla2 ? set1 : set2),\n          setsPerdidos: ((_prevResultados$dupla12 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla12 === void 0 ? void 0 : _prevResultados$dupla12.setsPerdidos) + (vencedor === dupla2 ? set2 : set1) || (vencedor === dupla2 ? set2 : set1)\n        }\n      };\n    });\n  };\n\n  // Função para determinar Vencedores\n  const determinarVencedores = () => {\n    if (jogosEliminatoria.length !== 1) {\n      console.error(\"Erro: Esperava-se um jogo final.\");\n      return;\n    }\n    const final = jogosEliminatoria[0];\n    const [set1, set2] = final.placar.split('-').map(Number);\n    const campeao = set1 > set2 ? final.dupla1 : final.dupla2;\n    const viceCampeao = campeao === final.dupla1 ? final.dupla2 : final.dupla1;\n\n    // Usar os resultados das semifinais armazenados para determinar terceiro e quarto lugar\n    const semifinalResults = resultados.semifinalResults;\n    const terceiroLugar = semifinalResults[0].placar.split('-')[0] < semifinalResults[0].placar.split('-')[1] ? semifinalResults[0].dupla1 : semifinalResults[0].dupla2;\n    const quartoLugar = semifinalResults[1].placar.split('-')[0] < semifinalResults[1].placar.split('-')[1] ? semifinalResults[1].dupla1 : semifinalResults[1].dupla2;\n    return {\n      primeiro: campeao,\n      segundo: viceCampeao,\n      terceiro: terceiroLugar,\n      quarto: quartoLugar\n    };\n  };\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar as semifinais.');\n      return;\n    }\n    const vencedorSemifinal1 = jogosEliminatoria[0].placar.split('-')[0] > jogosEliminatoria[0].placar.split('-')[1] ? jogosEliminatoria[0].dupla1 : jogosEliminatoria[0].dupla2;\n    const vencedorSemifinal2 = jogosEliminatoria[1].placar.split('-')[0] > jogosEliminatoria[1].placar.split('-')[1] ? jogosEliminatoria[1].dupla1 : jogosEliminatoria[1].dupla2;\n    const perdedorSemifinal1 = vencedorSemifinal1 === jogosEliminatoria[0].dupla1 ? jogosEliminatoria[0].dupla2 : jogosEliminatoria[0].dupla1;\n    const perdedorSemifinal2 = vencedorSemifinal2 === jogosEliminatoria[1].dupla1 ? jogosEliminatoria[1].dupla2 : jogosEliminatoria[1].dupla1;\n\n    // Criar a final e a disputa pelo terceiro lugar\n    const novosJogos = [{\n      dupla1: vencedorSemifinal1,\n      dupla2: vencedorSemifinal2,\n      placar: '',\n      submetido: false,\n      jogoIndex: 0,\n      fase: 'final'\n    }, {\n      dupla1: perdedorSemifinal1,\n      dupla2: perdedorSemifinal2,\n      placar: '',\n      submetido: false,\n      jogoIndex: 1,\n      fase: 'terceiroLugar'\n    }];\n    console.log('Estado dos jogos eliminatórios antes de criar os jogos finais:', jogosEliminatoria);\n    setJogosEliminatoria(novosJogos); // Substituir por novos jogos finais\n    setFaseAtual('terceiroLugar'); // Primeiro, vamos para a disputa do terceiro lugar\n\n    // Informar finalistas\n    alert(`Finalistas: ${vencedorSemifinal1.join(' e ')} vs ${vencedorSemifinal2.join(' e ')}`);\n    alert(`Disputa pelo 3º lugar: ${perdedorSemifinal1.join(' e ')} vs ${perdedorSemifinal2.join(' e ')}`);\n    console.log('Jogos finais criados:', jogosEliminatoria);\n  };\n\n  // Novamente, após a final, definir o ranking\n  const finalizarTorneio = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('O jogo da final deve ser submetido antes de finalizar o torneio.');\n      return;\n    }\n    const ranking = determinarVencedores();\n    setResultados(prev => ({\n      ...prev,\n      ranking\n    }));\n    setFaseAtual('finalizado');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          style: {\n            textTransform: 'uppercase'\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Adicionar Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: startTournament,\n            disabled: duplas.length < 3,\n            children: \"Come\\xE7ar Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas (Teste)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : faseAtual === 'terceiroLugar' ? 'Disputa pelo 3º Lugar' : faseAtual === 'final' ? 'Final' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onEncerrarFase: encerrarFaseGrupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), (faseAtual === 'eliminatória' || faseAtual === 'terceiroLugar' || faseAtual === 'final') && /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          fase: faseAtual === 'final' ? 'Final' : faseAtual === 'terceiroLugar' ? 'Disputa pelo 3º Lugar' : 'Fase Eliminatória',\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === faseAtual),\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onUpdateJogos: jogosAtualizados => {\n            setJogosEliminatoria(prev => prev.map(jogo => jogosAtualizados.find(updated => updated.jogoIndex === jogo.jogoIndex) || jogo));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseEliminatoria,\n          disabled: jogosEliminatoria.some(jogo => !jogo.submetido),\n          children: \"Encerrar Semifinais\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), faseAtual === 'terceiroLugar' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            if (jogosEliminatoria.some(jogo => jogo.fase === 'terceiroLugar' && !jogo.submetido)) {\n              alert('O jogo pelo 3º lugar deve ser submetido antes de avançar para a final.');\n              return;\n            }\n            setFaseAtual('final');\n          },\n          disabled: jogosEliminatoria.some(jogo => jogo.fase === 'terceiroLugar' && !jogo.submetido),\n          children: \"Avan\\xE7ar para a Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: finalizarTorneio,\n          disabled: jogosEliminatoria.some(jogo => jogo.fase === 'final' && !jogo.submetido),\n          children: \"Finalizar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        style: {\n          display: faseAtual === 'finalizado' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Resultado Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: resultados.ranking && Object.entries(resultados.ranking).map(([posicao, dupla]) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posicao === 'primeiro' ? 'Primeiro Lugar' : posicao === 'segundo' ? 'Segundo Lugar' : posicao === 'terceiro' ? 'Terceiro Lugar' : posicao === 'quarto' ? 'Quarto Lugar' : '', \": \", dupla.join(' e ')]\n          }, posicao, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Eodwj86Rt5WIa2v/KdgEuE0fYn0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","dividirGrupos","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","resultados","setResultados","console","log","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","iniciarFaseEliminatoria","classificados","push","dupla1","dupla2","placar","submetido","jogoIndex","encerrarFaseGrupos","grupo","jogos","jogo","forEach","classificadosGrupo","slice","join","atualizarEstatisticas","set1","set2","split","map","Number","vencedor","prevResultados","_prevResultados$dupla","_prevResultados$dupla2","_prevResultados$dupla3","_prevResultados$dupla4","_prevResultados$dupla5","_prevResultados$dupla6","_prevResultados$dupla7","_prevResultados$dupla8","_prevResultados$dupla9","_prevResultados$dupla10","_prevResultados$dupla11","_prevResultados$dupla12","vitórias","derrotas","setsVencidos","setsPerdidos","determinarVencedores","error","final","campeao","viceCampeao","semifinalResults","terceiroLugar","quartoLugar","primeiro","segundo","terceiro","quarto","encerrarFaseEliminatoria","vencedorSemifinal1","vencedorSemifinal2","perdedorSemifinal1","perdedorSemifinal2","novosJogos","fase","finalizarTorneio","ranking","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","placeholder","style","textTransform","required","onAddDupla","onRemoveDupla","onClick","disabled","add8Duplas","display","onAtualizarEstatisticas","onEncerrarFase","onUpdateGroups","onUpdateJogos","jogosAtualizados","find","updated","Object","entries","posicao","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport './App.css';\nimport {\n  dividirGrupos,\n  classificarDuplasPorDesempate\n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [resultados, setResultados] = useState({});  // Adicionando o estado resultados\n\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n    // Função para iniciar a fase eliminatória\n    const iniciarFaseEliminatoria = (classificados) => {\n      let jogosEliminatoria = [];\n    \n      // Assumindo que classificados está corretamente ordenado com 4 duplas (2 de cada grupo)\n      jogosEliminatoria.push({\n        dupla1: classificados[0],  // 1º Grupo 1\n        dupla2: classificados[3],  // 2º Grupo 2\n        placar: '',\n        submetido: false,\n        jogoIndex: 0\n      });\n      jogosEliminatoria.push({\n        dupla1: classificados[2],  // 1º Grupo 2\n        dupla2: classificados[1],  // 2º Grupo 1\n        placar: '',\n        submetido: false,\n        jogoIndex: 1\n      });\n    \n      setJogosEliminatoria(jogosEliminatoria);\n      setFaseAtual('eliminatória');\n    };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    console.log('Estado dos grupos antes de verificar:', grupos); \n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n  \n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado'); // Ou qualquer outro estado final\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n\n\n  const atualizarEstatisticas = (jogo) => {\n    const { dupla1, dupla2, placar } = jogo;\n    const [set1, set2] = placar.split('-').map(Number);\n    const vencedor = set1 > set2 ? dupla1 : dupla2;\n\n    setResultados(prevResultados => {\n      return {\n        ...prevResultados,\n        [dupla1.join(',')]: {\n          ...(prevResultados[dupla1.join(',')] || { vitórias: 0, derrotas: 0, setsVencidos: 0, setsPerdidos: 0 }),\n          vitórias: vencedor === dupla1 ? prevResultados[dupla1.join(',')]?.vitórias + 1 || 1 : prevResultados[dupla1.join(',')]?.vitórias || 0,\n          derrotas: vencedor === dupla2 ? prevResultados[dupla1.join(',')]?.derrotas + 1 || 1 : prevResultados[dupla1.join(',')]?.derrotas || 0,\n          setsVencidos: prevResultados[dupla1.join(',')]?.setsVencidos + (vencedor === dupla1 ? set1 : set2) || (vencedor === dupla1 ? set1 : set2),\n          setsPerdidos: prevResultados[dupla1.join(',')]?.setsPerdidos + (vencedor === dupla1 ? set2 : set1) || (vencedor === dupla1 ? set2 : set1)\n        },\n        [dupla2.join(',')]: {\n          ...(prevResultados[dupla2.join(',')] || { vitórias: 0, derrotas: 0, setsVencidos: 0, setsPerdidos: 0 }),\n          vitórias: vencedor === dupla2 ? prevResultados[dupla2.join(',')]?.vitórias + 1 || 1 : prevResultados[dupla2.join(',')]?.vitórias || 0,\n          derrotas: vencedor === dupla1 ? prevResultados[dupla2.join(',')]?.derrotas + 1 || 1 : prevResultados[dupla2.join(',')]?.derrotas || 0,\n          setsVencidos: prevResultados[dupla2.join(',')]?.setsVencidos + (vencedor === dupla2 ? set1 : set2) || (vencedor === dupla2 ? set1 : set2),\n          setsPerdidos: prevResultados[dupla2.join(',')]?.setsPerdidos + (vencedor === dupla2 ? set2 : set1) || (vencedor === dupla2 ? set2 : set1)\n        }\n      };\n    });\n  };\n\n  // Função para determinar Vencedores\n  const determinarVencedores = () => {\n    if (jogosEliminatoria.length !== 1) {\n      console.error(\"Erro: Esperava-se um jogo final.\");\n      return;\n    }\n\n    const final = jogosEliminatoria[0];\n    const [set1, set2] = final.placar.split('-').map(Number);\n    const campeao = set1 > set2 ? final.dupla1 : final.dupla2;\n    const viceCampeao = campeao === final.dupla1 ? final.dupla2 : final.dupla1;\n\n    // Usar os resultados das semifinais armazenados para determinar terceiro e quarto lugar\n    const semifinalResults = resultados.semifinalResults;\n    const terceiroLugar = semifinalResults[0].placar.split('-')[0] < semifinalResults[0].placar.split('-')[1] ? semifinalResults[0].dupla1 : semifinalResults[0].dupla2;\n    const quartoLugar = semifinalResults[1].placar.split('-')[0] < semifinalResults[1].placar.split('-')[1] ? semifinalResults[1].dupla1 : semifinalResults[1].dupla2;\n\n    return {\n      primeiro: campeao,\n      segundo: viceCampeao,\n      terceiro: terceiroLugar,\n      quarto: quartoLugar\n    };\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar as semifinais.');\n      return;\n    }\n    \n    const vencedorSemifinal1 = jogosEliminatoria[0].placar.split('-')[0] > jogosEliminatoria[0].placar.split('-')[1] ? jogosEliminatoria[0].dupla1 : jogosEliminatoria[0].dupla2;\n    const vencedorSemifinal2 = jogosEliminatoria[1].placar.split('-')[0] > jogosEliminatoria[1].placar.split('-')[1] ? jogosEliminatoria[1].dupla1 : jogosEliminatoria[1].dupla2;\n    \n    const perdedorSemifinal1 = vencedorSemifinal1 === jogosEliminatoria[0].dupla1 ? jogosEliminatoria[0].dupla2 : jogosEliminatoria[0].dupla1;\n    const perdedorSemifinal2 = vencedorSemifinal2 === jogosEliminatoria[1].dupla1 ? jogosEliminatoria[1].dupla2 : jogosEliminatoria[1].dupla1;\n  \n    // Criar a final e a disputa pelo terceiro lugar\n    const novosJogos = [\n      {\n        dupla1: vencedorSemifinal1,\n        dupla2: vencedorSemifinal2,\n        placar: '',\n        submetido: false,\n        jogoIndex: 0,\n        fase: 'final'\n      },\n      {\n        dupla1: perdedorSemifinal1,\n        dupla2: perdedorSemifinal2,\n        placar: '',\n        submetido: false,\n        jogoIndex: 1,\n        fase: 'terceiroLugar'\n      }\n    ];\n  \n    console.log('Estado dos jogos eliminatórios antes de criar os jogos finais:', jogosEliminatoria);\n    setJogosEliminatoria(novosJogos); // Substituir por novos jogos finais\n    setFaseAtual('terceiroLugar'); // Primeiro, vamos para a disputa do terceiro lugar\n    \n    // Informar finalistas\n    alert(`Finalistas: ${vencedorSemifinal1.join(' e ')} vs ${vencedorSemifinal2.join(' e ')}`);\n    alert(`Disputa pelo 3º lugar: ${perdedorSemifinal1.join(' e ')} vs ${perdedorSemifinal2.join(' e ')}`);\n  \n    console.log('Jogos finais criados:', jogosEliminatoria);\n  };\n\n  // Novamente, após a final, definir o ranking\n  const finalizarTorneio = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('O jogo da final deve ser submetido antes de finalizar o torneio.');\n      return;\n    }\n    const ranking = determinarVencedores();\n    setResultados(prev => ({ ...prev, ranking }));\n    setFaseAtual('finalizado');\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n  \n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" style={{ textTransform: 'uppercase' }} required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n  \n        <section className=\"section\">\n          <h2>Adicionar Duplas</h2>\n          {faseAtual === 'duplas' &&\n            <>\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n              <Button\n                onClick={startTournament}\n                disabled={duplas.length < 3}>\n                Começar Torneio\n              </Button>\n              <Button onClick={add8Duplas}>Adicionar 8 Duplas (Teste)</Button>\n            </>\n          }\n        </section>\n  \n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">{faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : \n                             faseAtual === 'terceiroLugar' ? 'Disputa pelo 3º Lugar' : \n                             faseAtual === 'final' ? 'Final' : 'Torneio Finalizado'}</h3>\n          {faseAtual === 'grupos' &&\n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onEncerrarFase={encerrarFaseGrupos} onUpdateGroups={setGrupos} />\n          }\n          {(faseAtual === 'eliminatória' || faseAtual === 'terceiroLugar' || faseAtual === 'final') &&\n            <FaseEliminatoria fase={faseAtual === 'final' ? 'Final' : faseAtual === 'terceiroLugar' ? 'Disputa pelo 3º Lugar' : 'Fase Eliminatória'} \n                              jogos={jogosEliminatoria.filter(jogo => jogo.fase === faseAtual)} \n                              onAtualizarEstatisticas={atualizarEstatisticas} \n                              onUpdateJogos={(jogosAtualizados) => {\n                                setJogosEliminatoria(prev => prev.map(jogo => \n                                  jogosAtualizados.find(updated => updated.jogoIndex === jogo.jogoIndex) || jogo\n                                ));\n                              }} \n            />\n          }\n          {faseAtual === 'grupos' &&\n            <Button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</Button>\n          }\n          {faseAtual === 'eliminatória' &&\n            <Button\n              onClick={encerrarFaseEliminatoria}\n              disabled={jogosEliminatoria.some(jogo => !jogo.submetido)}\n            >\n              Encerrar Semifinais\n            </Button>\n          }\n          {faseAtual === 'terceiroLugar' &&\n            <Button \n              onClick={() => {\n                if (jogosEliminatoria.some(jogo => jogo.fase === 'terceiroLugar' && !jogo.submetido)) {\n                  alert('O jogo pelo 3º lugar deve ser submetido antes de avançar para a final.');\n                  return;\n                }\n                setFaseAtual('final');\n              }}\n              disabled={jogosEliminatoria.some(jogo => jogo.fase === 'terceiroLugar' && !jogo.submetido)}\n            >\n              Avançar para a Final\n            </Button>\n          }\n          {faseAtual === 'final' &&\n            <Button\n              onClick={finalizarTorneio}\n              disabled={jogosEliminatoria.some(jogo => jogo.fase === 'final' && !jogo.submetido)}\n            >\n              Finalizar Torneio\n            </Button>\n          }\n        </section>\n  \n        {/* Adicionando a seção de resultados finais */}\n        <section className=\"section\" style={{ display: faseAtual === 'finalizado' ? 'block' : 'none' }}>\n          <h2>Resultado Final</h2>\n          <ul>\n            {resultados.ranking && Object.entries(resultados.ranking).map(([posicao, dupla]) => (\n              <li key={posicao}>\n                {posicao === 'primeiro' ? 'Primeiro Lugar' :\n                  posicao === 'segundo' ? 'Segundo Lugar' :\n                    posicao === 'terceiro' ? 'Terceiro Lugar' :\n                      posicao === 'quarto' ? 'Quarto Lugar' : ''}: {dupla.join(' e ')}\n              </li>\n            ))}\n          </ul>\n        </section>\n      </main>\n  \n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}