{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    let jogos = [];\n    let faseNome = 'Semifinal'; // Padrão para torneios pequenos\n\n    if (classificados.length <= 4) {\n      // Diretamente para as semifinais\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1],\n          placar: '',\n          submetido: false,\n          fase: faseNome\n        });\n      }\n    } else {\n      // Para mais duplas, adiciona rodadas extras\n      let rodadas = Math.ceil(Math.log2(classificados.length));\n      for (let r = 1; r <= rodadas; r++) {\n        for (let i = 0; i < classificados.length; i += 2) {\n          if (r === rodadas) faseNome = 'Final';else if (r === rodadas - 1) faseNome = 'Semifinal';else if (r === rodadas - 2) faseNome = 'Quartas de Final';else faseNome = `Rodada ${r}`;\n          jogos.push({\n            dupla1: classificados[i],\n            dupla2: classificados[i + 1] || ['BYE', ''],\n            placar: '',\n            submetido: false,\n            fase: faseNome\n          });\n        }\n        classificados = classificados.filter((_, i) => i % 2 === 0); // Mantém apenas os vencedores\n      }\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n\n      // Verifica se todos os jogos da rodada atual estão submetidos\n      const rodadaAtual = Math.min(...updatedJogos.filter(j => !j.submetido).map(j => j.rodada));\n      if (updatedJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n        // Se todos os jogos da rodada foram submetidos, avança para a próxima rodada\n        if (rodadaAtual === Math.max(...updatedJogos.map(j => j.rodada))) {\n          iniciarFinal(updatedJogos);\n        }\n      }\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([{\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final'\n      }, {\n        dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n        dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n    if (jogosEliminatoria.every(j => j.submetido)) {\n      finalizarTorneio();\n    }\n  };\n  const encerrarFaseEliminatoria = () => {\n    if (finalConfigurada) {\n      setFaseAtual('final'); // Avança para a fase final\n    } else {\n      // Verifica se todos os jogos da semifinal foram submetidos antes de mostrar o alerta\n      const semifinais = jogosEliminatoria.filter(jogo => jogo.fase === 'Semifinal');\n      if (semifinais.every(jogo => jogo.submetido)) {\n        setFinalConfigurada(true); // Configura a final se ainda não foi configurada\n        setFaseAtual('final'); // Avança para a fase final\n      } else {\n        alert('Todos os jogos da Semifinal devem ser submetidos antes de avançar.');\n      }\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1] ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria,\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' & ')]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IcfBMVlPILYAbK+VDrAiYF7cjaA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","gruposCriados","forEach","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","iniciarFaseEliminatoria","faseNome","push","dupla1","dupla2","placar","fase","rodadas","ceil","log2","r","atualizarPlacarNaEliminatoria","prevJogos","updatedJogos","map","j","rodadaAtual","min","rodada","every","max","iniciarFinal","finalistas","set1","set2","split","Number","console","error","atualizarPlacarNaFinal","finalizarTorneio","encerrarFaseEliminatoria","semifinais","final","find","terceiroLugar","vencedorFinal","perdedorFinal","terceiro","quarto","lugar","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddDupla","onRemoveDupla","onClick","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    let jogos = [];\n    let faseNome = 'Semifinal'; // Padrão para torneios pequenos\n\n    if (classificados.length <= 4) {\n      // Diretamente para as semifinais\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1],\n          placar: '',\n          submetido: false,\n          fase: faseNome\n        });\n      }\n    } else {\n      // Para mais duplas, adiciona rodadas extras\n      let rodadas = Math.ceil(Math.log2(classificados.length));\n      for (let r = 1; r <= rodadas; r++) {\n        for (let i = 0; i < classificados.length; i += 2) {\n          if (r === rodadas) faseNome = 'Final';\n          else if (r === rodadas - 1) faseNome = 'Semifinal';\n          else if (r === rodadas - 2) faseNome = 'Quartas de Final';\n          else faseNome = `Rodada ${r}`;\n\n          jogos.push({\n            dupla1: classificados[i],\n            dupla2: classificados[i + 1] || ['BYE', ''],\n            placar: '',\n            submetido: false,\n            fase: faseNome\n          });\n        }\n        classificados = classificados.filter((_, i) => i % 2 === 0); // Mantém apenas os vencedores\n      }\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? { ...j, placar: placar, submetido: true } : j);\n      \n      // Verifica se todos os jogos da rodada atual estão submetidos\n      const rodadaAtual = Math.min(...updatedJogos.filter(j => !j.submetido).map(j => j.rodada));\n      if (updatedJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n        // Se todos os jogos da rodada foram submetidos, avança para a próxima rodada\n        if (rodadaAtual === Math.max(...updatedJogos.map(j => j.rodada))) {\n          iniciarFinal(updatedJogos);\n        }\n      }\n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([\n        {\n          dupla1: finalistas[0],\n          dupla2: finalistas[1],\n          placar: '',\n          submetido: false,\n          fase: 'Final'\n        },\n        {\n          dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n          dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n          placar: '',\n          submetido: false,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n\n    if (jogosEliminatoria.every(j => j.submetido)) {\n      finalizarTorneio();\n    }\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    if (finalConfigurada) {\n      setFaseAtual('final'); // Avança para a fase final\n    } else {\n      // Verifica se todos os jogos da semifinal foram submetidos antes de mostrar o alerta\n      const semifinais = jogosEliminatoria.filter(jogo => jogo.fase === 'Semifinal');\n      if (semifinais.every(jogo => jogo.submetido)) {\n        setFinalConfigurada(true); // Configura a final se ainda não foi configurada\n        setFaseAtual('final'); // Avança para a fase final\n      } else {\n        alert('Todos os jogos da Semifinal devem ser submetidos antes de avançar.');\n      }\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1]\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1]\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button> {/* Botão temporário */}\n          </>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria \n              jogos={jogosEliminatoria} \n              onAtualizarPlacar={atualizarPlacarNaEliminatoria} \n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal \n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')} \n              onAtualizarPlacar={atualizarPlacarNaFinal} \n              onFinalizarTorneio={finalizarTorneio}\n            />\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <ul>\n              {ranking.map((posição, index) => (\n                <li key={index}>\n                  {posição.lugar}º Lugar: {posição.dupla.join(' & ')}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}