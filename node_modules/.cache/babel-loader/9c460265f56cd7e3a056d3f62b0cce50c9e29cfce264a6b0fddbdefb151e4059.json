{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseEliminatoria.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseEliminatoria = ({\n  fase,\n  jogos,\n  onAtualizarEstatisticas\n}) => {\n  _s();\n  const [jogosState, setJogosState] = useState(jogos);\n  const [ultimaRodadaConcluida, setUltimaRodadaConcluida] = useState(0);\n\n  // UseEffect para atualizar jogosState sempre que jogos mudar\n  useEffect(() => {\n    console.log('Jogos atualizados em FaseEliminatoria:', jogos);\n    setJogosState(jogos);\n    const maxRodada = Math.max(...jogos.map(jogo => jogo.rodada));\n    setUltimaRodadaConcluida(prevRodada => Math.min(maxRodada, prevRodada));\n  }, [jogos]);\n\n  // Adicionar este useEffect para monitorar mudanças em jogosState\n  useEffect(() => {\n    console.log('Novo estado de jogos em FaseEliminatoria:', jogosState);\n  }, [jogosState]);\n  const jogosPorRodada = useMemo(() => {\n    const result = {};\n    jogosState.forEach(jogo => {\n      if (!result[jogo.rodada]) {\n        result[jogo.rodada] = [];\n      }\n      result[jogo.rodada].push(jogo);\n    });\n    return result;\n  }, [jogosState]);\n  useEffect(() => {\n    const novaUltimaRodada = Object.keys(jogosPorRodada).reduce((max, rodada) => jogosPorRodada[rodada].every(jogo => jogo.submetido) ? Math.max(max, parseInt(rodada)) : max, ultimaRodadaConcluida);\n    setUltimaRodadaConcluida(novaUltimaRodada);\n  }, [jogosState, jogosPorRodada, ultimaRodadaConcluida]);\n  const handleSubmitScore = (placar, jogoIndex) => {\n    setJogosState(prevJogos => {\n      const newJogos = prevJogos.map(jogo => jogo.jogoIndex === jogoIndex ? {\n        ...jogo,\n        placar: placar,\n        submetido: true\n      } : jogo);\n      const rodadaAtual = newJogos.find(j => j.jogoIndex === jogoIndex).rodada;\n      if (newJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n        setUltimaRodadaConcluida(rodadaAtual);\n      }\n      return newJogos;\n    });\n    onAtualizarEstatisticas({\n      jogoIndex,\n      placar,\n      rodada: jogosState.find(j => j.jogoIndex === jogoIndex).rodada\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: fase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\n      if (parseInt(rodada) <= ultimaRodadaConcluida + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: rodada === '1' ? 'Primeira Rodada' : rodada === Object.keys(jogosPorRodada).length.toString() ? 'Final' : rodada === (Object.keys(jogosPorRodada).length - 1).toString() ? 'Semifinal' : rodada === '2' ? 'Quartas de Final' : `Rodada ${rodada}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), jogosPorRodada[rodada].map(jogo => /*#__PURE__*/_jsxDEV(Jogo, {\n            jogo: jogo,\n            onSubmitScore: placar => handleSubmitScore(placar, jogo.jogoIndex)\n          }, jogo.jogoIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this))]\n        }, rodada, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this);\n      }\n      return null;\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(FaseEliminatoria, \"FA5pVd+ruejNTBZJdkceDKpJwZE=\");\n_c = FaseEliminatoria;\nexport default FaseEliminatoria;\nvar _c;\n$RefreshReg$(_c, \"FaseEliminatoria\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Jogo","jsxDEV","_jsxDEV","FaseEliminatoria","fase","jogos","onAtualizarEstatisticas","_s","jogosState","setJogosState","ultimaRodadaConcluida","setUltimaRodadaConcluida","console","log","maxRodada","Math","max","map","jogo","rodada","prevRodada","min","jogosPorRodada","result","forEach","push","novaUltimaRodada","Object","keys","reduce","every","submetido","parseInt","handleSubmitScore","placar","jogoIndex","prevJogos","newJogos","rodadaAtual","find","j","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","sort","a","b","length","toString","onSubmitScore","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseEliminatoria.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseEliminatoria = ({ fase, jogos, onAtualizarEstatisticas }) => {\r\n  const [jogosState, setJogosState] = useState(jogos);\r\n  const [ultimaRodadaConcluida, setUltimaRodadaConcluida] = useState(0);\r\n\r\n  // UseEffect para atualizar jogosState sempre que jogos mudar\r\n  useEffect(() => {\r\n    console.log('Jogos atualizados em FaseEliminatoria:', jogos);\r\n    setJogosState(jogos);\r\n    const maxRodada = Math.max(...jogos.map(jogo => jogo.rodada));\r\n    setUltimaRodadaConcluida(prevRodada => Math.min(maxRodada, prevRodada));\r\n  }, [jogos]);\r\n\r\n  // Adicionar este useEffect para monitorar mudanças em jogosState\r\n  useEffect(() => {\r\n    console.log('Novo estado de jogos em FaseEliminatoria:', jogosState);\r\n  }, [jogosState]);\r\n\r\n  const jogosPorRodada = useMemo(() => {\r\n    const result = {};\r\n    jogosState.forEach(jogo => {\r\n      if (!result[jogo.rodada]) {\r\n        result[jogo.rodada] = [];\r\n      }\r\n      result[jogo.rodada].push(jogo);\r\n    });\r\n    return result;\r\n  }, [jogosState]);\r\n\r\n  useEffect(() => {\r\n    const novaUltimaRodada = Object.keys(jogosPorRodada).reduce((max, rodada) =>\r\n      jogosPorRodada[rodada].every(jogo => jogo.submetido) ? Math.max(max, parseInt(rodada)) : max,\r\n      ultimaRodadaConcluida\r\n    );\r\n    setUltimaRodadaConcluida(novaUltimaRodada);\r\n  }, [jogosState, jogosPorRodada, ultimaRodadaConcluida]);\r\n\r\n  const handleSubmitScore = (placar, jogoIndex) => {\r\n    setJogosState(prevJogos => {\r\n      const newJogos = prevJogos.map(jogo =>\r\n        jogo.jogoIndex === jogoIndex ? { ...jogo, placar: placar, submetido: true } : jogo\r\n      );\r\n\r\n      const rodadaAtual = newJogos.find(j => j.jogoIndex === jogoIndex).rodada;\r\n      if (newJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\r\n        setUltimaRodadaConcluida(rodadaAtual);\r\n      }\r\n\r\n      return newJogos;\r\n    });\r\n\r\n    onAtualizarEstatisticas({ jogoIndex, placar, rodada: jogosState.find(j => j.jogoIndex === jogoIndex).rodada });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{fase}</h2>\r\n      {Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\r\n        if (parseInt(rodada) <= ultimaRodadaConcluida + 1) {\r\n          return (\r\n            <div key={rodada}>\r\n              <h3>\r\n                {rodada === '1' ? 'Primeira Rodada' :\r\n                  rodada === (Object.keys(jogosPorRodada).length).toString() ? 'Final' :\r\n                    rodada === (Object.keys(jogosPorRodada).length - 1).toString() ? 'Semifinal' :\r\n                      rodada === '2' ? 'Quartas de Final' :\r\n                        `Rodada ${rodada}`}\r\n              </h3>\r\n              {jogosPorRodada[rodada].map(jogo => (\r\n                <Jogo\r\n                  key={jogo.jogoIndex}\r\n                  jogo={jogo}\r\n                  onSubmitScore={(placar) => handleSubmitScore(placar, jogo.jogoIndex)}\r\n                />\r\n              ))}\r\n            </div>\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseEliminatoria;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC3D,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAwB,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAACQ,KAAK,CAAC;EACnD,MAAM,CAACK,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;;EAErE;EACAC,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAER,KAAK,CAAC;IAC5DI,aAAa,CAACJ,KAAK,CAAC;IACpB,MAAMS,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGX,KAAK,CAACY,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC;IAC7DR,wBAAwB,CAACS,UAAU,IAAIL,IAAI,CAACM,GAAG,CAACP,SAAS,EAAEM,UAAU,CAAC,CAAC;EACzE,CAAC,EAAE,CAACf,KAAK,CAAC,CAAC;;EAEX;EACAP,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEL,UAAU,CAAC;EACtE,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMc,cAAc,GAAGvB,OAAO,CAAC,MAAM;IACnC,MAAMwB,MAAM,GAAG,CAAC,CAAC;IACjBf,UAAU,CAACgB,OAAO,CAACN,IAAI,IAAI;MACzB,IAAI,CAACK,MAAM,CAACL,IAAI,CAACC,MAAM,CAAC,EAAE;QACxBI,MAAM,CAACL,IAAI,CAACC,MAAM,CAAC,GAAG,EAAE;MAC1B;MACAI,MAAM,CAACL,IAAI,CAACC,MAAM,CAAC,CAACM,IAAI,CAACP,IAAI,CAAC;IAChC,CAAC,CAAC;IACF,OAAOK,MAAM;EACf,CAAC,EAAE,CAACf,UAAU,CAAC,CAAC;EAEhBV,SAAS,CAAC,MAAM;IACd,MAAM4B,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAACN,cAAc,CAAC,CAACO,MAAM,CAAC,CAACb,GAAG,EAAEG,MAAM,KACtEG,cAAc,CAACH,MAAM,CAAC,CAACW,KAAK,CAACZ,IAAI,IAAIA,IAAI,CAACa,SAAS,CAAC,GAAGhB,IAAI,CAACC,GAAG,CAACA,GAAG,EAAEgB,QAAQ,CAACb,MAAM,CAAC,CAAC,GAAGH,GAAG,EAC5FN,qBACF,CAAC;IACDC,wBAAwB,CAACe,gBAAgB,CAAC;EAC5C,CAAC,EAAE,CAAClB,UAAU,EAAEc,cAAc,EAAEZ,qBAAqB,CAAC,CAAC;EAEvD,MAAMuB,iBAAiB,GAAGA,CAACC,MAAM,EAAEC,SAAS,KAAK;IAC/C1B,aAAa,CAAC2B,SAAS,IAAI;MACzB,MAAMC,QAAQ,GAAGD,SAAS,CAACnB,GAAG,CAACC,IAAI,IACjCA,IAAI,CAACiB,SAAS,KAAKA,SAAS,GAAG;QAAE,GAAGjB,IAAI;QAAEgB,MAAM,EAAEA,MAAM;QAAEH,SAAS,EAAE;MAAK,CAAC,GAAGb,IAChF,CAAC;MAED,MAAMoB,WAAW,GAAGD,QAAQ,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,SAAS,KAAKA,SAAS,CAAC,CAAChB,MAAM;MACxE,IAAIkB,QAAQ,CAACI,MAAM,CAACD,CAAC,IAAIA,CAAC,CAACrB,MAAM,KAAKmB,WAAW,CAAC,CAACR,KAAK,CAACU,CAAC,IAAIA,CAAC,CAACT,SAAS,CAAC,EAAE;QAC1EpB,wBAAwB,CAAC2B,WAAW,CAAC;MACvC;MAEA,OAAOD,QAAQ;IACjB,CAAC,CAAC;IAEF/B,uBAAuB,CAAC;MAAE6B,SAAS;MAAED,MAAM;MAAEf,MAAM,EAAEX,UAAU,CAAC+B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,SAAS,KAAKA,SAAS,CAAC,CAAChB;IAAO,CAAC,CAAC;EAChH,CAAC;EAED,oBACEjB,OAAA;IAAAwC,QAAA,gBACExC,OAAA;MAAAwC,QAAA,EAAKtC;IAAI;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACdnB,MAAM,CAACC,IAAI,CAACN,cAAc,CAAC,CAACyB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,CAAChC,GAAG,CAACE,MAAM,IAAI;MAC/D,IAAIa,QAAQ,CAACb,MAAM,CAAC,IAAIT,qBAAqB,GAAG,CAAC,EAAE;QACjD,oBACER,OAAA;UAAAwC,QAAA,gBACExC,OAAA;YAAAwC,QAAA,EACGvB,MAAM,KAAK,GAAG,GAAG,iBAAiB,GACjCA,MAAM,KAAMQ,MAAM,CAACC,IAAI,CAACN,cAAc,CAAC,CAAC4B,MAAM,CAAEC,QAAQ,CAAC,CAAC,GAAG,OAAO,GAClEhC,MAAM,KAAK,CAACQ,MAAM,CAACC,IAAI,CAACN,cAAc,CAAC,CAAC4B,MAAM,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC,GAAG,WAAW,GAC1EhC,MAAM,KAAK,GAAG,GAAG,kBAAkB,GACjC,UAAUA,MAAM;UAAE;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxB,CAAC,EACJxB,cAAc,CAACH,MAAM,CAAC,CAACF,GAAG,CAACC,IAAI,iBAC9BhB,OAAA,CAACF,IAAI;YAEHkB,IAAI,EAAEA,IAAK;YACXkC,aAAa,EAAGlB,MAAM,IAAKD,iBAAiB,CAACC,MAAM,EAAEhB,IAAI,CAACiB,SAAS;UAAE,GAFhEjB,IAAI,CAACiB,SAAS;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGpB,CACF,CAAC;QAAA,GAdM3B,MAAM;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAeX,CAAC;MAEV;MACA,OAAO,IAAI;IACb,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACvC,EAAA,CAjFIJ,gBAAgB;AAAAkD,EAAA,GAAhBlD,gBAAgB;AAmFtB,eAAeA,gBAAgB;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}