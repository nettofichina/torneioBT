{"ast":null,"code":"export const dividirGrupos = duplas => {\n  if (duplas.length < 3) {\n    throw new Error(\"É necessário pelo menos 3 duplas para formar grupos.\");\n  }\n  let numGrupos;\n  if (duplas.length <= 5) numGrupos = 1;else if (duplas.length <= 8) numGrupos = 2;else if (duplas.length <= 11) numGrupos = 3;else if (duplas.length <= 14) numGrupos = 4;else if (duplas.length <= 17) numGrupos = 5;else numGrupos = 6;\n  let grupos = [];\n  let duplasPorGrupo = Math.floor(duplas.length / numGrupos);\n  let resto = duplas.length % numGrupos;\n  for (let i = 0; i < numGrupos; i++) {\n    let grupoSize = duplasPorGrupo + (i < resto ? 1 : 0);\n    grupos.push({\n      id: i,\n      duplas: duplas.splice(0, grupoSize),\n      jogos: []\n    });\n  }\n\n  // Ajuste final para garantir que cada grupo tenha pelo menos 3 duplas se possível\n  if (numGrupos > 1) {\n    while (grupos.some(g => g.duplas.length < 3) && duplas.length > 0) {\n      let menorGrupo = grupos.reduce((menor, grupo) => grupo.duplas.length < menor.duplas.length ? grupo : menor);\n      menorGrupo.duplas.push(duplas.shift());\n    }\n  }\n\n  // Atualizar jogos para cada grupo\n  grupos.forEach(grupo => {\n    grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n  });\n  return grupos;\n};\nexport const criarJogosParaGrupo = (duplas, grupoIndex = 0) => {\n  let jogos = [];\n  for (let i = 0; i < duplas.length; i++) {\n    for (let j = i + 1; j < duplas.length; j++) {\n      jogos.push({\n        dupla1: duplas[i],\n        dupla2: duplas[j],\n        placar: '',\n        submetido: false,\n        jogoIndex: jogos.length,\n        grupoIndex\n      });\n    }\n  }\n  return jogos;\n};\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\n  const duplasComEstatisticas = duplas.map(dupla => {\n    const duplaKey = dupla.join(',');\n\n    // Inicializando estatísticas padrão\n    let stats = {\n      pontos: 0,\n      setsVencidos: 0,\n      setsPerdidos: 0,\n      confrontos: 0\n    };\n\n    // Calculando estatísticas baseadas nos jogos\n    jogos.forEach(jogo => {\n      if (jogo.dupla1.join(',') === duplaKey || jogo.dupla2.join(',') === duplaKey) {\n        stats.confrontos++;\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        if (jogo.dupla1.join(',') === duplaKey) {\n          stats.setsVencidos += set1;\n          stats.setsPerdidos += set2;\n          if (set1 > set2) stats.pontos++; // Ganhou o jogo\n        } else {\n          stats.setsVencidos += set2;\n          stats.setsPerdidos += set1;\n          if (set2 > set1) stats.pontos++; // Ganhou o jogo\n        }\n      }\n    });\n    return {\n      dupla,\n      ...stats\n    };\n  });\n\n  // Classificação baseada em pontos, saldo de sets e confrontos diretos\n  return duplasComEstatisticas.sort((a, b) => {\n    if (b.pontos !== a.pontos) return b.pontos - a.pontos;\n    const saldoA = a.setsVencidos - a.setsPerdidos;\n    const saldoB = b.setsVencidos - b.setsPerdidos;\n    if (saldoB !== saldoA) return saldoB - saldoA;\n\n    // Confronto direto\n    const jogoDireto = jogos.find(j => j.dupla1.join(',') === a.dupla.join(',') && j.dupla2.join(',') === b.dupla.join(',') || j.dupla1.join(',') === b.dupla.join(',') && j.dupla2.join(',') === a.dupla.join(','));\n    if (jogoDireto) {\n      const [set1, set2] = jogoDireto.placar.split('-').map(Number);\n      return jogoDireto.dupla1.join(',') === a.dupla.join(',') ? set1 - set2 : set2 - set1;\n    }\n\n    // Se ainda estiver empatado, você pode adicionar mais critérios ou usar um sorteio\n    return 0;\n  }).map(entry => entry.dupla); // Retorna apenas as duplas classificadas\n};","map":{"version":3,"names":["dividirGrupos","duplas","length","Error","numGrupos","grupos","duplasPorGrupo","Math","floor","resto","i","grupoSize","push","id","splice","jogos","some","g","menorGrupo","reduce","menor","grupo","shift","forEach","criarJogosParaGrupo","grupoIndex","j","dupla1","dupla2","placar","submetido","jogoIndex","classificarDuplasPorDesempate","duplasComEstatisticas","map","dupla","duplaKey","join","stats","pontos","setsVencidos","setsPerdidos","confrontos","jogo","set1","set2","split","Number","sort","a","b","saldoA","saldoB","jogoDireto","find","entry"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["export const dividirGrupos = (duplas) => {\r\n  if (duplas.length < 3) {\r\n    throw new Error(\"É necessário pelo menos 3 duplas para formar grupos.\");\r\n  }\r\n  \r\n  let numGrupos;\r\n  if (duplas.length <= 5) numGrupos = 1;\r\n  else if (duplas.length <= 8) numGrupos = 2;\r\n  else if (duplas.length <= 11) numGrupos = 3;\r\n  else if (duplas.length <= 14) numGrupos = 4;\r\n  else if (duplas.length <= 17) numGrupos = 5;\r\n  else numGrupos = 6;\r\n\r\n  let grupos = [];\r\n  let duplasPorGrupo = Math.floor(duplas.length / numGrupos);\r\n  let resto = duplas.length % numGrupos;\r\n\r\n  for (let i = 0; i < numGrupos; i++) {\r\n    let grupoSize = duplasPorGrupo + (i < resto ? 1 : 0);\r\n    grupos.push({\r\n      id: i,\r\n      duplas: duplas.splice(0, grupoSize),\r\n      jogos: []\r\n    });\r\n  }\r\n\r\n  // Ajuste final para garantir que cada grupo tenha pelo menos 3 duplas se possível\r\n  if (numGrupos > 1) {\r\n    while (grupos.some(g => g.duplas.length < 3) && duplas.length > 0) {\r\n      let menorGrupo = grupos.reduce((menor, grupo) => grupo.duplas.length < menor.duplas.length ? grupo : menor);\r\n      menorGrupo.duplas.push(duplas.shift());\r\n    }\r\n  }\r\n\r\n  // Atualizar jogos para cada grupo\r\n  grupos.forEach(grupo => {\r\n    grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\r\n  });\r\n\r\n  return grupos;\r\n};\r\n\r\nexport const criarJogosParaGrupo = (duplas, grupoIndex = 0) => {\r\n  let jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        jogoIndex: jogos.length,\r\n        grupoIndex\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  const duplasComEstatisticas = duplas.map(dupla => {\r\n    const duplaKey = dupla.join(',');\r\n\r\n    // Inicializando estatísticas padrão\r\n    let stats = { \r\n      pontos: 0,\r\n      setsVencidos: 0,\r\n      setsPerdidos: 0,\r\n      confrontos: 0\r\n    };\r\n\r\n    // Calculando estatísticas baseadas nos jogos\r\n    jogos.forEach(jogo => {\r\n      if (jogo.dupla1.join(',') === duplaKey || jogo.dupla2.join(',') === duplaKey) {\r\n        stats.confrontos++;\r\n        const [set1, set2] = jogo.placar.split('-').map(Number);\r\n        if (jogo.dupla1.join(',') === duplaKey) {\r\n          stats.setsVencidos += set1;\r\n          stats.setsPerdidos += set2;\r\n          if (set1 > set2) stats.pontos++; // Ganhou o jogo\r\n        } else {\r\n          stats.setsVencidos += set2;\r\n          stats.setsPerdidos += set1;\r\n          if (set2 > set1) stats.pontos++; // Ganhou o jogo\r\n        }\r\n      }\r\n    });\r\n\r\n    return { dupla, ...stats };\r\n  });\r\n\r\n  // Classificação baseada em pontos, saldo de sets e confrontos diretos\r\n  return duplasComEstatisticas.sort((a, b) => {\r\n    if (b.pontos !== a.pontos) return b.pontos - a.pontos;\r\n    const saldoA = a.setsVencidos - a.setsPerdidos;\r\n    const saldoB = b.setsVencidos - b.setsPerdidos;\r\n    if (saldoB !== saldoA) return saldoB - saldoA;\r\n\r\n    // Confronto direto\r\n    const jogoDireto = jogos.find(j => \r\n      (j.dupla1.join(',') === a.dupla.join(',') && j.dupla2.join(',') === b.dupla.join(',')) ||\r\n      (j.dupla1.join(',') === b.dupla.join(',') && j.dupla2.join(',') === a.dupla.join(','))\r\n    );\r\n    if (jogoDireto) {\r\n      const [set1, set2] = jogoDireto.placar.split('-').map(Number);\r\n      return jogoDireto.dupla1.join(',') === a.dupla.join(',') ? set1 - set2 : set2 - set1;\r\n    }\r\n\r\n    // Se ainda estiver empatado, você pode adicionar mais critérios ou usar um sorteio\r\n    return 0;\r\n  }).map(entry => entry.dupla); // Retorna apenas as duplas classificadas\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}