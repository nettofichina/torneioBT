{"ast":null,"code":"export const dividirGrupos = duplas => {\n  // Lógica para dividir as duplas em grupos conforme o regulamento\n  // Aqui vai uma simplificação para o exemplo.\n  const grupos = [];\n  let grupoSize = Math.floor(duplas.length / 3); // Divisão básica em 3 grupos\n  for (let i = 0; i < duplas.length; i += grupoSize) {\n    grupos.push({\n      id: grupos.length,\n      duplas: duplas.slice(i, i + grupoSize),\n      jogos: [] // Jogos serão adicionados posteriormente\n    });\n  }\n  return grupos;\n};\nexport const criarJogosParaGrupo = grupo => {\n  let jogos = [];\n  for (let i = 0; i < grupo.duplas.length; i++) {\n    for (let j = i + 1; j < grupo.duplas.length; j++) {\n      jogos.push({\n        dupla1: grupo.duplas[i],\n        dupla2: grupo.duplas[j],\n        placar: '',\n        submetido: false,\n        jogoIndex: jogos.length\n      });\n    }\n  }\n  return jogos;\n};\n\n// Função dummy para classificar por desempate\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\n  // Aqui vai a lógica de desempate conforme o regulamento\n  return duplas.sort(() => Math.random() - 0.5); // Dummy sort\n};\n\n// Objeto para armazenar estatísticas das duplas\nexport const duplasEstatisticas = {};","map":{"version":3,"names":["dividirGrupos","duplas","grupos","grupoSize","Math","floor","length","i","push","id","slice","jogos","criarJogosParaGrupo","grupo","j","dupla1","dupla2","placar","submetido","jogoIndex","classificarDuplasPorDesempate","sort","random","duplasEstatisticas"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["export const dividirGrupos = (duplas) => {\r\n  // Lógica para dividir as duplas em grupos conforme o regulamento\r\n  // Aqui vai uma simplificação para o exemplo.\r\n  const grupos = [];\r\n  let grupoSize = Math.floor(duplas.length / 3); // Divisão básica em 3 grupos\r\n  for (let i = 0; i < duplas.length; i += grupoSize) {\r\n    grupos.push({\r\n      id: grupos.length,\r\n      duplas: duplas.slice(i, i + grupoSize),\r\n      jogos: [] // Jogos serão adicionados posteriormente\r\n    });\r\n  }\r\n  return grupos;\r\n};\r\n\r\nexport const criarJogosParaGrupo = (grupo) => {\r\n  let jogos = [];\r\n  for (let i = 0; i < grupo.duplas.length; i++) {\r\n    for (let j = i + 1; j < grupo.duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: grupo.duplas[i],\r\n        dupla2: grupo.duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        jogoIndex: jogos.length\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\n// Função dummy para classificar por desempate\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  // Aqui vai a lógica de desempate conforme o regulamento\r\n  return duplas.sort(() => Math.random() - 0.5); // Dummy sort\r\n};\r\n\r\n// Objeto para armazenar estatísticas das duplas\r\nexport const duplasEstatisticas = {};"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAIC,MAAM,IAAK;EACvC;EACA;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;EAC/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,CAACK,MAAM,EAAEC,CAAC,IAAIJ,SAAS,EAAE;IACjDD,MAAM,CAACM,IAAI,CAAC;MACVC,EAAE,EAAEP,MAAM,CAACI,MAAM;MACjBL,MAAM,EAAEA,MAAM,CAACS,KAAK,CAACH,CAAC,EAAEA,CAAC,GAAGJ,SAAS,CAAC;MACtCQ,KAAK,EAAE,EAAE,CAAC;IACZ,CAAC,CAAC;EACJ;EACA,OAAOT,MAAM;AACf,CAAC;AAED,OAAO,MAAMU,mBAAmB,GAAIC,KAAK,IAAK;EAC5C,IAAIF,KAAK,GAAG,EAAE;EACd,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,KAAK,CAACZ,MAAM,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC5C,KAAK,IAAIO,CAAC,GAAGP,CAAC,GAAG,CAAC,EAAEO,CAAC,GAAGD,KAAK,CAACZ,MAAM,CAACK,MAAM,EAAEQ,CAAC,EAAE,EAAE;MAChDH,KAAK,CAACH,IAAI,CAAC;QACTO,MAAM,EAAEF,KAAK,CAACZ,MAAM,CAACM,CAAC,CAAC;QACvBS,MAAM,EAAEH,KAAK,CAACZ,MAAM,CAACa,CAAC,CAAC;QACvBG,MAAM,EAAE,EAAE;QACVC,SAAS,EAAE,KAAK;QAChBC,SAAS,EAAER,KAAK,CAACL;MACnB,CAAC,CAAC;IACJ;EACF;EACA,OAAOK,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMS,6BAA6B,GAAGA,CAACnB,MAAM,EAAEU,KAAK,KAAK;EAC9D;EACA,OAAOV,MAAM,CAACoB,IAAI,CAAC,MAAMjB,IAAI,CAACkB,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AACjD,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}