{"ast":null,"code":"// src/utils/torneioUtils.js\nexport const classificarDuplas = grupos => {\n  let classificados = [];\n  grupos.forEach(grupo => {\n    // Ordena duplas do grupo com base nos critérios de desempate\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n\n    // Adiciona os 2 melhores de cada grupo à lista de classificados\n    classificados.push(duplasClassificadas[0], duplasClassificadas[1]);\n  });\n  console.log(\"Duplas classificadas para a fase eliminatória:\", classificados);\n  return classificados;\n};\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\n  const jogos = [];\n  for (let i = 0; i < duplas.length; i++) {\n    for (let j = i + 1; j < duplas.length; j++) {\n      jogos.push({\n        dupla1: duplas[i],\n        dupla2: duplas[j],\n        placar: '',\n        submetido: false,\n        grupoId\n      });\n    }\n  }\n  return jogos;\n};\nexport const dividirGrupos = duplas => {\n  let numGrupos = Math.ceil(duplas.length / 3); // 3 é o número mínimo de duplas por grupo\n\n  if (duplas.length <= 5) numGrupos = 1; // Grupo único para até 5 duplas\n  else if (duplas.length <= 8) numGrupos = 2;else if (duplas.length <= 11) numGrupos = 3;else if (duplas.length <= 14) numGrupos = 4;else if (duplas.length <= 17) numGrupos = 5;else if (duplas.length <= 20) numGrupos = 6;\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\n    id: i,\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\n  }));\n  return grupos;\n};\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\n  const resultados = duplas.reduce((acc, dupla) => {\n    acc[dupla.join('')] = {\n      dupla,\n      pontos: 0\n    };\n    return acc;\n  }, {});\n  jogos.forEach(jogo => {\n    if (jogo.placar) {\n      const [games1, games2] = jogo.placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n\n      // Ajusta os pontos para cada dupla\n      if (games1 > games2) {\n        // Dupla 1 ganhou\n        resultados[chave1].pontos += 5;\n        resultados[chave2].pontos -= 5;\n      } else {\n        // Dupla 2 ganhou (não há empate)\n        resultados[chave2].pontos += 5;\n        resultados[chave1].pontos -= 5;\n      }\n    }\n  });\n\n  // Ordena por pontos\n  return Object.values(resultados).sort((a, b) => b.pontos - a.pontos).map(r => r.dupla);\n};\nexport const iniciarFaseEliminatoria = classificados => {\n  let jogos = [];\n  let totalDuplas = classificados.length;\n\n  // Ajusta para garantir que o número de duplas seja uma potência de 2 (2, 4, 8, 16...)\n  let proximoMultiplo = Math.pow(2, Math.ceil(Math.log2(totalDuplas)));\n  let byes = proximoMultiplo - totalDuplas;\n\n  // Adiciona BYEs para ajustar a chave\n  let classificadosAjustados = [...classificados];\n  for (let i = 0; i < byes; i++) {\n    classificadosAjustados.push([\"BYE\", \"\"]);\n  }\n  let rodadas = Math.log2(proximoMultiplo);\n  for (let r = 1; r <= rodadas; r++) {\n    let rodadaJogos = [];\n    for (let i = 0; i < classificadosAjustados.length; i += 2) {\n      let faseNome = '';\n      if (r === rodadas) faseNome = 'Final';else if (r === rodadas - 1) faseNome = 'Semifinal';else if (r === rodadas - 2) faseNome = 'Quartas de Final';else faseNome = `Rodada ${r}`;\n      rodadaJogos.push({\n        dupla1: classificadosAjustados[i],\n        dupla2: classificadosAjustados[i + 1] || ['BYE', ''],\n        placar: '',\n        submetido: false,\n        fase: faseNome,\n        rodada: r\n      });\n    }\n\n    // Apenas vencedores avançam\n    classificadosAjustados = rodadaJogos.map(jogo => jogo.dupla1);\n    jogos.push(...rodadaJogos);\n  }\n  return jogos;\n};","map":{"version":3,"names":["classificarDuplas","grupos","classificados","forEach","grupo","duplasClassificadas","classificarDuplasPorDesempate","duplas","jogos","push","console","log","criarJogosParaGrupo","grupoId","i","length","j","dupla1","dupla2","placar","submetido","dividirGrupos","numGrupos","Math","ceil","Array","fill","map","_","id","slice","resultados","reduce","acc","dupla","join","pontos","jogo","games1","games2","split","Number","chave1","chave2","Object","values","sort","a","b","r","iniciarFaseEliminatoria","totalDuplas","proximoMultiplo","pow","log2","byes","classificadosAjustados","rodadas","rodadaJogos","faseNome","fase","rodada"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["// src/utils/torneioUtils.js\r\nexport const classificarDuplas = (grupos) => {\r\n  let classificados = [];\r\n\r\n  grupos.forEach(grupo => {\r\n    // Ordena duplas do grupo com base nos critérios de desempate\r\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\r\n\r\n    // Adiciona os 2 melhores de cada grupo à lista de classificados\r\n    classificados.push(duplasClassificadas[0], duplasClassificadas[1]);\r\n  });\r\n\r\n  console.log(\"Duplas classificadas para a fase eliminatória:\", classificados);\r\n  return classificados;\r\n};\r\n\r\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\r\n  const jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        grupoId\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const dividirGrupos = (duplas) => {\r\n  let numGrupos = Math.ceil(duplas.length / 3); // 3 é o número mínimo de duplas por grupo\r\n  \r\n  if (duplas.length <= 5) numGrupos = 1; // Grupo único para até 5 duplas\r\n  else if (duplas.length <= 8) numGrupos = 2;\r\n  else if (duplas.length <= 11) numGrupos = 3;\r\n  else if (duplas.length <= 14) numGrupos = 4;\r\n  else if (duplas.length <= 17) numGrupos = 5;\r\n  else if (duplas.length <= 20) numGrupos = 6;\r\n\r\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\r\n    id: i,\r\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\r\n  }));\r\n\r\n  return grupos;\r\n};\r\n\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  const resultados = duplas.reduce((acc, dupla) => {\r\n    acc[dupla.join('')] = { dupla, pontos: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  jogos.forEach(jogo => {\r\n    if (jogo.placar) {\r\n      const [games1, games2] = jogo.placar.split('-').map(Number);\r\n      const chave1 = jogo.dupla1.join('');\r\n      const chave2 = jogo.dupla2.join('');\r\n\r\n      // Ajusta os pontos para cada dupla\r\n      if (games1 > games2) {  // Dupla 1 ganhou\r\n        resultados[chave1].pontos += 5;\r\n        resultados[chave2].pontos -= 5;\r\n      } else {  // Dupla 2 ganhou (não há empate)\r\n        resultados[chave2].pontos += 5;\r\n        resultados[chave1].pontos -= 5;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Ordena por pontos\r\n  return Object.values(resultados).sort((a, b) => b.pontos - a.pontos).map(r => r.dupla);\r\n};\r\n\r\nexport const iniciarFaseEliminatoria = (classificados) => {\r\n  let jogos = [];\r\n  let totalDuplas = classificados.length;\r\n\r\n  // Ajusta para garantir que o número de duplas seja uma potência de 2 (2, 4, 8, 16...)\r\n  let proximoMultiplo = Math.pow(2, Math.ceil(Math.log2(totalDuplas)));\r\n  let byes = proximoMultiplo - totalDuplas;\r\n\r\n  // Adiciona BYEs para ajustar a chave\r\n  let classificadosAjustados = [...classificados];\r\n  for (let i = 0; i < byes; i++) {\r\n    classificadosAjustados.push([\"BYE\", \"\"]);\r\n  }\r\n\r\n  let rodadas = Math.log2(proximoMultiplo);\r\n\r\n  for (let r = 1; r <= rodadas; r++) {\r\n    let rodadaJogos = [];\r\n\r\n    for (let i = 0; i < classificadosAjustados.length; i += 2) {\r\n      let faseNome = '';\r\n      if (r === rodadas) faseNome = 'Final';\r\n      else if (r === rodadas - 1) faseNome = 'Semifinal';\r\n      else if (r === rodadas - 2) faseNome = 'Quartas de Final';\r\n      else faseNome = `Rodada ${r}`;\r\n\r\n      rodadaJogos.push({\r\n        dupla1: classificadosAjustados[i],\r\n        dupla2: classificadosAjustados[i + 1] || ['BYE', ''],\r\n        placar: '',\r\n        submetido: false,\r\n        fase: faseNome,\r\n        rodada: r\r\n      });\r\n    }\r\n\r\n    // Apenas vencedores avançam\r\n    classificadosAjustados = rodadaJogos.map(jogo => jogo.dupla1);\r\n\r\n    jogos.push(...rodadaJogos);\r\n  }\r\n\r\n  return jogos;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}