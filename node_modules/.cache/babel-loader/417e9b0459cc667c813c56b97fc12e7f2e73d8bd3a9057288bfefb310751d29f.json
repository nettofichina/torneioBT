{"ast":null,"code":"// Função para dividir as duplas em grupos conforme o regulamento do torneio\nexport const dividirGrupos = duplas => {\n  if (duplas.length < 3) {\n    throw new Error(\"É necessário pelo menos 3 duplas para formar grupos.\");\n  }\n  let numGrupos;\n  if (duplas.length <= 5) numGrupos = 1;else if (duplas.length <= 8) numGrupos = 2;else if (duplas.length <= 11) numGrupos = 3;else if (duplas.length <= 14) numGrupos = 4;else if (duplas.length <= 17) numGrupos = 5;else numGrupos = 6;\n  let grupos = [];\n  for (let i = 0; i < numGrupos; i++) {\n    let grupoSize = Math.ceil((duplas.length - i * Math.ceil(duplas.length / numGrupos)) / (numGrupos - i));\n    grupos.push(duplas.splice(0, grupoSize));\n  }\n\n  // Correção para garantir distribuição igual para 6 a 8 duplas\n  // Aqui, garantimos que cada grupo tenha pelo menos 3 duplas se possível\n  if (duplas.length === 8 && grupos.length === 2) {\n    if (grupos[0].length !== grupos[1].length) {\n      let diferenca = grupos[0].length - grupos[1].length;\n      if (diferenca > 0) {\n        grupos[1].push(...grupos[0].splice(0, diferenca));\n      } else {\n        grupos[0].push(...grupos[1].splice(0, -diferenca));\n      }\n    }\n  } else if (duplas.length > 5 && duplas.length <= 8) {\n    // Caso de 6 a 7 duplas\n    if (grupos[0].length < 3) {\n      let mover = 3 - grupos[0].length;\n      grupos[0].push(...grupos[1].splice(0, mover));\n    }\n  }\n  return grupos.map((g, index) => ({\n    id: index,\n    duplas: g,\n    jogos: criarJogosParaGrupo(g, index)\n  }));\n};\n\n// Função para criar jogos para um grupo específico\nexport const criarJogosParaGrupo = (grupo, grupoIndex) => {\n  let jogosGrupo = [];\n  for (let i = 0; i < grupo.length; i++) {\n    for (let j = i + 1; j < grupo.length; j++) {\n      jogosGrupo.push({\n        dupla1: grupo[i],\n        dupla2: grupo[j],\n        placar: '',\n        submetido: false,\n        grupoIndex,\n        jogoIndex: jogosGrupo.length\n      });\n    }\n  }\n  return jogosGrupo;\n};\n\n// Objeto para armazenar as estatísticas das duplas\nexport const duplasEstatisticas = {};\n\n// Função para atualizar as estatísticas após um jogo\nexport const atualizarEstatisticas = jogo => {\n  const [set1, set2] = jogo.placar.split('-').map(Number);\n  const vencedor = set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n  const perdedor = vencedor === jogo.dupla1 ? jogo.dupla2 : jogo.dupla1;\n  function updateStats(dupla, pontos) {\n    const duplaKey = dupla.join(',');\n    if (!duplasEstatisticas[duplaKey]) {\n      duplasEstatisticas[duplaKey] = {\n        jogos: 0,\n        pontos: 0,\n        setsVencidos: 0,\n        setsPerdidos: 0\n      };\n    }\n    duplasEstatisticas[duplaKey].jogos++;\n    duplasEstatisticas[duplaKey].pontos += pontos;\n    if (dupla === vencedor) {\n      duplasEstatisticas[duplaKey].setsVencidos += set1;\n      duplasEstatisticas[duplaKey].setsPerdidos += set2;\n    } else {\n      duplasEstatisticas[duplaKey].setsVencidos += set2;\n      duplasEstatisticas[duplaKey].setsPerdidos += set1;\n    }\n  }\n  updateStats(vencedor, 3); // Supondo 3 pontos por vitória\n  updateStats(perdedor, 1); // Supondo 1 ponto por derrota\n};\n\n// Função para classificar duplas por desempate\nexport const classificarDuplasPorDesempate = (grupo, jogos) => {\n  return grupo.sort((a, b) => {\n    let statsA = duplasEstatisticas[a.join(',')] || {\n      pontos: 0,\n      setsVencidos: 0,\n      setsPerdidos: 0\n    };\n    let statsB = duplasEstatisticas[b.join(',')] || {\n      pontos: 0,\n      setsVencidos: 0,\n      setsPerdidos: 0\n    };\n    if (statsB.pontos !== statsA.pontos) return statsB.pontos - statsA.pontos;\n    let saldoA = statsA.setsVencidos - statsA.setsPerdidos;\n    let saldoB = statsB.setsVencidos - statsB.setsPerdidos;\n    if (saldoA !== saldoB) return saldoB - saldoA;\n\n    // Confronto direto\n    const jogoDireto = jogos.find(j => j.dupla1.join(',') === a.join(',') && j.dupla2.join(',') === b.join(',') || j.dupla1.join(',') === b.join(',') && j.dupla2.join(',') === a.join(','));\n    if (jogoDireto) {\n      const [set1, set2] = jogoDireto.placar.split('-').map(Number);\n      return jogoDireto.dupla1.join(',') === a.join(',') ? set1 - set2 : set2 - set1;\n    }\n\n    // Se ainda estiver empatado, você pode adicionar mais critérios ou usar um sorteio\n    return 0;\n  });\n};","map":{"version":3,"names":["dividirGrupos","duplas","length","Error","numGrupos","grupos","i","grupoSize","Math","ceil","push","splice","diferenca","mover","map","g","index","id","jogos","criarJogosParaGrupo","grupo","grupoIndex","jogosGrupo","j","dupla1","dupla2","placar","submetido","jogoIndex","duplasEstatisticas","atualizarEstatisticas","jogo","set1","set2","split","Number","vencedor","perdedor","updateStats","dupla","pontos","duplaKey","join","setsVencidos","setsPerdidos","classificarDuplasPorDesempate","sort","a","b","statsA","statsB","saldoA","saldoB","jogoDireto","find"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["// Função para dividir as duplas em grupos conforme o regulamento do torneio\r\nexport const dividirGrupos = (duplas) => {\r\n    if (duplas.length < 3) {\r\n      throw new Error(\"É necessário pelo menos 3 duplas para formar grupos.\");\r\n    }\r\n    \r\n    let numGrupos;\r\n    if (duplas.length <= 5) numGrupos = 1;\r\n    else if (duplas.length <= 8) numGrupos = 2;\r\n    else if (duplas.length <= 11) numGrupos = 3;\r\n    else if (duplas.length <= 14) numGrupos = 4;\r\n    else if (duplas.length <= 17) numGrupos = 5;\r\n    else numGrupos = 6;\r\n  \r\n    let grupos = [];\r\n    for (let i = 0; i < numGrupos; i++) {\r\n      let grupoSize = Math.ceil((duplas.length - (i * Math.ceil(duplas.length / numGrupos))) / (numGrupos - i));\r\n      grupos.push(duplas.splice(0, grupoSize));\r\n    }\r\n  \r\n    // Correção para garantir distribuição igual para 6 a 8 duplas\r\n    // Aqui, garantimos que cada grupo tenha pelo menos 3 duplas se possível\r\n    if (duplas.length === 8 && grupos.length === 2) {\r\n      if (grupos[0].length !== grupos[1].length) {\r\n        let diferenca = grupos[0].length - grupos[1].length;\r\n        if (diferenca > 0) {\r\n          grupos[1].push(...grupos[0].splice(0, diferenca));\r\n        } else {\r\n          grupos[0].push(...grupos[1].splice(0, -diferenca));\r\n        }\r\n      }\r\n    } else if (duplas.length > 5 && duplas.length <= 8) { // Caso de 6 a 7 duplas\r\n      if (grupos[0].length < 3) {\r\n        let mover = 3 - grupos[0].length;\r\n        grupos[0].push(...grupos[1].splice(0, mover));\r\n      }\r\n    }\r\n  \r\n    return grupos.map((g, index) => ({\r\n      id: index,\r\n      duplas: g,\r\n      jogos: criarJogosParaGrupo(g, index)\r\n    }));\r\n  };\r\n  \r\n  // Função para criar jogos para um grupo específico\r\n  export const criarJogosParaGrupo = (grupo, grupoIndex) => {\r\n    let jogosGrupo = [];\r\n    for (let i = 0; i < grupo.length; i++) {\r\n      for (let j = i + 1; j < grupo.length; j++) {\r\n        jogosGrupo.push({\r\n          dupla1: grupo[i],\r\n          dupla2: grupo[j],\r\n          placar: '',\r\n          submetido: false,\r\n          grupoIndex,\r\n          jogoIndex: jogosGrupo.length\r\n        });\r\n      }\r\n    }\r\n    return jogosGrupo;\r\n  };\r\n  \r\n  // Objeto para armazenar as estatísticas das duplas\r\n  export const duplasEstatisticas = {};\r\n  \r\n  // Função para atualizar as estatísticas após um jogo\r\n  export const atualizarEstatisticas = (jogo) => {\r\n    const [set1, set2] = jogo.placar.split('-').map(Number);\r\n    const vencedor = set1 > set2 ? jogo.dupla1 : jogo.dupla2;\r\n    const perdedor = vencedor === jogo.dupla1 ? jogo.dupla2 : jogo.dupla1;\r\n  \r\n    function updateStats(dupla, pontos) {\r\n      const duplaKey = dupla.join(',');\r\n      if (!duplasEstatisticas[duplaKey]) {\r\n        duplasEstatisticas[duplaKey] = { jogos: 0, pontos: 0, setsVencidos: 0, setsPerdidos: 0 };\r\n      }\r\n      duplasEstatisticas[duplaKey].jogos++;\r\n      duplasEstatisticas[duplaKey].pontos += pontos;\r\n      if (dupla === vencedor) {\r\n        duplasEstatisticas[duplaKey].setsVencidos += set1;\r\n        duplasEstatisticas[duplaKey].setsPerdidos += set2;\r\n      } else {\r\n        duplasEstatisticas[duplaKey].setsVencidos += set2;\r\n        duplasEstatisticas[duplaKey].setsPerdidos += set1;\r\n      }\r\n    }\r\n  \r\n    updateStats(vencedor, 3); // Supondo 3 pontos por vitória\r\n    updateStats(perdedor, 1); // Supondo 1 ponto por derrota\r\n  };\r\n  \r\n  // Função para classificar duplas por desempate\r\n  export const classificarDuplasPorDesempate = (grupo, jogos) => {\r\n    return grupo.sort((a, b) => {\r\n      let statsA = duplasEstatisticas[a.join(',')] || { pontos: 0, setsVencidos: 0, setsPerdidos: 0 };\r\n      let statsB = duplasEstatisticas[b.join(',')] || { pontos: 0, setsVencidos: 0, setsPerdidos: 0 };\r\n      \r\n      if (statsB.pontos !== statsA.pontos) return statsB.pontos - statsA.pontos;\r\n      let saldoA = statsA.setsVencidos - statsA.setsPerdidos;\r\n      let saldoB = statsB.setsVencidos - statsB.setsPerdidos;\r\n      if (saldoA !== saldoB) return saldoB - saldoA;\r\n  \r\n      // Confronto direto\r\n      const jogoDireto = jogos.find(j => \r\n        (j.dupla1.join(',') === a.join(',') && j.dupla2.join(',') === b.join(',')) ||\r\n        (j.dupla1.join(',') === b.join(',') && j.dupla2.join(',') === a.join(','))\r\n      );\r\n      if (jogoDireto) {\r\n        const [set1, set2] = jogoDireto.placar.split('-').map(Number);\r\n        return jogoDireto.dupla1.join(',') === a.join(',') ? set1 - set2 : set2 - set1;\r\n      }\r\n  \r\n      // Se ainda estiver empatado, você pode adicionar mais critérios ou usar um sorteio\r\n      return 0;\r\n    });\r\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAIC,MAAM,IAAK;EACrC,IAAIA,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EAEA,IAAIC,SAAS;EACb,IAAIH,MAAM,CAACC,MAAM,IAAI,CAAC,EAAEE,SAAS,GAAG,CAAC,CAAC,KACjC,IAAIH,MAAM,CAACC,MAAM,IAAI,CAAC,EAAEE,SAAS,GAAG,CAAC,CAAC,KACtC,IAAIH,MAAM,CAACC,MAAM,IAAI,EAAE,EAAEE,SAAS,GAAG,CAAC,CAAC,KACvC,IAAIH,MAAM,CAACC,MAAM,IAAI,EAAE,EAAEE,SAAS,GAAG,CAAC,CAAC,KACvC,IAAIH,MAAM,CAACC,MAAM,IAAI,EAAE,EAAEE,SAAS,GAAG,CAAC,CAAC,KACvCA,SAAS,GAAG,CAAC;EAElB,IAAIC,MAAM,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,EAAEE,CAAC,EAAE,EAAE;IAClC,IAAIC,SAAS,GAAGC,IAAI,CAACC,IAAI,CAAC,CAACR,MAAM,CAACC,MAAM,GAAII,CAAC,GAAGE,IAAI,CAACC,IAAI,CAACR,MAAM,CAACC,MAAM,GAAGE,SAAS,CAAE,KAAKA,SAAS,GAAGE,CAAC,CAAC,CAAC;IACzGD,MAAM,CAACK,IAAI,CAACT,MAAM,CAACU,MAAM,CAAC,CAAC,EAAEJ,SAAS,CAAC,CAAC;EAC1C;;EAEA;EACA;EACA,IAAIN,MAAM,CAACC,MAAM,KAAK,CAAC,IAAIG,MAAM,CAACH,MAAM,KAAK,CAAC,EAAE;IAC9C,IAAIG,MAAM,CAAC,CAAC,CAAC,CAACH,MAAM,KAAKG,MAAM,CAAC,CAAC,CAAC,CAACH,MAAM,EAAE;MACzC,IAAIU,SAAS,GAAGP,MAAM,CAAC,CAAC,CAAC,CAACH,MAAM,GAAGG,MAAM,CAAC,CAAC,CAAC,CAACH,MAAM;MACnD,IAAIU,SAAS,GAAG,CAAC,EAAE;QACjBP,MAAM,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC,CAACM,MAAM,CAAC,CAAC,EAAEC,SAAS,CAAC,CAAC;MACnD,CAAC,MAAM;QACLP,MAAM,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC,CAACM,MAAM,CAAC,CAAC,EAAE,CAACC,SAAS,CAAC,CAAC;MACpD;IACF;EACF,CAAC,MAAM,IAAIX,MAAM,CAACC,MAAM,GAAG,CAAC,IAAID,MAAM,CAACC,MAAM,IAAI,CAAC,EAAE;IAAE;IACpD,IAAIG,MAAM,CAAC,CAAC,CAAC,CAACH,MAAM,GAAG,CAAC,EAAE;MACxB,IAAIW,KAAK,GAAG,CAAC,GAAGR,MAAM,CAAC,CAAC,CAAC,CAACH,MAAM;MAChCG,MAAM,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC,GAAGL,MAAM,CAAC,CAAC,CAAC,CAACM,MAAM,CAAC,CAAC,EAAEE,KAAK,CAAC,CAAC;IAC/C;EACF;EAEA,OAAOR,MAAM,CAACS,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,MAAM;IAC/BC,EAAE,EAAED,KAAK;IACTf,MAAM,EAAEc,CAAC;IACTG,KAAK,EAAEC,mBAAmB,CAACJ,CAAC,EAAEC,KAAK;EACrC,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMG,mBAAmB,GAAGA,CAACC,KAAK,EAAEC,UAAU,KAAK;EACxD,IAAIC,UAAU,GAAG,EAAE;EACnB,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,KAAK,CAAClB,MAAM,EAAEI,CAAC,EAAE,EAAE;IACrC,KAAK,IAAIiB,CAAC,GAAGjB,CAAC,GAAG,CAAC,EAAEiB,CAAC,GAAGH,KAAK,CAAClB,MAAM,EAAEqB,CAAC,EAAE,EAAE;MACzCD,UAAU,CAACZ,IAAI,CAAC;QACdc,MAAM,EAAEJ,KAAK,CAACd,CAAC,CAAC;QAChBmB,MAAM,EAAEL,KAAK,CAACG,CAAC,CAAC;QAChBG,MAAM,EAAE,EAAE;QACVC,SAAS,EAAE,KAAK;QAChBN,UAAU;QACVO,SAAS,EAAEN,UAAU,CAACpB;MACxB,CAAC,CAAC;IACJ;EACF;EACA,OAAOoB,UAAU;AACnB,CAAC;;AAED;AACA,OAAO,MAAMO,kBAAkB,GAAG,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMC,qBAAqB,GAAIC,IAAI,IAAK;EAC7C,MAAM,CAACC,IAAI,EAAEC,IAAI,CAAC,GAAGF,IAAI,CAACL,MAAM,CAACQ,KAAK,CAAC,GAAG,CAAC,CAACpB,GAAG,CAACqB,MAAM,CAAC;EACvD,MAAMC,QAAQ,GAAGJ,IAAI,GAAGC,IAAI,GAAGF,IAAI,CAACP,MAAM,GAAGO,IAAI,CAACN,MAAM;EACxD,MAAMY,QAAQ,GAAGD,QAAQ,KAAKL,IAAI,CAACP,MAAM,GAAGO,IAAI,CAACN,MAAM,GAAGM,IAAI,CAACP,MAAM;EAErE,SAASc,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;IAClC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,IAAI,CAAC,GAAG,CAAC;IAChC,IAAI,CAACb,kBAAkB,CAACY,QAAQ,CAAC,EAAE;MACjCZ,kBAAkB,CAACY,QAAQ,CAAC,GAAG;QAAEvB,KAAK,EAAE,CAAC;QAAEsB,MAAM,EAAE,CAAC;QAAEG,YAAY,EAAE,CAAC;QAAEC,YAAY,EAAE;MAAE,CAAC;IAC1F;IACAf,kBAAkB,CAACY,QAAQ,CAAC,CAACvB,KAAK,EAAE;IACpCW,kBAAkB,CAACY,QAAQ,CAAC,CAACD,MAAM,IAAIA,MAAM;IAC7C,IAAID,KAAK,KAAKH,QAAQ,EAAE;MACtBP,kBAAkB,CAACY,QAAQ,CAAC,CAACE,YAAY,IAAIX,IAAI;MACjDH,kBAAkB,CAACY,QAAQ,CAAC,CAACG,YAAY,IAAIX,IAAI;IACnD,CAAC,MAAM;MACLJ,kBAAkB,CAACY,QAAQ,CAAC,CAACE,YAAY,IAAIV,IAAI;MACjDJ,kBAAkB,CAACY,QAAQ,CAAC,CAACG,YAAY,IAAIZ,IAAI;IACnD;EACF;EAEAM,WAAW,CAACF,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;EAC1BE,WAAW,CAACD,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC;;AAED;AACA,OAAO,MAAMQ,6BAA6B,GAAGA,CAACzB,KAAK,EAAEF,KAAK,KAAK;EAC7D,OAAOE,KAAK,CAAC0B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC1B,IAAIC,MAAM,GAAGpB,kBAAkB,CAACkB,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI;MAAEF,MAAM,EAAE,CAAC;MAAEG,YAAY,EAAE,CAAC;MAAEC,YAAY,EAAE;IAAE,CAAC;IAC/F,IAAIM,MAAM,GAAGrB,kBAAkB,CAACmB,CAAC,CAACN,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI;MAAEF,MAAM,EAAE,CAAC;MAAEG,YAAY,EAAE,CAAC;MAAEC,YAAY,EAAE;IAAE,CAAC;IAE/F,IAAIM,MAAM,CAACV,MAAM,KAAKS,MAAM,CAACT,MAAM,EAAE,OAAOU,MAAM,CAACV,MAAM,GAAGS,MAAM,CAACT,MAAM;IACzE,IAAIW,MAAM,GAAGF,MAAM,CAACN,YAAY,GAAGM,MAAM,CAACL,YAAY;IACtD,IAAIQ,MAAM,GAAGF,MAAM,CAACP,YAAY,GAAGO,MAAM,CAACN,YAAY;IACtD,IAAIO,MAAM,KAAKC,MAAM,EAAE,OAAOA,MAAM,GAAGD,MAAM;;IAE7C;IACA,MAAME,UAAU,GAAGnC,KAAK,CAACoC,IAAI,CAAC/B,CAAC,IAC5BA,CAAC,CAACC,MAAM,CAACkB,IAAI,CAAC,GAAG,CAAC,KAAKK,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC,IAAInB,CAAC,CAACE,MAAM,CAACiB,IAAI,CAAC,GAAG,CAAC,KAAKM,CAAC,CAACN,IAAI,CAAC,GAAG,CAAC,IACxEnB,CAAC,CAACC,MAAM,CAACkB,IAAI,CAAC,GAAG,CAAC,KAAKM,CAAC,CAACN,IAAI,CAAC,GAAG,CAAC,IAAInB,CAAC,CAACE,MAAM,CAACiB,IAAI,CAAC,GAAG,CAAC,KAAKK,CAAC,CAACL,IAAI,CAAC,GAAG,CAC1E,CAAC;IACD,IAAIW,UAAU,EAAE;MACd,MAAM,CAACrB,IAAI,EAAEC,IAAI,CAAC,GAAGoB,UAAU,CAAC3B,MAAM,CAACQ,KAAK,CAAC,GAAG,CAAC,CAACpB,GAAG,CAACqB,MAAM,CAAC;MAC7D,OAAOkB,UAAU,CAAC7B,MAAM,CAACkB,IAAI,CAAC,GAAG,CAAC,KAAKK,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC,GAAGV,IAAI,GAAGC,IAAI,GAAGA,IAAI,GAAGD,IAAI;IAChF;;IAEA;IACA,OAAO,CAAC;EACV,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}