{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseEliminatoria.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseEliminatoria = ({\n  fase,\n  jogos,\n  onAtualizarEstatisticas,\n  onUpdateJogos\n}) => {\n  _s();\n  const [jogosState, setJogosState] = useState(jogos);\n  useEffect(() => {\n    setJogosState(jogos);\n  }, [jogos]);\n  useEffect(() => {\n    if (onUpdateJogos && JSON.stringify(jogosState) !== JSON.stringify(jogos)) {\n      onUpdateJogos(jogosState);\n    }\n  }, [jogosState, onUpdateJogos, jogos]);\n  const handleSubmitScore = (placar, jogoIndex) => {\n    setJogosState(prevJogos => prevJogos.map(jogo => jogo.jogoIndex === jogoIndex ? {\n      ...jogo,\n      placar: placar,\n      submetido: true\n    } : jogo));\n    onAtualizarEstatisticas({\n      jogoIndex,\n      placar\n    });\n  };\n\n  // Agrupar jogos por rodada\n  const jogosPorRodada = {};\n  jogosState.forEach(jogo => {\n    if (!jogosPorRodada[jogo.rodada]) {\n      jogosPorRodada[jogo.rodada] = [];\n    }\n    jogosPorRodada[jogo.rodada].push(jogo);\n  });\n\n  // Determinar a última rodada concluída\n  const ultimaRodadaConcluida = Object.keys(jogosPorRodada).reduce((maxRodada, rodada) => jogosPorRodada[rodada].every(jogo => jogo.submetido) ? Math.max(maxRodada, rodada) : maxRodada, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: fase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\n      if (parseInt(rodada) <= ultimaRodadaConcluida + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: rodada === '1' ? 'Primeira Rodada' : rodada === Object.keys(jogosPorRodada).length.toString() ? 'Final' : rodada === (Object.keys(jogosPorRodada).length - 1).toString() ? 'Semifinal' : `Rodada ${rodada}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this), jogosPorRodada[rodada].map(jogo => /*#__PURE__*/_jsxDEV(Jogo, {\n            jogo: jogo,\n            onSubmitScore: placar => handleSubmitScore(placar, jogo.jogoIndex)\n          }, `${jogo.jogoIndex}-${jogo.dupla1.join('')}-${jogo.dupla2.join('')}-${rodada}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this))]\n        }, rodada, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this);\n      }\n      return null;\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(FaseEliminatoria, \"WUDVshYz8JV1GJjpJcapKgW/9LQ=\");\n_c = FaseEliminatoria;\nexport default FaseEliminatoria;\nvar _c;\n$RefreshReg$(_c, \"FaseEliminatoria\");","map":{"version":3,"names":["React","useState","useEffect","Jogo","jsxDEV","_jsxDEV","FaseEliminatoria","fase","jogos","onAtualizarEstatisticas","onUpdateJogos","_s","jogosState","setJogosState","JSON","stringify","handleSubmitScore","placar","jogoIndex","prevJogos","map","jogo","submetido","jogosPorRodada","forEach","rodada","push","ultimaRodadaConcluida","Object","keys","reduce","maxRodada","every","Math","max","children","fileName","_jsxFileName","lineNumber","columnNumber","sort","a","b","parseInt","length","toString","onSubmitScore","dupla1","join","dupla2","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseEliminatoria.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseEliminatoria = ({ fase, jogos, onAtualizarEstatisticas, onUpdateJogos }) => {\r\n  const [jogosState, setJogosState] = useState(jogos);\r\n\r\n  useEffect(() => {\r\n    setJogosState(jogos);\r\n  }, [jogos]);\r\n\r\n  useEffect(() => {\r\n    if (onUpdateJogos && JSON.stringify(jogosState) !== JSON.stringify(jogos)) {\r\n      onUpdateJogos(jogosState);\r\n    }\r\n  }, [jogosState, onUpdateJogos, jogos]);\r\n\r\n  const handleSubmitScore = (placar, jogoIndex) => {\r\n    setJogosState(prevJogos => prevJogos.map(jogo => \r\n      jogo.jogoIndex === jogoIndex ? {...jogo, placar: placar, submetido: true} : jogo\r\n    ));\r\n    onAtualizarEstatisticas({ jogoIndex, placar });\r\n  };\r\n\r\n  // Agrupar jogos por rodada\r\n  const jogosPorRodada = {};\r\n  jogosState.forEach(jogo => {\r\n    if (!jogosPorRodada[jogo.rodada]) {\r\n      jogosPorRodada[jogo.rodada] = [];\r\n    }\r\n    jogosPorRodada[jogo.rodada].push(jogo);\r\n  });\r\n\r\n  // Determinar a última rodada concluída\r\n  const ultimaRodadaConcluida = Object.keys(jogosPorRodada).reduce((maxRodada, rodada) =>\r\n    jogosPorRodada[rodada].every(jogo => jogo.submetido) ? Math.max(maxRodada, rodada) : maxRodada, 0);\r\n\r\n  return (\r\n    <div>\r\n      <h2>{fase}</h2>\r\n      {Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\r\n        if (parseInt(rodada) <= ultimaRodadaConcluida + 1) {\r\n          return (\r\n            <div key={rodada}>\r\n              <h3>{rodada === '1' ? 'Primeira Rodada' : rodada === (Object.keys(jogosPorRodada).length).toString() ? 'Final' : rodada === (Object.keys(jogosPorRodada).length - 1).toString() ? 'Semifinal' : `Rodada ${rodada}`}</h3>\r\n              {jogosPorRodada[rodada].map(jogo => (\r\n                <Jogo\r\n                  key={`${jogo.jogoIndex}-${jogo.dupla1.join('')}-${jogo.dupla2.join('')}-${rodada}`}\r\n                  jogo={jogo}\r\n                  onSubmitScore={(placar) => handleSubmitScore(placar, jogo.jogoIndex)}\r\n                />\r\n              ))}\r\n            </div>\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseEliminatoria;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}