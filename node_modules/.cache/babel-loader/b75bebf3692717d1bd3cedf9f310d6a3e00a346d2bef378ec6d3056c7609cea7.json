{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport gameDay from './assets/img/game-day.svg'; // Importa a imagem SVG\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n/*#__PURE__*/_jsxDEV(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\",\n  rel: \"stylesheet\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 1\n}, this);\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({});\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(null);\n  const [nomeTorneio, setNomeTorneio] = useState(''); // Novo estado\n  const [dataInicio, setDataInicio] = useState(''); // Novo estado (ex.: 2025-02-16)\n  const [horaInicio, setHoraInicio] = useState(''); // Novo estado (ex.: 12:00)\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto); // Meses começam em 0\n    setDataCriacaoTorneio(dataTorneio); // Define a data/hora inserida\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      // Caso específico para 10 duplas: 2 grupos de 5, direto para semifinais\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1]));\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n\n      // Atualizar histórico\n      const resultados = duplasUnicas.reduce((acc, dupla) => {\n        acc[dupla.join('')] = {\n          dupla,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          setsVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        return acc;\n      }, {});\n      jogosClassificados.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (resultados[chave1] && resultados[chave2]) {\n          resultados[chave1].jogos += 1;\n          resultados[chave2].jogos += 1;\n          if (g1 > g2) {\n            resultados[chave1].pontos += 5;\n            resultados[chave1].jogosVencidos += 1;\n            resultados[chave1].setsVencidos += 1;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n            resultados[chave2].pontos += 2;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n          } else {\n            resultados[chave2].pontos += 5;\n            resultados[chave2].jogosVencidos += 1;\n            resultados[chave2].setsVencidos += 1;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n            resultados[chave1].pontos += 2;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n          }\n        }\n      });\n      setHistoricoDuplas(resultados);\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      if (duplas.length <= 11) {\n        // Até 11 duplas: 2 BYEs + 4 nas quartas\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n        const jogosQuartas = [{\n          dupla1: [...duplasQuartas[0]],\n          dupla2: [...duplasQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }, {\n          dupla1: [...duplasQuartas[2]],\n          dupla2: [...duplasQuartas[3]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }];\n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else {\n        // Mais de 11 duplas: Chave eliminatória ajustada para 16 duplas\n        const top16 = rankingGeral.slice(0, 16); // Pegar apenas as 16 melhores\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n        setJogosEliminatoria(jogosOitavas); // 8 jogos nas oitavas\n        setDuplasBye([]); // Sem BYEs fixos, já ajustado na chave\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n\n      // Atualizar histórico\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          setsVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          setsVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].setsVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].setsVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n\n      // Removido o avanço automático\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    setJogosEliminatoria(prev => [...prev, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      // Para ≤ 11 duplas: Usa BYEs fixos\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n      const semifinalMatches = [{\n        dupla1: [...duplasBye[0]],\n        dupla2: [...vencedoresQuartas[0]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: [...duplasBye[1]],\n        dupla2: [...vencedoresQuartas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else if (jogosRodadaAtual.length > 1) {\n      // Para > 11 duplas: Avança normalmente com vencedores\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido); // Verifica se todos os placares foram submetidos\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n            }).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            // Só exibe \"✓\" se todos os jogos foram submetidos e a dupla está entre as duas primeiras\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 441,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const incrementoMinutos = idx * 30;\n            const dataHora = formatarDataHora(dataCriacaoTorneio, incrementoMinutos);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 497,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 499,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 509,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 510,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: add27Duplas,\n    children: \"Adicionar 27 Duplas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 541,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: nomeTorneio,\n              onChange: e => setNomeTorneio(e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 563,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: dataInicio,\n              onChange: e => setDataInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 571,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: horaInicio,\n              onChange: e => setHoraInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: \"Iniciar Torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add27Duplas,\n              children: \"Adicionar 27 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 15\n          }, this), grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 42\n        }, this), jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [posição.lugar, \"\\xBA Lugar\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: posição.dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 649,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 545,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xa+QbAJ78cWlCefFgZhZPJUvZRw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","gameDay","jsxDEV","_jsxDEV","Fragment","_Fragment","href","rel","fileName","_jsxFileName","lineNumber","columnNumber","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","duplasBye","setDuplasBye","historicoDuplas","setHistoricoDuplas","dataCriacaoTorneio","setDataCriacaoTorneio","nomeTorneio","setNomeTorneio","dataInicio","setDataInicio","horaInicio","setHoraInicio","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","ano","mes","dia","split","map","Number","hora","minuto","dataTorneio","Date","duplasSorteadas","sort","Math","random","gruposCriados","gruposComJogos","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","rankingGrupo1","rankingGrupo2","semifinalMatches","dupla1","dupla2","placar","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","Array","isArray","console","error","dupla1Str","dupla2Str","log","resultados","reduce","acc","pontos","jogosVencidos","setsVencidos","gamesVencidos","gamesPerdidos","forEach","g1","g2","chave1","chave2","rankingGeral","duplasByeLocal","duplasQuartas","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","prevJogos","j","updatedJogos","prev","novoHistorico","iniciarFinal","semifinalGames","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","updated","novaRodada","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","String","getDate","padStart","getMonth","getHours","className","children","jogosDupla","jogosPerdidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","add8Duplas","newDuplas","add27Duplas","onClick","type","value","onChange","e","target","toUpperCase","placeholder","src","alt","onAddDupla","onRemoveDupla","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport gameDay from './assets/img/game-day.svg'; // Importa a imagem SVG\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\"></link>\n\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({});\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(null);\n  const [nomeTorneio, setNomeTorneio] = useState(''); // Novo estado\n  const [dataInicio, setDataInicio] = useState(''); // Novo estado (ex.: 2025-02-16)\n  const [horaInicio, setHoraInicio] = useState(''); // Novo estado (ex.: 12:00)\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto); // Meses começam em 0\n    setDataCriacaoTorneio(dataTorneio); // Define a data/hora inserida\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      // Caso específico para 10 duplas: 2 grupos de 5, direto para semifinais\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n  \n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) =>\n        index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1])\n      );\n  \n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n  \n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n  \n      // Atualizar histórico\n      const resultados = duplasUnicas.reduce((acc, dupla) => {\n        acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        return acc;\n      }, {});\n      jogosClassificados.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (resultados[chave1] && resultados[chave2]) {\n          resultados[chave1].jogos += 1;\n          resultados[chave2].jogos += 1;\n          if (g1 > g2) {\n            resultados[chave1].pontos += 5;\n            resultados[chave1].jogosVencidos += 1;\n            resultados[chave1].setsVencidos += 1;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n            resultados[chave2].pontos += 2;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n          } else {\n            resultados[chave2].pontos += 5;\n            resultados[chave2].jogosVencidos += 1;\n            resultados[chave2].setsVencidos += 1;\n            resultados[chave2].gamesVencidos += g2;\n            resultados[chave2].gamesPerdidos += g1;\n            resultados[chave1].pontos += 2;\n            resultados[chave1].gamesVencidos += g1;\n            resultados[chave1].gamesPerdidos += g2;\n          }\n        }\n      });\n      setHistoricoDuplas(resultados);\n  \n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n  \n      if (duplas.length <= 11) { // Até 11 duplas: 2 BYEs + 4 nas quartas\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n  \n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n  \n        const jogosQuartas = [\n          { dupla1: [...duplasQuartas[0]], dupla2: [...duplasQuartas[1]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 },\n          { dupla1: [...duplasQuartas[2]], dupla2: [...duplasQuartas[3]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 }\n        ];\n  \n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else { // Mais de 11 duplas: Chave eliminatória ajustada para 16 duplas\n        const top16 = rankingGeral.slice(0, 16); // Pegar apenas as 16 melhores\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n  \n        setJogosEliminatoria(jogosOitavas); // 8 jogos nas oitavas\n        setDuplasBye([]); // Sem BYEs fixos, já ajustado na chave\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos =>\n        prevJogos.map(j =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        )\n      );\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n\n      // Atualizar histórico\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].setsVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].setsVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n\n      // Removido o avanço automático\n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n\n    setJogosEliminatoria(prev => [\n      ...prev,\n      {\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n      },\n      {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1\n      }\n    ]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      // Para ≤ 11 duplas: Usa BYEs fixos\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n\n      const semifinalMatches = [\n        { dupla1: [...duplasBye[0]], dupla2: [...vencedoresQuartas[0]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n        { dupla1: [...duplasBye[1]], dupla2: [...vencedoresQuartas[1]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n      ];\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else if (jogosRodadaAtual.length > 1) {\n      // Para > 11 duplas: Avança normalmente com vencedores\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n    setFaseAtual('finalizado');\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido); // Verifica se todos os placares foram submetidos\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(j =>\n                j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              // Só exibe \"✓\" se todos os jogos foram submetidos e a dupla está entre as duas primeiras\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar ? (g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate') : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(dataCriacaoTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor = jogo.placar && jogo.submetido\n                  ? (parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & '))\n                  : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={nomeTorneio}\n                  onChange={(e) => setNomeTorneio(e.target.value.toUpperCase())}\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={dataInicio}\n                  onChange={(e) => setDataInicio(e.target.value)}\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={horaInicio}\n                  onChange={(e) => setHoraInicio(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button className=\"iniciar-torneio\" onClick={startTournament}>Iniciar Torneio</button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n                <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n              </div>\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {grupos.map(grupo => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado && <p>A disputa pelo 3º lugar está configurada!</p>}\n            {jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>JOGADORES</th>\n                </tr>\n              </thead>\n              <tbody>\n                {ranking.map((posição, index) => (\n                  <tr key={index}>\n                    <td>{posição.lugar}º Lugar</td>\n                    <td>{posição.dupla.join(' & ')}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}