{"ast":null,"code":"// src/utils/torneioUtils.js\nexport const classificarDuplas = grupos => {\n  let classificados = [];\n  grupos.forEach(grupo => {\n    // Ordena duplas do grupo com base nos critérios de desempate\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n\n    // Adiciona os 2 melhores de cada grupo à lista de classificados\n    classificados.push(duplasClassificadas[0], duplasClassificadas[1]);\n  });\n  console.log(\"Duplas classificadas para a fase eliminatória:\", classificados);\n  return classificados;\n};\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\n  const jogos = [];\n  for (let i = 0; i < duplas.length; i++) {\n    for (let j = i + 1; j < duplas.length; j++) {\n      jogos.push({\n        dupla1: duplas[i],\n        dupla2: duplas[j],\n        placar: '',\n        submetido: false,\n        grupoId\n      });\n    }\n  }\n  return jogos;\n};\nexport const dividirGrupos = duplas => {\n  let numGrupos;\n  if (duplas.length <= 5) numGrupos = 1;else if (duplas.length <= 8) numGrupos = 2;else if (duplas.length <= 11) numGrupos = 3;else if (duplas.length <= 14) numGrupos = 4;else if (duplas.length <= 17) numGrupos = 5;else if (duplas.length <= 20) numGrupos = 6;else numGrupos = Math.ceil(duplas.length / 3); // Para 21 ou mais\n\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\n    id: i,\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\n  }));\n  return grupos.filter(grupo => grupo.duplas.length > 0);\n};\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\n  const resultados = duplas.reduce((acc, dupla) => {\n    if (!dupla || !Array.isArray(dupla) || dupla.length !== 2) {\n      console.error('Dupla inválida:', dupla);\n      return acc;\n    }\n    acc[dupla.join('')] = {\n      dupla,\n      pontos: 0,\n      saldoGames: 0\n    };\n    return acc;\n  }, {});\n  jogos.forEach(jogo => {\n    if (jogo.placar && jogo.dupla1 && jogo.dupla2 && Array.isArray(jogo.dupla1) && Array.isArray(jogo.dupla2)) {\n      const [games1, games2] = jogo.placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (resultados[chave1] && resultados[chave2]) {\n        if (games1 > games2) {\n          resultados[chave1].pontos += 5;\n          resultados[chave2].pontos += 2;\n        } else {\n          resultados[chave2].pontos += 5;\n          resultados[chave1].pontos += 2;\n        }\n        resultados[chave1].saldoGames += games1 - games2;\n        resultados[chave2].saldoGames += games2 - games1;\n      } else {\n        console.error('Dupla não encontrada em resultados:', {\n          chave1,\n          chave2,\n          jogo\n        });\n      }\n    } else {\n      console.error('Jogo inválido ignorado:', jogo);\n    }\n  });\n  return Object.values(resultados).sort((a, b) => b.pontos - a.pontos || b.saldoGames - a.saldoGames).map(r => r.dupla);\n};\nexport const iniciarFaseEliminatoria = classificados => {\n  let totalDuplas = classificados.length;\n  let rodadas = Math.ceil(Math.log2(totalDuplas));\n  // Ajusta o número de duplas para uma potência de 2 (adiciona BYEs se necessário)\n  let proximoMultiplo = Math.pow(2, rodadas);\n  let byes = proximoMultiplo - totalDuplas;\n  let classificadosAjustados = [...classificados];\n  for (let i = 0; i < byes; i++) {\n    classificadosAjustados.push(['BYE', '']);\n  }\n\n  // Define o nome da fase com base na quantidade de rodadas:\n  let faseNome;\n  if (rodadas === 1) {\n    faseNome = 'Final';\n  } else if (rodadas === 2) {\n    faseNome = 'Semifinal';\n  } else if (rodadas === 3) {\n    faseNome = 'Quartas de Final';\n  } else {\n    faseNome = `Rodada 1`;\n  }\n\n  // Gera apenas a primeira rodada:\n  let jogosRodada = [];\n  for (let i = 0; i < classificadosAjustados.length; i += 2) {\n    jogosRodada.push({\n      dupla1: classificadosAjustados[i],\n      dupla2: classificadosAjustados[i + 1],\n      placar: '',\n      submetido: false,\n      fase: faseNome,\n      rodada: 1\n    });\n  }\n  return jogosRodada;\n};\nexport const avancarRodadaEliminatoria = jogosRodadaAtual => {\n  let vencedores = jogosRodadaAtual.map(jogo => {\n    const [score1, score2] = jogo.placar.split('-').map(Number);\n    if (jogo.dupla2[0] === 'BYE') return jogo.dupla1;\n    return score1 > score2 ? jogo.dupla1 : jogo.dupla2;\n  });\n  let rodadasTotal = Math.ceil(Math.log2(vencedores.length));\n  let novaFaseNome = ['Final', 'Semifinal', 'Quartas de Final'][rodadasTotal - 1] || `Rodada ${jogosRodadaAtual[0].rodada + 1}`;\n  let novaRodada = [];\n  for (let i = 0; i < vencedores.length; i += 2) {\n    if (vencedores[i + 1]) {\n      novaRodada.push({\n        dupla1: vencedores[i],\n        dupla2: vencedores[i + 1],\n        placar: '',\n        submetido: false,\n        fase: novaFaseNome,\n        rodada: jogosRodadaAtual[0].rodada + 1\n      });\n    } else {\n      // Caso seja um número ímpar, adiciona um BYE\n      novaRodada.push({\n        dupla1: vencedores[i],\n        dupla2: ['BYE', ''],\n        placar: '',\n        submetido: false,\n        fase: novaFaseNome,\n        rodada: jogosRodadaAtual[0].rodada + 1\n      });\n    }\n  }\n  return novaRodada;\n};","map":{"version":3,"names":["classificarDuplas","grupos","classificados","forEach","grupo","duplasClassificadas","classificarDuplasPorDesempate","duplas","jogos","push","console","log","criarJogosParaGrupo","grupoId","i","length","j","dupla1","dupla2","placar","submetido","dividirGrupos","numGrupos","Math","ceil","Array","fill","map","_","id","slice","filter","resultados","reduce","acc","dupla","isArray","error","join","pontos","saldoGames","jogo","games1","games2","split","Number","chave1","chave2","Object","values","sort","a","b","r","iniciarFaseEliminatoria","totalDuplas","rodadas","log2","proximoMultiplo","pow","byes","classificadosAjustados","faseNome","jogosRodada","fase","rodada","avancarRodadaEliminatoria","jogosRodadaAtual","vencedores","score1","score2","rodadasTotal","novaFaseNome","novaRodada"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["// src/utils/torneioUtils.js\r\nexport const classificarDuplas = (grupos) => {\r\n  let classificados = [];\r\n\r\n  grupos.forEach(grupo => {\r\n    // Ordena duplas do grupo com base nos critérios de desempate\r\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\r\n\r\n    // Adiciona os 2 melhores de cada grupo à lista de classificados\r\n    classificados.push(duplasClassificadas[0], duplasClassificadas[1]);\r\n  });\r\n\r\n  console.log(\"Duplas classificadas para a fase eliminatória:\", classificados);\r\n  return classificados;\r\n};\r\n\r\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\r\n  const jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        grupoId\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const dividirGrupos = (duplas) => {\r\n  let numGrupos;\r\n  if (duplas.length <= 5) numGrupos = 1;\r\n  else if (duplas.length <= 8) numGrupos = 2;\r\n  else if (duplas.length <= 11) numGrupos = 3;\r\n  else if (duplas.length <= 14) numGrupos = 4;\r\n  else if (duplas.length <= 17) numGrupos = 5;\r\n  else if (duplas.length <= 20) numGrupos = 6;\r\n  else numGrupos = Math.ceil(duplas.length / 3); // Para 21 ou mais\r\n\r\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\r\n    id: i,\r\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\r\n  }));\r\n\r\n  return grupos.filter(grupo => grupo.duplas.length > 0);\r\n};\r\n\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  const resultados = duplas.reduce((acc, dupla) => {\r\n    if (!dupla || !Array.isArray(dupla) || dupla.length !== 2) {\r\n      console.error('Dupla inválida:', dupla);\r\n      return acc;\r\n    }\r\n    acc[dupla.join('')] = { dupla, pontos: 0, saldoGames: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  jogos.forEach(jogo => {\r\n    if (jogo.placar && jogo.dupla1 && jogo.dupla2 && Array.isArray(jogo.dupla1) && Array.isArray(jogo.dupla2)) {\r\n      const [games1, games2] = jogo.placar.split('-').map(Number);\r\n      const chave1 = jogo.dupla1.join('');\r\n      const chave2 = jogo.dupla2.join('');\r\n\r\n      if (resultados[chave1] && resultados[chave2]) {\r\n        if (games1 > games2) {\r\n          resultados[chave1].pontos += 5;\r\n          resultados[chave2].pontos += 2;\r\n        } else {\r\n          resultados[chave2].pontos += 5;\r\n          resultados[chave1].pontos += 2;\r\n        }\r\n        resultados[chave1].saldoGames += games1 - games2;\r\n        resultados[chave2].saldoGames += games2 - games1;\r\n      } else {\r\n        console.error('Dupla não encontrada em resultados:', { chave1, chave2, jogo });\r\n      }\r\n    } else {\r\n      console.error('Jogo inválido ignorado:', jogo);\r\n    }\r\n  });\r\n\r\n  return Object.values(resultados)\r\n    .sort((a, b) => b.pontos - a.pontos || b.saldoGames - a.saldoGames)\r\n    .map(r => r.dupla);\r\n};\r\n\r\nexport const iniciarFaseEliminatoria = (classificados) => {\r\n  let totalDuplas = classificados.length;\r\n  let rodadas = Math.ceil(Math.log2(totalDuplas));\r\n  // Ajusta o número de duplas para uma potência de 2 (adiciona BYEs se necessário)\r\n  let proximoMultiplo = Math.pow(2, rodadas);\r\n  let byes = proximoMultiplo - totalDuplas;\r\n  let classificadosAjustados = [...classificados];\r\n  for (let i = 0; i < byes; i++) {\r\n    classificadosAjustados.push(['BYE', '']);\r\n  }\r\n\r\n  // Define o nome da fase com base na quantidade de rodadas:\r\n  let faseNome;\r\n  if (rodadas === 1) {\r\n    faseNome = 'Final';\r\n  } else if (rodadas === 2) {\r\n    faseNome = 'Semifinal';\r\n  } else if (rodadas === 3) {\r\n    faseNome = 'Quartas de Final';\r\n  } else {\r\n    faseNome = `Rodada 1`;\r\n  }\r\n\r\n  // Gera apenas a primeira rodada:\r\n  let jogosRodada = [];\r\n  for (let i = 0; i < classificadosAjustados.length; i += 2) {\r\n    jogosRodada.push({\r\n      dupla1: classificadosAjustados[i],\r\n      dupla2: classificadosAjustados[i + 1],\r\n      placar: '',\r\n      submetido: false,\r\n      fase: faseNome,\r\n      rodada: 1\r\n    });\r\n  }\r\n  return jogosRodada;\r\n};\r\n\r\nexport const avancarRodadaEliminatoria = (jogosRodadaAtual) => {\r\n  let vencedores = jogosRodadaAtual.map(jogo => {\r\n    const [score1, score2] = jogo.placar.split('-').map(Number);\r\n    if (jogo.dupla2[0] === 'BYE') return jogo.dupla1;\r\n    return score1 > score2 ? jogo.dupla1 : jogo.dupla2;\r\n  });\r\n\r\n  let rodadasTotal = Math.ceil(Math.log2(vencedores.length));\r\n  let novaFaseNome = ['Final', 'Semifinal', 'Quartas de Final'][rodadasTotal - 1] || `Rodada ${jogosRodadaAtual[0].rodada + 1}`;\r\n\r\n  let novaRodada = [];\r\n  for (let i = 0; i < vencedores.length; i += 2) {\r\n    if (vencedores[i + 1]) {\r\n      novaRodada.push({\r\n        dupla1: vencedores[i],\r\n        dupla2: vencedores[i + 1],\r\n        placar: '',\r\n        submetido: false,\r\n        fase: novaFaseNome,\r\n        rodada: jogosRodadaAtual[0].rodada + 1\r\n      });\r\n    } else {\r\n      // Caso seja um número ímpar, adiciona um BYE\r\n      novaRodada.push({\r\n        dupla1: vencedores[i],\r\n        dupla2: ['BYE', ''], \r\n        placar: '',\r\n        submetido: false,\r\n        fase: novaFaseNome,\r\n        rodada: jogosRodadaAtual[0].rodada + 1\r\n      });\r\n    }\r\n  }\r\n  return novaRodada;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}