{"ast":null,"code":"import _objectSpread from\"C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import DuplasList from'./components/Duplas/DuplasList';import FaseDeGrupos from'./components/Torneio/FaseDeGrupos';import FaseEliminatoria from'./components/Torneio/FaseEliminatoria';import FaseFinal from'./components/Torneio/FaseFinal';import MeusTorneios from'./components/Torneio/MeusTorneios';import{saveTournament,loadTournaments,deleteTournament,generateTournament,classificarDuplasPorDesempate,classificarDuplas,iniciarFaseEliminatoria,avancarRodadaEliminatoria,criarJogosParaGrupo}from'./utils/torneioUtils';import'./App.css';import gameDay from'./assets/img/game-day.svg';import btConnectLogo from'./assets/img/btConnect.png';import tournamentsIcon from'./assets/icons/tournaments.svg';import shuffleIcon from'./assets/icons/shuffle.svg';import folderIcon from'./assets/icons/folder.svg';import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[currentTournament,setCurrentTournament]=useState(null);const[faseAtual,setFaseAtual]=useState('menu');const[tournaments,setTournaments]=useState(loadTournaments());const[manualGroups,setManualGroups]=useState(null);const[mostrarTodasDuplas,setMostrarTodasDuplas]=useState(false);// Novo estado\nuseEffect(()=>{const updatedTournaments=loadTournaments();setTournaments(updatedTournaments);},[]);const saveCurrentTournament=useCallback(()=>{if(currentTournament&&currentTournament.nome&&currentTournament.dataInicio&&currentTournament.horaInicio){const tournamentToSave=_objectSpread(_objectSpread({},currentTournament),{},{faseAtual,status:currentTournament.status});console.log('Salvando torneio no localStorage com status:',tournamentToSave.status);saveTournament(tournamentToSave);setTournaments(loadTournaments());}},[currentTournament,faseAtual]);const updateTournamentField=useCallback((field,value)=>{setCurrentTournament(prev=>{const updated=_objectSpread(_objectSpread({},prev),{},{[field]:value});console.log(\"Atualizando \".concat(field,\":\"),value);if(updated.nome&&updated.dataInicio&&updated.horaInicio){saveCurrentTournament();}return updated;});},[saveCurrentTournament]);const createNewTournament=useCallback(()=>{const newTournament={nome:'',dataCriacao:null,dataTorneio:null,dataInicio:'',horaInicio:'',duplas:[],grupos:[],jogosEliminatoria:[],finalConfigurada:false,terceiroLugarConfigurado:false,ranking:[],duplasBye:[],historicoDuplas:{},status:'rascunho',faseAtual:'duplas'};setCurrentTournament(newTournament);setFaseAtual('duplas');},[]);const loadTournament=useCallback(nome=>{const tournament=tournaments[nome];if(tournament){console.log('Carregando torneio do localStorage:',tournament);setCurrentTournament(tournament);setFaseAtual(tournament.status==='finalizado'?'finalizado':tournament.faseAtual||'duplas');}else{createNewTournament();}},[tournaments,createNewTournament]);const handleDeleteTournament=useCallback(nome=>{deleteTournament(nome);setTournaments(prev=>{const updated=_objectSpread({},prev);delete updated[nome];return updated;});if(currentTournament&&currentTournament.nome===nome){setCurrentTournament(null);setFaseAtual('menu');}},[currentTournament]);const handleImportTournaments=useCallback(importedTournaments=>{setTournaments(prev=>{const updatedTournaments=_objectSpread(_objectSpread({},prev),importedTournaments);Object.entries(updatedTournaments).forEach(_ref=>{let[nome,tournament]=_ref;saveTournament(tournament);});return updatedTournaments;});},[]);const addDupla=useCallback(dupla=>{if(!(currentTournament!==null&&currentTournament!==void 0&&currentTournament.duplas.some(d=>d.includes(dupla[0])||d.includes(dupla[1])))){updateTournamentField('duplas',[...currentTournament.duplas,dupla]);}else{alert('Os nomes dos jogadores devem ser únicos.');}},[currentTournament,updateTournamentField]);const removeDupla=useCallback(index=>{updateTournamentField('duplas',currentTournament.duplas.filter((_,i)=>i!==index));},[currentTournament,updateTournamentField]);const startTournament=useCallback(()=>{if(currentTournament.duplas.length<3){alert('É necessário pelo menos 3 duplas para começar o torneio.');return;}if(!currentTournament.nome||!currentTournament.dataInicio||!currentTournament.horaInicio){alert('Preencha o nome, data e hora de início do torneio.');return;}const duplasSorteadas=[...currentTournament.duplas].sort(()=>Math.random()-0.5);const historicoInicial=duplasSorteadas.reduce((acc,dupla)=>{acc[dupla.join('')]={dupla,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};return acc;},{});setCurrentTournament(prev=>_objectSpread(_objectSpread({},prev),{},{historicoDuplas:historicoInicial,status:'em andamento',dataCriacao:new Date().toISOString(),duplas:duplasSorteadas}));setFaseAtual('grupos');saveCurrentTournament();},[currentTournament,saveCurrentTournament]);const iniciarChavesManuais=useCallback(()=>{const numDuplas=currentTournament.duplas.length;if(numDuplas<3){alert('É necessário pelo menos 3 duplas para criar um torneio.');return;}if(!currentTournament.nome||!currentTournament.dataInicio||!currentTournament.horaInicio){alert('Preencha o nome, data e hora de início do torneio.');return;}let numGrupos;if(numDuplas===6)numGrupos=2;else if(numDuplas===14)numGrupos=4;else if(numDuplas<=5)numGrupos=1;else if(numDuplas<=8)numGrupos=2;else if(numDuplas<=11)numGrupos=3;else if(numDuplas<=17)numGrupos=5;else if(numDuplas<=20)numGrupos=6;else numGrupos=Math.ceil(numDuplas/3);const gruposIniciais=Array(numGrupos).fill().map((_,i)=>({id:i,duplas:[]}));if(numDuplas===6){gruposIniciais[0].maxDuplas=3;gruposIniciais[1].maxDuplas=3;}else if(numDuplas===14){gruposIniciais[0].maxDuplas=4;gruposIniciais[1].maxDuplas=4;gruposIniciais[2].maxDuplas=3;gruposIniciais[3].maxDuplas=3;}else{const baseSize=Math.floor(numDuplas/numGrupos);const extras=numDuplas%numGrupos;gruposIniciais.forEach((grupo,i)=>{grupo.maxDuplas=baseSize+(i<extras?1:0);});}setManualGroups(gruposIniciais);},[currentTournament]);const confirmarChavesManuais=useCallback(()=>{const totalDuplasAtribuidas=manualGroups.reduce((acc,grupo)=>acc+grupo.duplas.length,0);if(totalDuplasAtribuidas!==currentTournament.duplas.length){alert('Todas as duplas devem ser atribuídas aos grupos.');return;}const gruposComJogos=manualGroups.map(grupo=>_objectSpread(_objectSpread({},grupo),{},{jogos:criarJogosParaGrupo(grupo.duplas,grupo.id)}));const historicoInicial=currentTournament.duplas.reduce((acc,dupla)=>{acc[dupla.join('')]={dupla,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};return acc;},{});setCurrentTournament(prev=>_objectSpread(_objectSpread({},prev),{},{grupos:gruposComJogos,historicoDuplas:historicoInicial,status:'em andamento',dataCriacao:new Date().toISOString()}));setFaseAtual('grupos');setManualGroups(null);saveCurrentTournament();},[manualGroups,currentTournament,saveCurrentTournament]);const gerarSumulas=useCallback((fase,jogos)=>{const dataTorneio=currentTournament.dataInicio;const horaInicio=currentTournament.horaInicio;const categoria=currentTournament.duplas.length===6?'D':'B/C';const sumulasHtml=[];for(let i=0;i<jogos.length;i+=2){const jogo1=jogos[i];const jogo2=jogos[i+1]||null;const getSumulaHtml=(jogo,index)=>{if(!jogo)return'';const grupoId=fase==='grupos'?jogo.grupoId+1:'';const faseNome=fase==='grupos'?\"Grupo \".concat(grupoId):jogo.fase;const horarioEstimado=new Date(\"\".concat(dataTorneio,\"T\").concat(horaInicio));horarioEstimado.setMinutes(horarioEstimado.getMinutes()+index*30);const horarioFormatado=horarioEstimado.toLocaleTimeString('pt-BR',{hour:'2-digit',minute:'2-digit'});return\"\\n          <div class=\\\"sumula\\\" style=\\\"font-family: Arial, sans-serif; font-size: 9pt; width: 190mm; height: 135mm; margin: 5mm auto; padding: 0; border: 1px solid #000;\\\">\\n            <h2 style=\\\"text-align: center; font-size: 11pt; margin: 3px 0;\\\">S\\xDAMULA DE JOGO</h2>\\n            <h3 style=\\\"text-align: center; font-size: 9pt; margin: 2px 0;\\\">Arena Beach Tennis - Monte Santo de Minas/MG</h3>\\n            <table style=\\\"width: 100%; border-collapse: collapse; font-size: 8pt;\\\">\\n              <tr>\\n                <td><strong>Cat.:</strong> \".concat(categoria,\"</td>\\n                <td><strong>Data:</strong> \").concat(new Date(dataTorneio).toLocaleDateString('pt-BR'),\"</td>\\n                <td><strong>Hor\\xE1rio:</strong> \").concat(horarioFormatado,\"</td>\\n              </tr>\\n              <tr>\\n                <td colspan=\\\"3\\\"><strong>Fase:</strong> \").concat(faseNome,\"</td>\\n              </tr>\\n            </table>\\n            <hr style=\\\"margin: 3px 0;\\\">\\n            <table style=\\\"width: 100%; border-collapse: collapse; font-size: 8pt;\\\">\\n              <tr>\\n                <td style=\\\"width: 50%;\\\"><strong>Dupla 1:</strong> \").concat(jogo.dupla1[0],\" & \").concat(jogo.dupla1[1],\"</td>\\n                <td style=\\\"width: 50%;\\\"><strong>Dupla 2:</strong> \").concat(jogo.dupla2[0],\" & \").concat(jogo.dupla2[1],\"</td>\\n              </tr>\\n            </table>\\n            <table style=\\\"width: 40%; margin: 3px auto; text-align: center; border-collapse: collapse; font-size: 8pt;\\\">\\n              <tr>\\n                <th>D1</th>\\n                <th>X</th>\\n                <th>D2</th>\\n              </tr>\\n              <tr>\\n                <td style=\\\"border: 1px solid #000; height: 15px; width: 30px;\\\">___</td>\\n                <td>-</td>\\n                <td style=\\\"border: 1px solid #000; height: 15px; width: 30px;\\\">___</td>\\n              </tr>\\n            </table>\\n            <p style=\\\"font-size: 7pt; text-align: center; margin: 2px 0;\\\">Set at\\xE9 6 (W.O.: 6x0)</p>\\n            <hr style=\\\"margin: 3px 0;\\\">\\n            <p style=\\\"font-size: 8pt; margin: 2px 0;\\\">\\n              <strong>Vencedor:</strong> [ ] D1 [ ] D2 [ ] W.O.  \\n              <strong>Placar:</strong> ___ x ___\\n            </p>\\n            <p style=\\\"font-size: 8pt; margin: 2px 0;\\\">\\n              <strong>Resp.:</strong> _____________________<br>\\n              <strong>Org.:</strong> _____________________<br>\\n              <strong>Entrega:</strong> ___/___ \\xE0s ___:___\\n            </p>\\n            <p style=\\\"font-size: 7pt; margin: 2px 0;\\\">Obs.: _____________________</p>\\n          </div>\\n        \");};sumulasHtml.push(\"\\n        <div class=\\\"page\\\" style=\\\"width: 210mm; height: 297mm; margin: 0 auto; padding: 0;\\\">\\n          \".concat(getSumulaHtml(jogo1,i),\"\\n          \").concat(jogo2?'<hr style=\"border: 1px dashed #000; margin: 5mm 0;\">':'',\"\\n          \").concat(jogo2?getSumulaHtml(jogo2,i+1):'',\"\\n        </div>\\n      \"));}const printWindow=window.open('','_blank');printWindow.document.write(\"\\n      <html>\\n        <head>\\n          <title>S\\xFAmulas - Torneio de Beach Tennis</title>\\n          <style>\\n            @media print {\\n              .page { page-break-after: always; }\\n              body { margin: 0; padding: 0; }\\n              .sumula { box-sizing: border-box; }\\n            }\\n          </style>\\n        </head>\\n        <body>\".concat(sumulasHtml.join(''),\"</body>\\n      </html>\\n    \"));printWindow.document.close();printWindow.print();},[currentTournament]);const imprimirSumulasGrupos=useCallback(()=>{const jogosGrupos=currentTournament.grupos.flatMap(grupo=>grupo.jogos);gerarSumulas('grupos',jogosGrupos);},[currentTournament,gerarSumulas]);const imprimirSumulasEliminatorias=useCallback(rodada=>{const jogosRodada=currentTournament.jogosEliminatoria.filter(j=>j.rodada===rodada);gerarSumulas('eliminatória',jogosRodada);},[currentTournament,gerarSumulas]);const encerrarFaseGrupos=useCallback(()=>{if(currentTournament.grupos.some(grupo=>grupo.jogos.some(jogo=>!jogo.submetido||!jogo.placar))){alert('Todos os jogos da fase de grupos devem ter placares submetidos antes de encerrar.');return;}const todosOsJogos=currentTournament.grupos.flatMap(grupo=>grupo.jogos);updateTournamentField('historicoDuplas',prev=>{const novoHistorico=_objectSpread({},prev);todosOsJogos.forEach(jogo=>{if(!jogo.placar||!jogo.placar.includes('-')||!jogo.submetido)return;const[g1,g2]=jogo.placar.split('-').map(Number);if(isNaN(g1)||isNaN(g2))return;const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!novoHistorico[chave1])novoHistorico[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};if(!novoHistorico[chave2])novoHistorico[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};novoHistorico[chave1].jogos+=1;novoHistorico[chave2].jogos+=1;if(g1>g2){novoHistorico[chave1].pontos+=5;novoHistorico[chave1].jogosVencidos+=1;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;novoHistorico[chave2].pontos+=2;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;}else{novoHistorico[chave2].pontos+=5;novoHistorico[chave2].jogosVencidos+=1;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;novoHistorico[chave1].pontos+=2;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;}});return novoHistorico;});const numDuplas=currentTournament.duplas.length;const classificados=classificarDuplas(currentTournament.grupos);if(numDuplas<=4){const ranking=classificarDuplasPorDesempate(classificados.map(c=>c.dupla),todosOsJogos);const updatedTournament=_objectSpread(_objectSpread({},currentTournament),{},{ranking:ranking.map((dupla,index)=>({lugar:index+1,dupla:dupla})),status:'finalizado',faseAtual:'finalizado'});setCurrentTournament(updatedTournament);setFaseAtual('finalizado');saveTournament(updatedTournament);}else{const jogosEliminatoria=iniciarFaseEliminatoria(classificados);updateTournamentField('jogosEliminatoria',jogosEliminatoria);updateTournamentField('duplasBye',[]);setFaseAtual('eliminatória');saveCurrentTournament();}},[currentTournament,updateTournamentField,saveCurrentTournament]);const atualizarPlacarNaEliminatoria=useCallback((jogo,placar)=>{console.log('Atualizando placar na eliminatória:',{jogo,placar});if(jogo.dupla1[0]==='BYE'||jogo.dupla2[0]==='BYE'){updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria.map(j=>j===jogo?_objectSpread(_objectSpread({},j),{},{placar:'BYE',submetido:true}):j)]);const vencedora=jogo.dupla1[0]==='BYE'?jogo.dupla2:jogo.dupla1;const chaveVencedora=vencedora.join('');updateTournamentField('historicoDuplas',prev=>{var _novoHistorico$chaveV,_novoHistorico$chaveV2,_novoHistorico$chaveV3,_novoHistorico$chaveV4,_novoHistorico$chaveV5;const novoHistorico=_objectSpread({},prev);novoHistorico[chaveVencedora]={dupla:vencedora,jogos:(((_novoHistorico$chaveV=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV===void 0?void 0:_novoHistorico$chaveV.jogos)||0)+1,jogosVencidos:(((_novoHistorico$chaveV2=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV2===void 0?void 0:_novoHistorico$chaveV2.jogosVencidos)||0)+1,pontos:(((_novoHistorico$chaveV3=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV3===void 0?void 0:_novoHistorico$chaveV3.pontos)||0)+5,gamesVencidos:((_novoHistorico$chaveV4=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV4===void 0?void 0:_novoHistorico$chaveV4.gamesVencidos)||0,gamesPerdidos:((_novoHistorico$chaveV5=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV5===void 0?void 0:_novoHistorico$chaveV5.gamesPerdidos)||0};console.log('Histórico após eliminatória (BYE):',novoHistorico);return novoHistorico;});}else{updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria.map(j=>j===jogo?_objectSpread(_objectSpread({},j),{},{placar,submetido:true}):j)]);updateTournamentField('historicoDuplas',prev=>{const novoHistorico=_objectSpread({},prev);const[g1,g2]=placar.split('-').map(Number);const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!novoHistorico[chave1])novoHistorico[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};if(!novoHistorico[chave2])novoHistorico[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};novoHistorico[chave1].jogos+=1;novoHistorico[chave2].jogos+=1;if(g1>g2){novoHistorico[chave1].pontos+=5;novoHistorico[chave1].jogosVencidos+=1;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;novoHistorico[chave2].pontos+=2;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;}else{novoHistorico[chave2].pontos+=5;novoHistorico[chave2].jogosVencidos+=1;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;novoHistorico[chave1].pontos+=2;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;}console.log('Histórico após eliminatória:',novoHistorico);return novoHistorico;});}saveCurrentTournament();},[currentTournament,updateTournamentField,saveCurrentTournament]);const iniciarFinal=useCallback(jogos=>{const semifinalGames=jogos.filter(jogo=>jogo.fase==='Semifinal');if(semifinalGames.length!==2){console.error('Erro: Esperados 2 jogos de semifinal.');return;}const finalistas=semifinalGames.map(jogo=>{const[set1,set2]=jogo.placar.split('-').map(Number);return set1>set2?jogo.dupla1:jogo.dupla2;});const perdedores=semifinalGames.map(jogo=>{const[set1,set2]=jogo.placar.split('-').map(Number);return set1>set2?jogo.dupla2:jogo.dupla1;});updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria,{dupla1:[...finalistas[0]],dupla2:[...finalistas[1]],placar:'',submetido:false,fase:'Final',rodada:Math.max(...jogos.map(j=>j.rodada))+1},{dupla1:[...perdedores[0]],dupla2:[...perdedores[1]],placar:'',submetido:false,fase:'Disputa 3º Lugar',rodada:Math.max(...jogos.map(j=>j.rodada))+1}]);updateTournamentField('finalConfigurada',true);updateTournamentField('terceiroLugarConfigurado',true);setFaseAtual('final');saveCurrentTournament();},[currentTournament,updateTournamentField,saveCurrentTournament]);const atualizarPlacarNaFinal=useCallback((jogo,placar)=>{console.log('Atualizando placar na final:',{jogo,placar});updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria.map(j=>j===jogo?_objectSpread(_objectSpread({},j),{},{placar,submetido:true}):j)]);updateTournamentField('historicoDuplas',prev=>{const novoHistorico=_objectSpread({},prev);const[g1,g2]=placar.split('-').map(Number);const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!novoHistorico[chave1])novoHistorico[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};if(!novoHistorico[chave2])novoHistorico[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};novoHistorico[chave1].jogos+=1;novoHistorico[chave2].jogos+=1;if(g1>g2){novoHistorico[chave1].pontos+=5;novoHistorico[chave1].jogosVencidos+=1;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;novoHistorico[chave2].pontos+=2;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;}else{novoHistorico[chave2].pontos+=5;novoHistorico[chave2].jogosVencidos+=1;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;novoHistorico[chave1].pontos+=2;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;}console.log('Histórico após final:',novoHistorico);return novoHistorico;});saveCurrentTournament();},[currentTournament,updateTournamentField,saveCurrentTournament]);const encerrarFaseEliminatoria=useCallback(jogos=>{const rodadaAtual=Math.max(...currentTournament.jogosEliminatoria.map(j=>j.rodada));const jogosRodadaAtual=currentTournament.jogosEliminatoria.filter(j=>j.rodada===rodadaAtual);if(!jogosRodadaAtual.every(j=>j.submetido)){alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');return;}const vencedores=jogosRodadaAtual.map(jogo=>{if(jogo.dupla2[0]==='BYE')return jogo.dupla1;const[set1,set2]=jogo.placar.split('-').map(Number);return set1>set2?jogo.dupla1:jogo.dupla2;});if(vencedores.length===2&&!currentTournament.finalConfigurada){iniciarFinal(jogosRodadaAtual);}else if(vencedores.length>2){const novaRodada=avancarRodadaEliminatoria(jogosRodadaAtual);updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria,...novaRodada]);saveCurrentTournament();}else{alert('Não há mais rodadas para avançar.');}},[currentTournament,updateTournamentField,saveCurrentTournament,iniciarFinal]);const finalizarTorneio=useCallback(()=>{const final=currentTournament.jogosEliminatoria.find(jogo=>jogo.fase==='Final');const terceiroLugar=currentTournament.jogosEliminatoria.find(jogo=>jogo.fase==='Disputa 3º Lugar');if(!final||!terceiroLugar||!final.submetido||!terceiroLugar.submetido){alert('Erro: Final ou Disputa de 3º Lugar não estão completos. Certifique-se de que todos os placares foram submetidos.');return;}const[finalSet1,finalSet2]=final.placar.split('-').map(Number);const[vencedorFinal,perdedorFinal]=finalSet1>finalSet2?[final.dupla1,final.dupla2]:[final.dupla2,final.dupla1];const[terceiroSet1,terceiroSet2]=terceiroLugar.placar.split('-').map(Number);const[terceiro,quarto]=terceiroSet1>terceiroSet2?[terceiroLugar.dupla1,terceiroLugar.dupla2]:[terceiroLugar.dupla2,terceiroLugar.dupla1];const updatedTournament=_objectSpread(_objectSpread({},currentTournament),{},{ranking:[{lugar:1,dupla:vencedorFinal},{lugar:2,dupla:perdedorFinal},{lugar:3,dupla:terceiro},{lugar:4,dupla:quarto}],status:'finalizado',faseAtual:'finalizado'});setCurrentTournament(updatedTournament);setFaseAtual('finalizado');console.log('Finalizando torneio. Novo status:',updatedTournament.status);saveTournament(updatedTournament);setTournaments(prev=>_objectSpread(_objectSpread({},prev),{},{[updatedTournament.nome]:updatedTournament}));},[currentTournament]);const renderClassificacaoGrupo=useCallback(grupo=>{const ranking=classificarDuplasPorDesempate(grupo.duplas,grupo.jogos);const todosSubmetidos=grupo.jogos.every(jogo=>jogo.submetido);const formatarDataHora=(dataBase,incrementoMinutos)=>{if(!dataBase)return'Pendente';const data=new Date(dataBase);data.setMinutes(data.getMinutes()+incrementoMinutos);const diasSemana=['DOM','SEG','TER','QUA','QUI','SEX','SAB'];const meses=['JAN','FEV','MAR','ABR','MAI','JUN','JUL','AGO','SET','OUT','NOV','DEZ'];const diaSemana=diasSemana[data.getDay()];const dia=String(data.getDate()).padStart(2,'0');const mes=meses[data.getMonth()];const hora=String(data.getHours()).padStart(2,'0');const minuto=String(data.getMinutes()).padStart(2,'0');return\"\".concat(diaSemana,\", \").concat(dia).concat(mes,\" - \").concat(hora,\":\").concat(minuto);};return/*#__PURE__*/_jsxs(\"div\",{className:\"grupo\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Grupo \",grupo.id+1]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"#\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGOS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"SETS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"GAMES\"}),/*#__PURE__*/_jsx(\"th\",{children:\"CLASSIF.\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:ranking.map((dupla,index)=>{const jogosDupla=grupo.jogos.filter(j=>j.dupla1.join('')===dupla.join('')||j.dupla2.join('')===dupla.join(''));const jogosVencidos=jogosDupla.filter(j=>{if(!j.placar)return false;const[g1,g2]=j.placar.split('-').map(Number);return j.dupla1.join('')===dupla.join('')?g1>g2:g2>g1;}).length;const jogosPerdidos=jogosDupla.filter(j=>{if(!j.placar)return false;const[g1,g2]=j.placar.split('-').map(Number);return j.dupla1.join('')===dupla.join('')?g1<g2:g2<g1;}).length;const setsVencidos=jogosVencidos;const setsPerdidos=jogosPerdidos;const gamesVencidos=jogosDupla.reduce((acc,j)=>{if(!j.placar)return acc;const[g1,g2]=j.placar.split('-').map(Number);return acc+(j.dupla1.join('')===dupla.join('')?g1:g2);},0);const gamesPerdidos=jogosDupla.reduce((acc,j)=>{if(!j.placar)return acc;const[g1,g2]=j.placar.split('-').map(Number);return acc+(j.dupla1.join('')===dupla.join('')?g2:g1);},0);const classificado=todosSubmetidos&&index<2?'✓':'';return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:dupla.join(' & ')}),/*#__PURE__*/_jsxs(\"td\",{children:[jogosVencidos,\"/\",jogosPerdidos]}),/*#__PURE__*/_jsxs(\"td\",{children:[setsVencidos,\"/\",setsPerdidos]}),/*#__PURE__*/_jsxs(\"td\",{children:[gamesVencidos,\"/\",gamesPerdidos]}),/*#__PURE__*/_jsx(\"td\",{children:classificado})]},index);})})]}),/*#__PURE__*/_jsx(\"h4\",{children:\"Jogos\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"#\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DATA/HORA\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 01\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PLACAR\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 02\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VENCEDOR\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:grupo.jogos.map((jogo,idx)=>{const[g1,g2]=jogo.placar?jogo.placar.split('-').map(Number):[0,0];const vencedor=jogo.placar?g1>g2?jogo.dupla1.join(' & '):g2>g1?jogo.dupla2.join(' & '):'Empate':'A definir';const incrementoMinutos=idx*30;const dataHora=formatarDataHora(currentTournament.dataTorneio,incrementoMinutos);return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:idx+1}),/*#__PURE__*/_jsx(\"td\",{children:dataHora}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla1.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar||'Pendente'}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla2.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:vencedor})]},idx);})})]})]},\"grupo-\".concat(grupo.id));},[currentTournament]);const renderizarFaseEliminatoria=useCallback(jogos=>{const rodadas=[...new Set(jogos.map(j=>j.rodada))].sort((a,b)=>a-b);return rodadas.map(rodada=>{var _jogosDaRodada$;const jogosDaRodada=jogos.filter(j=>j.rodada===rodada);const fase=((_jogosDaRodada$=jogosDaRodada[0])===null||_jogosDaRodada$===void 0?void 0:_jogosDaRodada$.fase)||'';return/*#__PURE__*/_jsxs(\"div\",{className:\"rodada\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[fase,\" - Rodada \",rodada]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 01\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PLACAR\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 02\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VENCEDOR\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:jogosDaRodada.map((jogo,index)=>{const vencedor=jogo.placar&&jogo.submetido?parseInt(jogo.placar.split('-')[0])>parseInt(jogo.placar.split('-')[1])?jogo.dupla1.join(' & '):jogo.dupla2.join(' & '):'A definir';return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla1.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar||'Pendente'}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla2.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:vencedor})]},index);})})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>imprimirSumulasEliminatorias(rodada),children:[\"Imprimir S\\xFAmulas da Rodada \",rodada]})]},rodada);});},[imprimirSumulasEliminatorias]);const gerarRelatorioEstatisticas=useCallback(()=>{const todosOsJogos=[...currentTournament.grupos.flatMap(grupo=>grupo.jogos),...currentTournament.jogosEliminatoria.filter(jogo=>jogo.placar!=='BYE')].filter(jogo=>jogo.submetido);const totalPartidas=todosOsJogos.length;const totalGames=todosOsJogos.reduce((acc,jogo)=>{const[g1,g2]=jogo.placar.split('-').map(Number);return acc+(isNaN(g1)||isNaN(g2)?0:g1+g2);},0);const historicoDuplasCalculado={};todosOsJogos.forEach(jogo=>{const[g1,g2]=jogo.placar.split('-').map(Number);if(isNaN(g1)||isNaN(g2))return;const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!historicoDuplasCalculado[chave1]){historicoDuplasCalculado[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};}if(!historicoDuplasCalculado[chave2]){historicoDuplasCalculado[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};}historicoDuplasCalculado[chave1].jogos+=1;historicoDuplasCalculado[chave2].jogos+=1;if(g1>g2){historicoDuplasCalculado[chave1].pontos+=5;historicoDuplasCalculado[chave1].jogosVencidos+=1;historicoDuplasCalculado[chave1].gamesVencidos+=g1;historicoDuplasCalculado[chave1].gamesPerdidos+=g2;historicoDuplasCalculado[chave2].pontos+=2;historicoDuplasCalculado[chave2].gamesVencidos+=g2;historicoDuplasCalculado[chave2].gamesPerdidos+=g1;}else{historicoDuplasCalculado[chave2].pontos+=5;historicoDuplasCalculado[chave2].jogosVencidos+=1;historicoDuplasCalculado[chave2].gamesVencidos+=g2;historicoDuplasCalculado[chave2].gamesPerdidos+=g1;historicoDuplasCalculado[chave1].pontos+=2;historicoDuplasCalculado[chave1].gamesVencidos+=g1;historicoDuplasCalculado[chave1].gamesPerdidos+=g2;}});const historicoDuplas=currentTournament.historicoDuplas&&Object.keys(currentTournament.historicoDuplas).length>0?currentTournament.historicoDuplas:historicoDuplasCalculado;const estatisticasDuplas=Object.values(historicoDuplas).map(dados=>{var _currentTournament$ra;const derrotas=dados.jogos-dados.jogosVencidos;const saldoGames=dados.gamesVencidos-dados.gamesPerdidos;const posicaoRanking=((_currentTournament$ra=currentTournament.ranking.find(r=>r.dupla.join('')===dados.dupla.join('')))===null||_currentTournament$ra===void 0?void 0:_currentTournament$ra.lugar)||'-';return{dupla:dados.dupla.join(' & '),jogos:dados.jogos,vitorias:dados.jogosVencidos,derrotas,gamesVencidos:dados.gamesVencidos,gamesPerdidos:dados.gamesPerdidos,saldoGames,posicaoRanking};}).sort((a,b)=>{if(a.posicaoRanking==='-'&&b.posicaoRanking!=='-')return 1;if(b.posicaoRanking==='-'&&a.posicaoRanking!=='-')return-1;if(a.posicaoRanking!=='-'&&b.posicaoRanking!=='-')return a.posicaoRanking-b.posicaoRanking;return b.saldoGames-a.saldoGames;});const melhorCampanha=estatisticasDuplas.length>0?estatisticasDuplas.reduce((melhor,atual)=>atual.saldoGames>melhor.saldoGames?atual:melhor,estatisticasDuplas[0]):{dupla:'Nenhuma',vitorias:0,jogos:0,saldoGames:0};return{totalPartidas,totalGames,estatisticasDuplas,melhorCampanha};},[currentTournament]);const resetTournament=useCallback(()=>{setCurrentTournament(null);setFaseAtual('menu');},[]);const add8Duplas=useCallback(()=>{const newDuplas=[];for(let i=1;i<=8;i++){newDuplas.push([\"JOGADOR\".concat(i*2-1),\"JOGADOR\".concat(i*2)]);}updateTournamentField('duplas',[...currentTournament.duplas,...newDuplas]);},[currentTournament,updateTournamentField]);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"header\",{children:/*#__PURE__*/_jsx(\"img\",{src:btConnectLogo,alt:\"btConnect Logo\",className:\"header-logo\"})}),/*#__PURE__*/_jsxs(\"main\",{children:[faseAtual==='menu'&&/*#__PURE__*/_jsx(MeusTorneios,{tournaments:tournaments,onSelectTournament:loadTournament,onCreateNew:createNewTournament,onDeleteTournament:handleDeleteTournament,onImportTournaments:handleImportTournaments}),faseAtual==='duplas'&&/*#__PURE__*/_jsxs(\"div\",{className:\"tournament-setup\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Nome do Torneio:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:(currentTournament===null||currentTournament===void 0?void 0:currentTournament.nome)||'',onChange:e=>updateTournamentField('nome',e.target.value.toUpperCase()),placeholder:\"Nome do torneio\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Data de In\\xEDcio:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:(currentTournament===null||currentTournament===void 0?void 0:currentTournament.dataInicio)||'',onChange:e=>updateTournamentField('dataInicio',e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Hora de In\\xEDcio:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:(currentTournament===null||currentTournament===void 0?void 0:currentTournament.horaInicio)||'',onChange:e=>updateTournamentField('horaInicio',e.target.value)})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"image-section\",children:/*#__PURE__*/_jsx(\"img\",{src:gameDay,alt:\"Game Day\",className:\"tournament-image\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"duplas-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"GerarChaves\",onClick:()=>{try{const tournament=generateTournament(currentTournament.nome,currentTournament.duplas,currentTournament.dataInicio,currentTournament.horaInicio);setCurrentTournament(tournament);setTournaments(loadTournaments());setFaseAtual('grupos');}catch(error){alert(error.message);}},children:[/*#__PURE__*/_jsx(\"img\",{src:shuffleIcon,alt:\"Shuffle Icon\",className:\"shuffle-icon\"}),\"Gerar Chaveamento\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"GerarChavesManuais\",onClick:iniciarChavesManuais,children:\"Gerar Chaves Manuais\"}),(currentTournament===null||currentTournament===void 0?void 0:currentTournament.status)==='rascunho'&&/*#__PURE__*/_jsxs(\"button\",{className:\"iniciar-torneio\",onClick:startTournament,children:[/*#__PURE__*/_jsx(\"img\",{src:tournamentsIcon,alt:\"Tournament Icon\",className:\"button-icon\"}),\"Iniciar Torneio\"]}),/*#__PURE__*/_jsxs(\"button\",{className:\"homePage\",onClick:()=>setFaseAtual('menu'),children:[/*#__PURE__*/_jsx(\"img\",{src:folderIcon,alt:\"Folder Icon\",className:\"folder-icon\"}),\"Meus Torneios\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:add8Duplas,children:\"Adicionar 8 Duplas\"})]}),manualGroups?/*#__PURE__*/_jsxs(\"div\",{className:\"manual-groups\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Organize os Grupos Manualmente\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'20px'},children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Duplas Dispon\\xEDveis\"}),/*#__PURE__*/_jsx(\"ul\",{children:currentTournament.duplas.filter(dupla=>!manualGroups.some(g=>g.duplas.some(d=>d.join('')===dupla.join('')))).map((dupla,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[dupla.join(' & '),manualGroups.map(grupo=>grupo.duplas.length<grupo.maxDuplas&&/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setManualGroups(prev=>prev.map(g=>g.id===grupo.id?_objectSpread(_objectSpread({},g),{},{duplas:[...g.duplas,dupla]}):g)),children:[\"Adicionar ao Grupo \",grupo.id+1]},grupo.id))]},index))})]}),manualGroups.map(grupo=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h4\",{children:[\"Grupo \",grupo.id+1,\" (\",grupo.duplas.length,\"/\",grupo.maxDuplas,\")\"]}),/*#__PURE__*/_jsx(\"ul\",{children:grupo.duplas.map((dupla,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[dupla.join(' & '),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setManualGroups(prev=>prev.map(g=>g.id===grupo.id?_objectSpread(_objectSpread({},g),{},{duplas:g.duplas.filter(d=>d.join('')!==dupla.join(''))}):g)),children:\"Remover\"})]},index))})]},grupo.id))]}),/*#__PURE__*/_jsx(\"button\",{onClick:confirmarChavesManuais,children:\"Confirmar Grupos\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setManualGroups(null),children:\"Cancelar\"})]}):/*#__PURE__*/_jsx(DuplasList,{duplas:(currentTournament===null||currentTournament===void 0?void 0:currentTournament.duplas)||[],onAddDupla:addDupla,onRemoveDupla:removeDupla})]})]}),faseAtual==='grupos'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FaseDeGrupos,{grupos:currentTournament.grupos,onUpdateGroups:newGrupos=>updateTournamentField('grupos',newGrupos)}),/*#__PURE__*/_jsx(\"button\",{onClick:encerrarFaseGrupos,children:\"Encerrar Fase de Grupos\"}),/*#__PURE__*/_jsx(\"button\",{onClick:imprimirSumulasGrupos,children:\"Imprimir S\\xFAmulas da Fase de Grupos\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"acompanhamento\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Acompanhamento - Fase de Grupos\"}),currentTournament.grupos.map(grupo=>renderClassificacaoGrupo(grupo))]})]}),faseAtual==='eliminatória'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Fase Eliminat\\xF3ria\"}),/*#__PURE__*/_jsx(FaseEliminatoria,{jogos:currentTournament.jogosEliminatoria.filter(jogo=>!jogo.submetido||jogo.rodada===Math.max(...currentTournament.jogosEliminatoria.map(j=>j.rodada))),onAtualizarPlacar:atualizarPlacarNaEliminatoria,onAvancarParaFinal:encerrarFaseEliminatoria}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>encerrarFaseEliminatoria(currentTournament.jogosEliminatoria),children:\"Encerrar Etapa\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"acompanhamento\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Acompanhamento - Fase Eliminat\\xF3ria\"}),renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)]})]}),faseAtual==='final'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Final do Torneio\"}),/*#__PURE__*/_jsx(FaseFinal,{jogos:currentTournament.jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar'),onAtualizarPlacar:atualizarPlacarNaFinal,onFinalizarTorneio:finalizarTorneio}),currentTournament.jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar').every(jogo=>jogo.submetido)&&/*#__PURE__*/_jsx(\"button\",{onClick:finalizarTorneio,children:\"Encerrar Campeonato\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>gerarSumulas('final',currentTournament.jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar')),children:\"Imprimir S\\xFAmulas da Fase Final\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"acompanhamento\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Acompanhamento - Fase Final\"}),renderizarFaseEliminatoria(currentTournament.jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar'))]})]}),faseAtual==='finalizado'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Ranking Final:\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"POSI\\xC7\\xC3O\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DUPLAS\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:currentTournament.ranking.map((posição,index)=>{let medalha='';let color='#000';if(posição.lugar===1){medalha='🥇';color='gold';}else if(posição.lugar===2){medalha='🥈';color='silver';}else if(posição.lugar===3){medalha='🥉';color='brown';}return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{style:{color},children:[medalha,\" \",posição.lugar,\"\\xBA Colocado\"]}),/*#__PURE__*/_jsx(\"td\",{children:posição.dupla.join(' & ')})]},index);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"relatorio-estatisticas\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Estat\\xEDsticas Gerais do Torneio\"}),(()=>{const{totalPartidas,totalGames,estatisticasDuplas,melhorCampanha}=gerarRelatorioEstatisticas();const duplasExibidas=mostrarTodasDuplas?estatisticasDuplas:estatisticasDuplas.slice(0,4);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Total de Partidas Disputadas:\"}),\" \",totalPartidas]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Total de Games Disputados:\"}),\" \",totalGames]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Melhor Campanha:\"}),\" \",melhorCampanha.dupla,\" ( Saldo de Games: \",melhorCampanha.saldoGames,\", \",melhorCampanha.vitorias,\" vit\\xF3rias em\",' ',melhorCampanha.jogos,\" jogos)\"]}),/*#__PURE__*/_jsx(\"h4\",{children:\"Estat\\xEDsticas por Dupla\"}),estatisticasDuplas.length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"POSI\\xC7\\xC3O\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DUPLA\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PARTIDAS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VIT\\xD3RIAS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DERROTAS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"GAMES (V/P)\"}),/*#__PURE__*/_jsx(\"th\",{children:\"SALDO GAMES\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:duplasExibidas.map((dupla,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:dupla.posicaoRanking!=='-'?\"\".concat(dupla.posicaoRanking,\"\\xBA\"):'-'}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:dupla.dupla.split(' & ')[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:dupla.dupla.split(' & ')[1]})]})}),/*#__PURE__*/_jsx(\"td\",{children:dupla.jogos}),/*#__PURE__*/_jsx(\"td\",{children:dupla.vitorias}),/*#__PURE__*/_jsx(\"td\",{children:dupla.derrotas}),/*#__PURE__*/_jsxs(\"td\",{children:[dupla.gamesVencidos,\"/\",dupla.gamesPerdidos]}),/*#__PURE__*/_jsx(\"td\",{children:dupla.saldoGames})]},index))})]}),estatisticasDuplas.length>4&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>setMostrarTodasDuplas(!mostrarTodasDuplas),style:{marginTop:'10px'},children:mostrarTodasDuplas?'Ver menos':'Ver mais'})]}):/*#__PURE__*/_jsx(\"p\",{children:\"Nenhuma estat\\xEDstica dispon\\xEDvel para as duplas.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"historico-jogos\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Hist\\xF3rico de Jogos\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"Fase de Grupos\"}),currentTournament.grupos.map(grupo=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h6\",{children:[\"Grupo \",grupo.id+1]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Jogo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 1\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Placar\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 2\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Vencedor\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Fase\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:grupo.jogos.filter(jogo=>jogo.submetido).map((jogo,index)=>{const[g1,g2]=jogo.placar?jogo.placar.split('-').map(Number):[0,0];const vencedor=g1>g2?jogo.dupla1:g2>g1?jogo.dupla2:null;return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla1[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla1[1]})]})}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla2[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla2[1]})]})}),/*#__PURE__*/_jsx(\"td\",{children:vencedor?/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:vencedor[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:vencedor[1]})]}):'Empate'}),/*#__PURE__*/_jsx(\"td\",{children:\"Fase de Grupos\"})]},index);})})]})]},\"grupo-\".concat(grupo.id))),/*#__PURE__*/_jsx(\"h5\",{children:\"Fase Eliminat\\xF3ria\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Jogo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 1\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Placar\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 2\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Vencedor\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Fase\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:currentTournament.jogosEliminatoria.filter(jogo=>jogo.submetido&&jogo.fase!=='Final'&&jogo.fase!=='Disputa 3º Lugar').map((jogo,index)=>{let vencedor;if(jogo.dupla1[0]==='BYE'){vencedor=jogo.dupla2;}else if(jogo.dupla2[0]==='BYE'){vencedor=jogo.dupla1;}else{const[g1,g2]=jogo.placar.split('-').map(Number);vencedor=g1>g2?jogo.dupla1:g2>g1?jogo.dupla2:null;}return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla1[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla1[1]})]})}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla2[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla2[1]})]})}),/*#__PURE__*/_jsx(\"td\",{children:vencedor?/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:vencedor[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:vencedor[1]})]}):'Empate'}),/*#__PURE__*/_jsx(\"td\",{children:jogo.fase})]},index);})})]}),/*#__PURE__*/_jsx(\"h5\",{children:\"Fase Final\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Jogo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 1\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Placar\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 2\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Vencedor\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Fase\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:currentTournament.jogosEliminatoria.filter(jogo=>jogo.submetido&&(jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar')).map((jogo,index)=>{let vencedor;if(jogo.dupla1[0]==='BYE'){vencedor=jogo.dupla2;}else if(jogo.dupla2[0]==='BYE'){vencedor=jogo.dupla1;}else{const[g1,g2]=jogo.placar.split('-').map(Number);vencedor=g1>g2?jogo.dupla1:g2>g1?jogo.dupla2:null;}return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla1[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla1[1]})]})}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla2[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:jogo.dupla2[1]})]})}),/*#__PURE__*/_jsx(\"td\",{children:vencedor?/*#__PURE__*/_jsxs(\"div\",{className:\"dupla-container\",children:[/*#__PURE__*/_jsx(\"span\",{children:vencedor[0]}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{children:vencedor[1]})]}):'Empate'}),/*#__PURE__*/_jsx(\"td\",{children:jogo.fase})]},index);})})]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Torneio Finalizado em \",new Date().toLocaleString('pt-BR'),\"!\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:resetTournament,className:\"novo-torneio-btn\",children:\"In\\xEDcio\"})]});})()]})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","MeusTorneios","saveTournament","loadTournaments","deleteTournament","generateTournament","classificarDuplasPorDesempate","classificarDuplas","iniciarFaseEliminatoria","avancarRodadaEliminatoria","criarJogosParaGrupo","gameDay","btConnectLogo","tournamentsIcon","shuffleIcon","folderIcon","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","App","currentTournament","setCurrentTournament","faseAtual","setFaseAtual","tournaments","setTournaments","manualGroups","setManualGroups","mostrarTodasDuplas","setMostrarTodasDuplas","updatedTournaments","saveCurrentTournament","nome","dataInicio","horaInicio","tournamentToSave","_objectSpread","status","console","log","updateTournamentField","field","value","prev","updated","concat","createNewTournament","newTournament","dataCriacao","dataTorneio","duplas","grupos","jogosEliminatoria","finalConfigurada","terceiroLugarConfigurado","ranking","duplasBye","historicoDuplas","loadTournament","tournament","handleDeleteTournament","handleImportTournaments","importedTournaments","Object","entries","forEach","_ref","addDupla","dupla","some","d","includes","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","historicoInicial","reduce","acc","join","pontos","jogos","jogosVencidos","gamesVencidos","gamesPerdidos","Date","toISOString","iniciarChavesManuais","numDuplas","numGrupos","ceil","gruposIniciais","Array","fill","map","id","maxDuplas","baseSize","floor","extras","grupo","confirmarChavesManuais","totalDuplasAtribuidas","gruposComJogos","gerarSumulas","fase","categoria","sumulasHtml","jogo1","jogo2","getSumulaHtml","jogo","grupoId","faseNome","horarioEstimado","setMinutes","getMinutes","horarioFormatado","toLocaleTimeString","hour","minute","toLocaleDateString","dupla1","dupla2","push","printWindow","window","open","document","write","close","print","imprimirSumulasGrupos","jogosGrupos","flatMap","imprimirSumulasEliminatorias","rodada","jogosRodada","j","encerrarFaseGrupos","submetido","placar","todosOsJogos","novoHistorico","g1","g2","split","Number","isNaN","chave1","chave2","classificados","c","updatedTournament","lugar","atualizarPlacarNaEliminatoria","vencedora","chaveVencedora","_novoHistorico$chaveV","_novoHistorico$chaveV2","_novoHistorico$chaveV3","_novoHistorico$chaveV4","_novoHistorico$chaveV5","iniciarFinal","semifinalGames","error","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedores","novaRodada","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","diasSemana","meses","diaSemana","getDay","dia","String","getDate","padStart","mes","getMonth","hora","getHours","minuto","className","children","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","onClick","gerarRelatorioEstatisticas","totalPartidas","totalGames","historicoDuplasCalculado","keys","estatisticasDuplas","values","dados","_currentTournament$ra","derrotas","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","resetTournament","add8Duplas","newDuplas","src","alt","onSelectTournament","onCreateNew","onDeleteTournament","onImportTournaments","type","onChange","e","target","toUpperCase","placeholder","message","style","display","gap","g","onAddDupla","onRemoveDupla","onUpdateGroups","newGrupos","onAtualizarPlacar","onAvancarParaFinal","onFinalizarTorneio","posição","medalha","color","duplasExibidas","slice","marginTop","toLocaleString"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport {\n  saveTournament,\n  loadTournaments,\n  deleteTournament,\n  generateTournament,\n  classificarDuplasPorDesempate,\n  classificarDuplas,\n  iniciarFaseEliminatoria,\n  avancarRodadaEliminatoria,\n  criarJogosParaGrupo,\n} from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport shuffleIcon from './assets/icons/shuffle.svg';\nimport folderIcon from './assets/icons/folder.svg';\n\nfunction App() {\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n  const [manualGroups, setManualGroups] = useState(null);\n  const [mostrarTodasDuplas, setMostrarTodasDuplas] = useState(false); // Novo estado\n\n  useEffect(() => {\n    const updatedTournaments = loadTournaments();\n    setTournaments(updatedTournaments);\n  }, []);\n\n  const saveCurrentTournament = useCallback(() => {\n    if (currentTournament && currentTournament.nome && currentTournament.dataInicio && currentTournament.horaInicio) {\n      const tournamentToSave = {\n        ...currentTournament,\n        faseAtual,\n        status: currentTournament.status\n      };\n      console.log('Salvando torneio no localStorage com status:', tournamentToSave.status);\n      saveTournament(tournamentToSave);\n      setTournaments(loadTournaments());\n    }\n  }, [currentTournament, faseAtual]);\n\n  const updateTournamentField = useCallback((field, value) => {\n    setCurrentTournament((prev) => {\n      const updated = { ...prev, [field]: value };\n      console.log(`Atualizando ${field}:`, value);\n      if (updated.nome && updated.dataInicio && updated.horaInicio) {\n        saveCurrentTournament();\n      }\n      return updated;\n    });\n  }, [saveCurrentTournament]);\n\n  const createNewTournament = useCallback(() => {\n    const newTournament = {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas',\n    };\n    setCurrentTournament(newTournament);\n    setFaseAtual('duplas');\n  }, []);\n\n  const loadTournament = useCallback((nome) => {\n    const tournament = tournaments[nome];\n    if (tournament) {\n      console.log('Carregando torneio do localStorage:', tournament);\n      setCurrentTournament(tournament);\n      setFaseAtual(tournament.status === 'finalizado' ? 'finalizado' : tournament.faseAtual || 'duplas');\n    } else {\n      createNewTournament();\n    }\n  }, [tournaments, createNewTournament]);\n\n  const handleDeleteTournament = useCallback((nome) => {\n    deleteTournament(nome);\n    setTournaments((prev) => {\n      const updated = { ...prev };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n    }\n  }, [currentTournament]);\n\n  const handleImportTournaments = useCallback((importedTournaments) => {\n    setTournaments((prev) => {\n      const updatedTournaments = { ...prev, ...importedTournaments };\n      Object.entries(updatedTournaments).forEach(([nome, tournament]) => {\n        saveTournament(tournament);\n      });\n      return updatedTournaments;\n    });\n  }, []);\n\n  const addDupla = useCallback((dupla) => {\n    if (\n      !currentTournament?.duplas.some(\n        (d) => d.includes(dupla[0]) || d.includes(dupla[1])\n      )\n    ) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  }, [currentTournament, updateTournamentField]);\n\n  const removeDupla = useCallback((index) => {\n    updateTournamentField(\n      'duplas',\n      currentTournament.duplas.filter((_, i) => i !== index)\n    );\n  }, [currentTournament, updateTournamentField]);\n\n  const startTournament = useCallback(() => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (\n      !currentTournament.nome ||\n      !currentTournament.dataInicio ||\n      !currentTournament.horaInicio\n    ) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const duplasSorteadas = [...currentTournament.duplas].sort(() => Math.random() - 0.5);\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n    setCurrentTournament((prev) => ({\n      ...prev,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString(),\n      duplas: duplasSorteadas,\n    }));\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  }, [currentTournament, saveCurrentTournament]);\n\n  const iniciarChavesManuais = useCallback(() => {\n    const numDuplas = currentTournament.duplas.length;\n    if (numDuplas < 3) {\n      alert('É necessário pelo menos 3 duplas para criar um torneio.');\n      return;\n    }\n    if (!currentTournament.nome || !currentTournament.dataInicio || !currentTournament.horaInicio) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n\n    let numGrupos;\n    if (numDuplas === 6) numGrupos = 2;\n    else if (numDuplas === 14) numGrupos = 4;\n    else if (numDuplas <= 5) numGrupos = 1;\n    else if (numDuplas <= 8) numGrupos = 2;\n    else if (numDuplas <= 11) numGrupos = 3;\n    else if (numDuplas <= 17) numGrupos = 5;\n    else if (numDuplas <= 20) numGrupos = 6;\n    else numGrupos = Math.ceil(numDuplas / 3);\n\n    const gruposIniciais = Array(numGrupos).fill().map((_, i) => ({\n      id: i,\n      duplas: [],\n    }));\n\n    if (numDuplas === 6) {\n      gruposIniciais[0].maxDuplas = 3;\n      gruposIniciais[1].maxDuplas = 3;\n    } else if (numDuplas === 14) {\n      gruposIniciais[0].maxDuplas = 4;\n      gruposIniciais[1].maxDuplas = 4;\n      gruposIniciais[2].maxDuplas = 3;\n      gruposIniciais[3].maxDuplas = 3;\n    } else {\n      const baseSize = Math.floor(numDuplas / numGrupos);\n      const extras = numDuplas % numGrupos;\n      gruposIniciais.forEach((grupo, i) => {\n        grupo.maxDuplas = baseSize + (i < extras ? 1 : 0);\n      });\n    }\n\n    setManualGroups(gruposIniciais);\n  }, [currentTournament]);\n\n  const confirmarChavesManuais = useCallback(() => {\n    const totalDuplasAtribuidas = manualGroups.reduce((acc, grupo) => acc + grupo.duplas.length, 0);\n    if (totalDuplasAtribuidas !== currentTournament.duplas.length) {\n      alert('Todas as duplas devem ser atribuídas aos grupos.');\n      return;\n    }\n\n    const gruposComJogos = manualGroups.map((grupo) => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id),\n    }));\n\n    const historicoInicial = currentTournament.duplas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n\n    setCurrentTournament((prev) => ({\n      ...prev,\n      grupos: gruposComJogos,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString(),\n    }));\n    setFaseAtual('grupos');\n    setManualGroups(null);\n    saveCurrentTournament();\n  }, [manualGroups, currentTournament, saveCurrentTournament]);\n\n  const gerarSumulas = useCallback((fase, jogos) => {\n    const dataTorneio = currentTournament.dataInicio;\n    const horaInicio = currentTournament.horaInicio;\n    const categoria = currentTournament.duplas.length === 6 ? 'D' : 'B/C';\n\n    const sumulasHtml = [];\n    for (let i = 0; i < jogos.length; i += 2) {\n      const jogo1 = jogos[i];\n      const jogo2 = jogos[i + 1] || null;\n\n      const getSumulaHtml = (jogo, index) => {\n        if (!jogo) return '';\n        const grupoId = fase === 'grupos' ? jogo.grupoId + 1 : '';\n        const faseNome = fase === 'grupos' ? `Grupo ${grupoId}` : jogo.fase;\n        const horarioEstimado = new Date(`${dataTorneio}T${horaInicio}`);\n        horarioEstimado.setMinutes(horarioEstimado.getMinutes() + index * 30);\n        const horarioFormatado = horarioEstimado.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n\n        return `\n          <div class=\"sumula\" style=\"font-family: Arial, sans-serif; font-size: 9pt; width: 190mm; height: 135mm; margin: 5mm auto; padding: 0; border: 1px solid #000;\">\n            <h2 style=\"text-align: center; font-size: 11pt; margin: 3px 0;\">SÚMULA DE JOGO</h2>\n            <h3 style=\"text-align: center; font-size: 9pt; margin: 2px 0;\">Arena Beach Tennis - Monte Santo de Minas/MG</h3>\n            <table style=\"width: 100%; border-collapse: collapse; font-size: 8pt;\">\n              <tr>\n                <td><strong>Cat.:</strong> ${categoria}</td>\n                <td><strong>Data:</strong> ${new Date(dataTorneio).toLocaleDateString('pt-BR')}</td>\n                <td><strong>Horário:</strong> ${horarioFormatado}</td>\n              </tr>\n              <tr>\n                <td colspan=\"3\"><strong>Fase:</strong> ${faseNome}</td>\n              </tr>\n            </table>\n            <hr style=\"margin: 3px 0;\">\n            <table style=\"width: 100%; border-collapse: collapse; font-size: 8pt;\">\n              <tr>\n                <td style=\"width: 50%;\"><strong>Dupla 1:</strong> ${jogo.dupla1[0]} & ${jogo.dupla1[1]}</td>\n                <td style=\"width: 50%;\"><strong>Dupla 2:</strong> ${jogo.dupla2[0]} & ${jogo.dupla2[1]}</td>\n              </tr>\n            </table>\n            <table style=\"width: 40%; margin: 3px auto; text-align: center; border-collapse: collapse; font-size: 8pt;\">\n              <tr>\n                <th>D1</th>\n                <th>X</th>\n                <th>D2</th>\n              </tr>\n              <tr>\n                <td style=\"border: 1px solid #000; height: 15px; width: 30px;\">___</td>\n                <td>-</td>\n                <td style=\"border: 1px solid #000; height: 15px; width: 30px;\">___</td>\n              </tr>\n            </table>\n            <p style=\"font-size: 7pt; text-align: center; margin: 2px 0;\">Set até 6 (W.O.: 6x0)</p>\n            <hr style=\"margin: 3px 0;\">\n            <p style=\"font-size: 8pt; margin: 2px 0;\">\n              <strong>Vencedor:</strong> [ ] D1 [ ] D2 [ ] W.O.  \n              <strong>Placar:</strong> ___ x ___\n            </p>\n            <p style=\"font-size: 8pt; margin: 2px 0;\">\n              <strong>Resp.:</strong> _____________________<br>\n              <strong>Org.:</strong> _____________________<br>\n              <strong>Entrega:</strong> ___/___ às ___:___\n            </p>\n            <p style=\"font-size: 7pt; margin: 2px 0;\">Obs.: _____________________</p>\n          </div>\n        `;\n      };\n\n      sumulasHtml.push(`\n        <div class=\"page\" style=\"width: 210mm; height: 297mm; margin: 0 auto; padding: 0;\">\n          ${getSumulaHtml(jogo1, i)}\n          ${jogo2 ? '<hr style=\"border: 1px dashed #000; margin: 5mm 0;\">' : ''}\n          ${jogo2 ? getSumulaHtml(jogo2, i + 1) : ''}\n        </div>\n      `);\n    }\n\n    const printWindow = window.open('', '_blank');\n    printWindow.document.write(`\n      <html>\n        <head>\n          <title>Súmulas - Torneio de Beach Tennis</title>\n          <style>\n            @media print {\n              .page { page-break-after: always; }\n              body { margin: 0; padding: 0; }\n              .sumula { box-sizing: border-box; }\n            }\n          </style>\n        </head>\n        <body>${sumulasHtml.join('')}</body>\n      </html>\n    `);\n    printWindow.document.close();\n    printWindow.print();\n  }, [currentTournament]);\n\n  const imprimirSumulasGrupos = useCallback(() => {\n    const jogosGrupos = currentTournament.grupos.flatMap((grupo) => grupo.jogos);\n    gerarSumulas('grupos', jogosGrupos);\n  }, [currentTournament, gerarSumulas]);\n\n  const imprimirSumulasEliminatorias = useCallback((rodada) => {\n    const jogosRodada = currentTournament.jogosEliminatoria.filter((j) => j.rodada === rodada);\n    gerarSumulas('eliminatória', jogosRodada);\n  }, [currentTournament, gerarSumulas]);\n\n  const encerrarFaseGrupos = useCallback(() => {\n    if (\n      currentTournament.grupos.some((grupo) =>\n        grupo.jogos.some((jogo) => !jogo.submetido || !jogo.placar)\n      )\n    ) {\n      alert('Todos os jogos da fase de grupos devem ter placares submetidos antes de encerrar.');\n      return;\n    }\n\n    const todosOsJogos = currentTournament.grupos.flatMap((grupo) => grupo.jogos);\n\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach((jogo) => {\n        if (!jogo.placar || !jogo.placar.includes('-') || !jogo.submetido) return;\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      return novoHistorico;\n    });\n\n    const numDuplas = currentTournament.duplas.length;\n    const classificados = classificarDuplas(currentTournament.grupos);\n\n    if (numDuplas <= 4) {\n      const ranking = classificarDuplasPorDesempate(classificados.map(c => c.dupla), todosOsJogos);\n      const updatedTournament = {\n        ...currentTournament,\n        ranking: ranking.map((dupla, index) => ({\n          lugar: index + 1,\n          dupla: dupla,\n        })),\n        status: 'finalizado',\n        faseAtual: 'finalizado'\n      };\n      setCurrentTournament(updatedTournament);\n      setFaseAtual('finalizado');\n      saveTournament(updatedTournament);\n    } else {\n      const jogosEliminatoria = iniciarFaseEliminatoria(classificados);\n      updateTournamentField('jogosEliminatoria', jogosEliminatoria);\n      updateTournamentField('duplasBye', []);\n      setFaseAtual('eliminatória');\n      saveCurrentTournament();\n    }\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const atualizarPlacarNaEliminatoria = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na eliminatória:', { jogo, placar });\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        ),\n      ]);\n      const vencedora = jogo.dupla1[0] === 'BYE' ? jogo.dupla2 : jogo.dupla1;\n      const chaveVencedora = vencedora.join('');\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        novoHistorico[chaveVencedora] = {\n          dupla: vencedora,\n          jogos: (novoHistorico[chaveVencedora]?.jogos || 0) + 1,\n          jogosVencidos: (novoHistorico[chaveVencedora]?.jogosVencidos || 0) + 1,\n          pontos: (novoHistorico[chaveVencedora]?.pontos || 0) + 5,\n          gamesVencidos: novoHistorico[chaveVencedora]?.gamesVencidos || 0,\n          gamesPerdidos: novoHistorico[chaveVencedora]?.gamesPerdidos || 0,\n        };\n        console.log('Histórico após eliminatória (BYE):', novoHistorico);\n        return novoHistorico;\n      });\n    } else {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar, submetido: true } : j\n        ),\n      ]);\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após eliminatória:', novoHistorico);\n        return novoHistorico;\n      });\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const iniciarFinal = useCallback((jogos) => {\n    const semifinalGames = jogos.filter((jogo) => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria,\n      {\n        dupla1: [...finalistas[0]],\n        dupla2: [...finalistas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n      {\n        dupla1: [...perdedores[0]],\n        dupla2: [...perdedores[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n    ]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const atualizarPlacarNaFinal = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na final:', { jogo, placar });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria.map((j) =>\n        j === jogo ? { ...j, placar, submetido: true } : j\n      ),\n    ]);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1])\n        novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      if (!novoHistorico[chave2])\n        novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      console.log('Histórico após final:', novoHistorico);\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const encerrarFaseEliminatoria = useCallback((jogos) => {\n    const rodadaAtual = Math.max(\n      ...currentTournament.jogosEliminatoria.map((j) => j.rodada)\n    );\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(\n      (j) => j.rodada === rodadaAtual\n    );\n\n    if (!jogosRodadaAtual.every((j) => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    const vencedores = jogosRodadaAtual.map((jogo) => {\n      if (jogo.dupla2[0] === 'BYE') return jogo.dupla1;\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    if (vencedores.length === 2 && !currentTournament.finalConfigurada) {\n      iniciarFinal(jogosRodadaAtual);\n    } else if (vencedores.length > 2) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria,\n        ...novaRodada,\n      ]);\n      saveCurrentTournament();\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  }, [currentTournament, updateTournamentField, saveCurrentTournament, iniciarFinal]);\n\n  const finalizarTorneio = useCallback(() => {\n    const final = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Final'\n    );\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Disputa 3º Lugar'\n    );\n\n    if (!final || !terceiroLugar || !final.submetido || !terceiroLugar.submetido) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos. Certifique-se de que todos os placares foram submetidos.');\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] =\n      finalSet1 > finalSet2\n        ? [final.dupla1, final.dupla2]\n        : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] =\n      terceiroSet1 > terceiroSet2\n        ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n        : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    const updatedTournament = {\n      ...currentTournament,\n      ranking: [\n        { lugar: 1, dupla: vencedorFinal },\n        { lugar: 2, dupla: perdedorFinal },\n        { lugar: 3, dupla: terceiro },\n        { lugar: 4, dupla: quarto },\n      ],\n      status: 'finalizado',\n      faseAtual: 'finalizado'\n    };\n\n    setCurrentTournament(updatedTournament);\n    setFaseAtual('finalizado');\n\n    console.log('Finalizando torneio. Novo status:', updatedTournament.status);\n    saveTournament(updatedTournament);\n\n    setTournaments((prev) => ({\n      ...prev,\n      [updatedTournament.nome]: updatedTournament\n    }));\n  }, [currentTournament]);\n\n  const renderClassificacaoGrupo = useCallback((grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every((jogo) => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(\n                (j) =>\n                  j.dupla1.join('') === dupla.join('') ||\n                  j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar\n                ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate'\n                : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(currentTournament.dataTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }, [currentTournament]);\n\n  const renderizarFaseEliminatoria = useCallback((jogos) => {\n    const rodadas = [...new Set(jogos.map((j) => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map((rodada) => {\n      const jogosDaRodada = jogos.filter((j) => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor =\n                  jogo.placar && jogo.submetido\n                    ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1])\n                      ? jogo.dupla1.join(' & ')\n                      : jogo.dupla2.join(' & ')\n                    : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <button onClick={() => imprimirSumulasEliminatorias(rodada)}>\n            Imprimir Súmulas da Rodada {rodada}\n          </button>\n        </div>\n      );\n    });\n  }, [imprimirSumulasEliminatorias]);\n\n  const gerarRelatorioEstatisticas = useCallback(() => {\n    const todosOsJogos = [\n      ...currentTournament.grupos.flatMap((grupo) => grupo.jogos),\n      ...currentTournament.jogosEliminatoria.filter((jogo) => jogo.placar !== 'BYE'),\n    ].filter((jogo) => jogo.submetido);\n\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + (isNaN(g1) || isNaN(g2) ? 0 : g1 + g2);\n    }, 0);\n\n    const historicoDuplasCalculado = {};\n    todosOsJogos.forEach((jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      if (isNaN(g1) || isNaN(g2)) return;\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n\n      if (!historicoDuplasCalculado[chave1]) {\n        historicoDuplasCalculado[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      }\n      if (!historicoDuplasCalculado[chave2]) {\n        historicoDuplasCalculado[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      }\n\n      historicoDuplasCalculado[chave1].jogos += 1;\n      historicoDuplasCalculado[chave2].jogos += 1;\n      if (g1 > g2) {\n        historicoDuplasCalculado[chave1].pontos += 5;\n        historicoDuplasCalculado[chave1].jogosVencidos += 1;\n        historicoDuplasCalculado[chave1].gamesVencidos += g1;\n        historicoDuplasCalculado[chave1].gamesPerdidos += g2;\n        historicoDuplasCalculado[chave2].pontos += 2;\n        historicoDuplasCalculado[chave2].gamesVencidos += g2;\n        historicoDuplasCalculado[chave2].gamesPerdidos += g1;\n      } else {\n        historicoDuplasCalculado[chave2].pontos += 5;\n        historicoDuplasCalculado[chave2].jogosVencidos += 1;\n        historicoDuplasCalculado[chave2].gamesVencidos += g2;\n        historicoDuplasCalculado[chave2].gamesPerdidos += g1;\n        historicoDuplasCalculado[chave1].pontos += 2;\n        historicoDuplasCalculado[chave1].gamesVencidos += g1;\n        historicoDuplasCalculado[chave1].gamesPerdidos += g2;\n      }\n    });\n\n    const historicoDuplas = currentTournament.historicoDuplas && Object.keys(currentTournament.historicoDuplas).length > 0\n      ? currentTournament.historicoDuplas\n      : historicoDuplasCalculado;\n\n    const estatisticasDuplas = Object.values(historicoDuplas).map((dados) => {\n      const derrotas = dados.jogos - dados.jogosVencidos;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking =\n        currentTournament.ranking.find((r) => r.dupla.join('') === dados.dupla.join(''))?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        derrotas,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        posicaoRanking,\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n\n    const melhorCampanha = estatisticasDuplas.length > 0\n      ? estatisticasDuplas.reduce(\n        (melhor, atual) => (atual.saldoGames > melhor.saldoGames ? atual : melhor),\n        estatisticasDuplas[0]\n      )\n      : { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 };\n\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha,\n    };\n  }, [currentTournament]);\n\n  const resetTournament = useCallback(() => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  }, []);\n\n  const add8Duplas = useCallback(() => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  }, [currentTournament, updateTournamentField]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'menu' && (\n          <MeusTorneios\n            tournaments={tournaments}\n            onSelectTournament={loadTournament}\n            onCreateNew={createNewTournament}\n            onDeleteTournament={handleDeleteTournament}\n            onImportTournaments={handleImportTournaments}\n          />\n        )}\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={currentTournament?.nome || ''}\n                  onChange={(e) => updateTournamentField('nome', e.target.value.toUpperCase())}\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={currentTournament?.dataInicio || ''}\n                  onChange={(e) => updateTournamentField('dataInicio', e.target.value)}\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={currentTournament?.horaInicio || ''}\n                  onChange={(e) => updateTournamentField('horaInicio', e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button\n                  className=\"GerarChaves\"\n                  onClick={() => {\n                    try {\n                      const tournament = generateTournament(\n                        currentTournament.nome,\n                        currentTournament.duplas,\n                        currentTournament.dataInicio,\n                        currentTournament.horaInicio\n                      );\n                      setCurrentTournament(tournament);\n                      setTournaments(loadTournaments());\n                      setFaseAtual('grupos');\n                    } catch (error) {\n                      alert(error.message);\n                    }\n                  }}\n                >\n                  <img src={shuffleIcon} alt=\"Shuffle Icon\" className=\"shuffle-icon\" />\n                  Gerar Chaveamento\n                </button>\n                <button className=\"GerarChavesManuais\" onClick={iniciarChavesManuais}>\n                  Gerar Chaves Manuais\n                </button>\n                {currentTournament?.status === 'rascunho' && (\n                  <button className=\"iniciar-torneio\" onClick={startTournament}>\n                    <img src={tournamentsIcon} alt=\"Tournament Icon\" className=\"button-icon\" />\n                    Iniciar Torneio\n                  </button>\n                )}\n                <button className=\"homePage\" onClick={() => setFaseAtual('menu')}>\n                  <img src={folderIcon} alt=\"Folder Icon\" className=\"folder-icon\" />\n                  Meus Torneios\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n              </div>\n              {manualGroups ? (\n                <div className=\"manual-groups\">\n                  <h3>Organize os Grupos Manualmente</h3>\n                  <div style={{ display: 'flex', gap: '20px' }}>\n                    <div>\n                      <h4>Duplas Disponíveis</h4>\n                      <ul>\n                        {currentTournament.duplas\n                          .filter((dupla) =>\n                            !manualGroups.some((g) => g.duplas.some((d) => d.join('') === dupla.join('')))\n                          )\n                          .map((dupla, index) => (\n                            <li key={index}>\n                              {dupla.join(' & ')}\n                              {manualGroups.map((grupo) => (\n                                grupo.duplas.length < grupo.maxDuplas && (\n                                  <button\n                                    key={grupo.id}\n                                    onClick={() =>\n                                      setManualGroups((prev) =>\n                                        prev.map((g) =>\n                                          g.id === grupo.id ? { ...g, duplas: [...g.duplas, dupla] } : g\n                                        )\n                                      )\n                                    }\n                                  >\n                                    Adicionar ao Grupo {grupo.id + 1}\n                                  </button>\n                                )\n                              ))}\n                            </li>\n                          ))}\n                      </ul>\n                    </div>\n                    {manualGroups.map((grupo) => (\n                      <div key={grupo.id}>\n                        <h4>Grupo {grupo.id + 1} ({grupo.duplas.length}/{grupo.maxDuplas})</h4>\n                        <ul>\n                          {grupo.duplas.map((dupla, index) => (\n                            <li key={index}>\n                              {dupla.join(' & ')}\n                              <button\n                                onClick={() =>\n                                  setManualGroups((prev) =>\n                                    prev.map((g) =>\n                                      g.id === grupo.id\n                                        ? { ...g, duplas: g.duplas.filter((d) => d.join('') !== dupla.join('')) }\n                                        : g\n                                    )\n                                  )\n                                }\n                              >\n                                Remover\n                              </button>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    ))}\n                  </div>\n                  <button onClick={confirmarChavesManuais}>Confirmar Grupos</button>\n                  <button onClick={() => setManualGroups(null)}>Cancelar</button>\n                </div>\n              ) : (\n                <DuplasList\n                  duplas={currentTournament?.duplas || []}\n                  onAddDupla={addDupla}\n                  onRemoveDupla={removeDupla}\n                />\n              )}\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos\n              grupos={currentTournament.grupos}\n              onUpdateGroups={(newGrupos) => updateTournamentField('grupos', newGrupos)}\n            />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <button onClick={imprimirSumulasGrupos}>Imprimir Súmulas da Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {currentTournament.grupos.map((grupo) => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) =>\n                  !jogo.submetido ||\n                  jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map((j) => j.rodada))\n              )}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n              onAvancarParaFinal={encerrarFaseEliminatoria}\n            />\n            <button onClick={() => encerrarFaseEliminatoria(currentTournament.jogosEliminatoria)}>\n              Encerrar Etapa\n            </button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {currentTournament.jogosEliminatoria\n              .filter((jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')\n              .every((jogo) => jogo.submetido) && (\n                <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n              )}\n            <button onClick={() => gerarSumulas('final', currentTournament.jogosEliminatoria.filter(\n              (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n            ))}>\n              Imprimir Súmulas da Fase Final\n            </button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(\n                currentTournament.jogosEliminatoria.filter(\n                  (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n                )\n              )}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLAS</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentTournament.ranking.map((posição, index) => {\n                  let medalha = '';\n                  let color = '#000';\n                  if (posição.lugar === 1) {\n                    medalha = '🥇';\n                    color = 'gold';\n                  } else if (posição.lugar === 2) {\n                    medalha = '🥈';\n                    color = 'silver';\n                  } else if (posição.lugar === 3) {\n                    medalha = '🥉';\n                    color = 'brown';\n                  }\n                  return (\n                    <tr key={index}>\n                      <td style={{ color }}>{medalha} {posição.lugar}º Colocado</td>\n                      <td>{posição.dupla.join(' & ')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <div className=\"relatorio-estatisticas\">\n              <h3>Estatísticas Gerais do Torneio</h3>\n              {(() => {\n                const { totalPartidas, totalGames, estatisticasDuplas, melhorCampanha } =\n                  gerarRelatorioEstatisticas();\n                const duplasExibidas = mostrarTodasDuplas ? estatisticasDuplas : estatisticasDuplas.slice(0, 4);\n\n                return (\n                  <>\n                    <p><strong>Total de Partidas Disputadas:</strong> {totalPartidas}</p>\n                    <p><strong>Total de Games Disputados:</strong> {totalGames}</p>\n                    <p>\n                      <strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (\n                      Saldo de Games: {melhorCampanha.saldoGames}, {melhorCampanha.vitorias} vitórias em{' '}\n                      {melhorCampanha.jogos} jogos)\n                    </p>\n                    <h4>Estatísticas por Dupla</h4>\n                    {estatisticasDuplas.length > 0 ? (\n                      <>\n                        <table>\n                          <thead>\n                            <tr>\n                              <th>POSIÇÃO</th>\n                              <th>DUPLA</th>\n                              <th>PARTIDAS</th>\n                              <th>VITÓRIAS</th>\n                              <th>DERROTAS</th>\n                              <th>GAMES (V/P)</th>\n                              <th>SALDO GAMES</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {duplasExibidas.map((dupla, index) => (\n                              <tr key={index}>\n                                <td>{dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'}</td>\n                                <td>\n                                  <div className=\"dupla-container\">\n                                    <span>{dupla.dupla.split(' & ')[0]}</span>\n                                    <span></span>\n                                    <span>{dupla.dupla.split(' & ')[1]}</span>\n                                  </div>\n                                </td>\n                                <td>{dupla.jogos}</td>\n                                <td>{dupla.vitorias}</td>\n                                <td>{dupla.derrotas}</td>\n                                <td>{dupla.gamesVencidos}/{dupla.gamesPerdidos}</td>\n                                <td>{dupla.saldoGames}</td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                        {estatisticasDuplas.length > 4 && (\n                          <button\n                            onClick={() => setMostrarTodasDuplas(!mostrarTodasDuplas)}\n                            style={{ marginTop: '10px' }}\n                          >\n                            {mostrarTodasDuplas ? 'Ver menos' : 'Ver mais'}\n                          </button>\n                        )}\n                      </>\n                    ) : (\n                      <p>Nenhuma estatística disponível para as duplas.</p>\n                    )}\n                    <div className=\"historico-jogos\">\n                      <h4>Histórico de Jogos</h4>\n                      <h5>Fase de Grupos</h5>\n                      {currentTournament.grupos.map((grupo) => (\n                        <div key={`grupo-${grupo.id}`}>\n                          <h6>Grupo {grupo.id + 1}</h6>\n                          <table>\n                            <thead>\n                              <tr>\n                                <th>Jogo</th>\n                                <th>Dupla 1</th>\n                                <th>Placar</th>\n                                <th>Dupla 2</th>\n                                <th>Vencedor</th>\n                                <th>Fase</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {grupo.jogos\n                                .filter((jogo) => jogo.submetido)\n                                .map((jogo, index) => {\n                                  const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n                                  const vencedor = g1 > g2 ? jogo.dupla1 : g2 > g1 ? jogo.dupla2 : null;\n                                  return (\n                                    <tr key={index}>\n                                      <td>{index + 1}</td>\n                                      <td>\n                                        <div className=\"dupla-container\">\n                                          <span>{jogo.dupla1[0]}</span>\n                                          <span></span>\n                                          <span>{jogo.dupla1[1]}</span>\n                                        </div>\n                                      </td>\n                                      <td>{jogo.placar}</td>\n                                      <td>\n                                        <div className=\"dupla-container\">\n                                          <span>{jogo.dupla2[0]}</span>\n                                          <span></span>\n                                          <span>{jogo.dupla2[1]}</span>\n                                        </div>\n                                      </td>\n                                      <td>\n                                        {vencedor ? (\n                                          <div className=\"dupla-container\">\n                                            <span>{vencedor[0]}</span>\n                                            <span></span>\n                                            <span>{vencedor[1]}</span>\n                                          </div>\n                                        ) : (\n                                          'Empate'\n                                        )}\n                                      </td>\n                                      <td>Fase de Grupos</td>\n                                    </tr>\n                                  );\n                                })}\n                            </tbody>\n                          </table>\n                        </div>\n                      ))}\n                      <h5>Fase Eliminatória</h5>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Jogo</th>\n                            <th>Dupla 1</th>\n                            <th>Placar</th>\n                            <th>Dupla 2</th>\n                            <th>Vencedor</th>\n                            <th>Fase</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {currentTournament.jogosEliminatoria\n                            .filter((jogo) => jogo.submetido && jogo.fase !== 'Final' && jogo.fase !== 'Disputa 3º Lugar')\n                            .map((jogo, index) => {\n                              let vencedor;\n                              if (jogo.dupla1[0] === 'BYE') {\n                                vencedor = jogo.dupla2;\n                              } else if (jogo.dupla2[0] === 'BYE') {\n                                vencedor = jogo.dupla1;\n                              } else {\n                                const [g1, g2] = jogo.placar.split('-').map(Number);\n                                vencedor = g1 > g2 ? jogo.dupla1 : g2 > g1 ? jogo.dupla2 : null;\n                              }\n                              return (\n                                <tr key={index}>\n                                  <td>{index + 1}</td>\n                                  <td>\n                                    <div className=\"dupla-container\">\n                                      <span>{jogo.dupla1[0]}</span>\n                                      <span></span>\n                                      <span>{jogo.dupla1[1]}</span>\n                                    </div>\n                                  </td>\n                                  <td>{jogo.placar}</td>\n                                  <td>\n                                    <div className=\"dupla-container\">\n                                      <span>{jogo.dupla2[0]}</span>\n                                      <span></span>\n                                      <span>{jogo.dupla2[1]}</span>\n                                    </div>\n                                  </td>\n                                  <td>\n                                    {vencedor ? (\n                                      <div className=\"dupla-container\">\n                                        <span>{vencedor[0]}</span>\n                                        <span></span>\n                                        <span>{vencedor[1]}</span>\n                                      </div>\n                                    ) : (\n                                      'Empate'\n                                    )}\n                                  </td>\n                                  <td>{jogo.fase}</td>\n                                </tr>\n                              );\n                            })}\n                        </tbody>\n                      </table>\n                      <h5>Fase Final</h5>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Jogo</th>\n                            <th>Dupla 1</th>\n                            <th>Placar</th>\n                            <th>Dupla 2</th>\n                            <th>Vencedor</th>\n                            <th>Fase</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {currentTournament.jogosEliminatoria\n                            .filter((jogo) => jogo.submetido && (jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))\n                            .map((jogo, index) => {\n                              let vencedor;\n                              if (jogo.dupla1[0] === 'BYE') {\n                                vencedor = jogo.dupla2;\n                              } else if (jogo.dupla2[0] === 'BYE') {\n                                vencedor = jogo.dupla1;\n                              } else {\n                                const [g1, g2] = jogo.placar.split('-').map(Number);\n                                vencedor = g1 > g2 ? jogo.dupla1 : g2 > g1 ? jogo.dupla2 : null;\n                              }\n                              return (\n                                <tr key={index}>\n                                  <td>{index + 1}</td>\n                                  <td>\n                                    <div className=\"dupla-container\">\n                                      <span>{jogo.dupla1[0]}</span>\n                                      <span></span>\n                                      <span>{jogo.dupla1[1]}</span>\n                                    </div>\n                                  </td>\n                                  <td>{jogo.placar}</td>\n                                  <td>\n                                    <div className=\"dupla-container\">\n                                      <span>{jogo.dupla2[0]}</span>\n                                      <span></span>\n                                      <span>{jogo.dupla2[1]}</span>\n                                    </div>\n                                  </td>\n                                  <td>\n                                    {vencedor ? (\n                                      <div className=\"dupla-container\">\n                                        <span>{vencedor[0]}</span>\n                                        <span></span>\n                                        <span>{vencedor[1]}</span>\n                                      </div>\n                                    ) : (\n                                      'Empate'\n                                    )}\n                                  </td>\n                                  <td>{jogo.fase}</td>\n                                </tr>\n                              );\n                            })}\n                        </tbody>\n                      </table>\n                    </div>\n                    <p>Torneio Finalizado em {new Date().toLocaleString('pt-BR')}!</p>\n                    <button onClick={resetTournament} className=\"novo-torneio-btn\">\n                      Início\n                    </button>\n                  </>\n                );\n              })()}\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}