{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseDeGrupos.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseDeGrupos = ({\n  grupos,\n  onAtualizarEstatisticas,\n  onUpdateGroups\n}) => {\n  _s();\n  const [gruposState, setGruposState] = useState(grupos);\n  useEffect(() => {\n    setGruposState(grupos);\n  }, [grupos]);\n  useEffect(() => {\n    if (onUpdateGroups) {\n      onUpdateGroups(gruposState);\n    }\n  }, [gruposState, onUpdateGroups]);\n  const handleSubmitScore = (placar, jogoIndex, grupoIndex) => {\n    setGruposState(prevGrupos => {\n      const updatedGroups = prevGrupos.map(grupo => grupo.id === grupoIndex ? {\n        ...grupo,\n        jogos: grupo.jogos.map(jogo => jogo.jogoIndex === jogoIndex && !jogo.submetido ? {\n          ...jogo,\n          placar: placar,\n          submetido: true\n        } : jogo)\n      } : grupo);\n\n      // Atualizar pontuação das duplas\n      const jogo = updatedGroups[grupoIndex].jogos.find(jogo => jogo.jogoIndex === jogoIndex);\n      const [set1, set2] = placar.split('-').map(Number);\n      const vencedor = set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      const perdedor = vencedor === jogo.dupla1 ? jogo.dupla2 : jogo.dupla1;\n      const diferencaSets = Math.abs(set1 - set2);\n\n      // Atualizar a pontuação das duplas\n      updatedGroups[grupoIndex].duplas = updatedGroups[grupoIndex].duplas.map(dupla => {\n        if (dupla === vencedor) {\n          return dupla.map(d => ({\n            ...d,\n            pontos: (d.pontos || 0) + 3,\n            sets: (d.sets || 0) + diferencaSets\n          }));\n        } else if (dupla === perdedor) {\n          return dupla.map(d => ({\n            ...d,\n            pontos: (d.pontos || 0) - 1,\n            sets: (d.sets || 0) - diferencaSets\n          }));\n        }\n        return dupla;\n      });\n      console.log('Grupos após atualização:', updatedGroups);\n      return updatedGroups;\n    });\n    onAtualizarEstatisticas({\n      ...jogo,\n      placar,\n      grupo: grupoIndex,\n      fase: 'Fase de Grupos'\n    });\n  };\n  const renderJogo = ({\n    jogo,\n    grupoIndex\n  }) => {\n    const [set1, set2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n    const vencedor = set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    const perdedor = vencedor === jogo.dupla1 ? jogo.dupla2 : jogo.dupla1;\n    const diferencaSets = Math.abs(set1 - set2);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [jogo.dupla1.join(' e '), \" vs \", jogo.dupla2.join(' e '), \": \", jogo.placar || '0-0']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Vencedor: \", vencedor.join(' e '), \" | +\", diferencaSets, \" sets. Perdedor: \", perdedor.join(' e '), \" | -\", diferencaSets, \" sets.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, jogo.jogoIndex, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Fase de Grupos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), gruposState.map((grupo, grupoIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), grupo.jogos.map(jogo => renderJogo({\n        jogo,\n        grupoIndex\n      }))]\n    }, grupo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(FaseDeGrupos, \"GxCYYh35dTAFZnDp1YhRFquGLdg=\");\n_c = FaseDeGrupos;\nexport default FaseDeGrupos;\nvar _c;\n$RefreshReg$(_c, \"FaseDeGrupos\");","map":{"version":3,"names":["React","useState","useEffect","Jogo","jsxDEV","_jsxDEV","FaseDeGrupos","grupos","onAtualizarEstatisticas","onUpdateGroups","_s","gruposState","setGruposState","handleSubmitScore","placar","jogoIndex","grupoIndex","prevGrupos","updatedGroups","map","grupo","id","jogos","jogo","submetido","find","set1","set2","split","Number","vencedor","dupla1","dupla2","perdedor","diferencaSets","Math","abs","duplas","dupla","d","pontos","sets","console","log","fase","renderJogo","children","join","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseDeGrupos.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseDeGrupos = ({ grupos, onAtualizarEstatisticas, onUpdateGroups }) => {\r\n  const [gruposState, setGruposState] = useState(grupos);\r\n\r\n  useEffect(() => {\r\n    setGruposState(grupos);\r\n  }, [grupos]);\r\n\r\n  useEffect(() => {\r\n    if (onUpdateGroups) {\r\n      onUpdateGroups(gruposState);\r\n    }\r\n  }, [gruposState, onUpdateGroups]);\r\n\r\n  const handleSubmitScore = (placar, jogoIndex, grupoIndex) => {\r\n    setGruposState(prevGrupos => {\r\n      const updatedGroups = prevGrupos.map(grupo =>\r\n        grupo.id === grupoIndex ? {\r\n          ...grupo,\r\n          jogos: grupo.jogos.map(jogo =>\r\n            jogo.jogoIndex === jogoIndex && !jogo.submetido ? \r\n              { ...jogo, placar: placar, submetido: true } : jogo\r\n          )\r\n        } : grupo\r\n      );\r\n\r\n      // Atualizar pontuação das duplas\r\n      const jogo = updatedGroups[grupoIndex].jogos.find(jogo => jogo.jogoIndex === jogoIndex);\r\n      const [set1, set2] = placar.split('-').map(Number);\r\n      const vencedor = set1 > set2 ? jogo.dupla1 : jogo.dupla2;\r\n      const perdedor = vencedor === jogo.dupla1 ? jogo.dupla2 : jogo.dupla1;\r\n      const diferencaSets = Math.abs(set1 - set2);\r\n\r\n      // Atualizar a pontuação das duplas\r\n      updatedGroups[grupoIndex].duplas = updatedGroups[grupoIndex].duplas.map(dupla => {\r\n        if (dupla === vencedor) {\r\n          return dupla.map(d => ({ ...d, pontos: (d.pontos || 0) + 3, sets: (d.sets || 0) + diferencaSets }));\r\n        } else if (dupla === perdedor) {\r\n          return dupla.map(d => ({ ...d, pontos: (d.pontos || 0) - 1, sets: (d.sets || 0) - diferencaSets }));\r\n        }\r\n        return dupla;\r\n      });\r\n\r\n      console.log('Grupos após atualização:', updatedGroups);\r\n      return updatedGroups;\r\n    });\r\n\r\n    onAtualizarEstatisticas({ ...jogo, placar, grupo: grupoIndex, fase: 'Fase de Grupos' });\r\n  };\r\n\r\n  const renderJogo = ({ jogo, grupoIndex }) => {\r\n    const [set1, set2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\r\n    const vencedor = set1 > set2 ? jogo.dupla1 : jogo.dupla2;\r\n    const perdedor = vencedor === jogo.dupla1 ? jogo.dupla2 : jogo.dupla1;\r\n    const diferencaSets = Math.abs(set1 - set2);\r\n\r\n    return (\r\n      <div key={jogo.jogoIndex}>\r\n        <p>{jogo.dupla1.join(' e ')} vs {jogo.dupla2.join(' e ')}: {jogo.placar || '0-0'}</p>\r\n        <p>\r\n          Vencedor: {vencedor.join(' e ')} | +{diferencaSets} sets. \r\n          Perdedor: {perdedor.join(' e ')} | -{diferencaSets} sets.\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Fase de Grupos</h2>\r\n      {gruposState.map((grupo, grupoIndex) => (\r\n        <div key={grupo.id}>\r\n          <h3>Grupo {grupo.id + 1}</h3>\r\n          {grupo.jogos.map(jogo => \r\n            renderJogo({ jogo, grupoIndex })\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseDeGrupos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}