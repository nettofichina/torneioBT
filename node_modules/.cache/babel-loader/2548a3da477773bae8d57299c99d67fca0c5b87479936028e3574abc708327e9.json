{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { iniciarFaseEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [expandedRodadas, setExpandedRodadas] = useState({}); // Estado para controlar quais rodadas estão expandidas\n  const [visualizacao, setVisualizacao] = useState('acordeon'); // Padrão para acordeão\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const toggleRodada = rodada => {\n    setExpandedRodadas(prevState => ({\n      ...prevState,\n      [rodada]: !prevState[rodada]\n    }));\n  };\n  const renderizarRodadaAcordeon = jogos => {\n    const rodadas = [...new Set(jogos.map(jogo => jogo.rodada))].sort((a, b) => a - b);\n\n    // Determina a rodada atual (a menor rodada com jogos não submetidos)\n    let rodadaAtual = rodadas.find(r => jogos.some(j => j.rodada === r && !j.submetido)) || Math.max(...rodadas);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const isExpanded = expandedRodadas[rodada] || rodada === rodadaAtual; // Expande automaticamente a rodada atual\n      const jogosNaoSubmetidos = jogosDaRodada.filter(j => !j.submetido);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleRodada(rodada),\n          className: \"accordion-header\",\n          children: [jogosDaRodada[0].fase, \" \", isExpanded ? '▲' : '▼']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accordion-content\",\n          children: jogosNaoSubmetidos.length > 0 ? /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n            jogos: jogosNaoSubmetidos,\n            onAtualizarPlacar: atualizarPlacarNaEliminatoria\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n            jogos: jogosDaRodada // Mostra todos os jogos da rodada se já foram submetidos\n            ,\n            onAtualizarPlacar: () => {} // Desativa a submissão de placar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      const jogosRodada = iniciarFaseEliminatoria(classificados);\n      setJogosEliminatoria(jogosRodada);\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n\n      // Verifica se todos os jogos da última rodada foram submetidos\n      const ultimaRodada = Math.max(...updatedJogos.map(j => j.rodada));\n      if (updatedJogos.filter(j => j.rodada === ultimaRodada).every(j => j.submetido)) {\n        iniciarFinal(updatedJogos);\n        setFinalConfigurada(true);\n      }\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([{\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final'\n      }, {\n        dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n        dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1] ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const renderizarRodadaAtual = jogos => {\n    let rodadaAtual = Math.min(...jogos.filter(j => !j.submetido).map(j => j.rodada));\n    if (!isFinite(rodadaAtual)) {\n      rodadaAtual = Math.max(...jogos.map(j => j.rodada)); // Se todos os jogos foram submetidos, pega a última rodada\n    }\n    const jogosDaRodadaAtual = jogos.filter(j => j.rodada === rodadaAtual && !j.submetido);\n    if (jogosDaRodadaAtual.length === 0) {\n      if (rodadaAtual === Math.max(...jogos.map(j => j.rodada))) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Todos os jogos desta fase foram submetidos. Aguardando avan\\xE7o para a pr\\xF3xima etapa.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 16\n        }, this);\n      }\n      return null; // Se não há jogos para mostrar, não renderiza nada\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: jogosDaRodadaAtual[0].fase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n        jogos: jogosDaRodadaAtual,\n        onAtualizarPlacar: atualizarPlacarNaEliminatoria\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => setVisualizacao(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"acordeon\",\n            children: \"Acorde\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"rodadaAtual\",\n            children: \"Rodada Atual\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), visualizacao === 'acordeon' ? renderizarRodadaAcordeon(jogosEliminatoria) : renderizarRodadaAtual(jogosEliminatoria), finalConfigurada && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setFaseAtual('final'),\n          children: \"Avan\\xE7ar para a Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' & ')]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pfgBzaxrMNWzSpLjEnVzvY8L/mQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","iniciarFaseEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","expandedRodadas","setExpandedRodadas","visualizacao","setVisualizacao","toggleRodada","rodada","prevState","renderizarRodadaAcordeon","jogos","rodadas","Set","map","jogo","sort","a","b","rodadaAtual","find","r","some","j","submetido","Math","max","jogosDaRodada","filter","isExpanded","jogosNaoSubmetidos","className","children","onClick","fase","fileName","_jsxFileName","lineNumber","columnNumber","length","onAtualizarPlacar","atualizarPlacarNaEliminatoria","addDupla","dupla","d","includes","prevDuplas","alert","removeDupla","index","_","i","startTournament","duplasSorteadas","random","gruposCriados","forEach","grupo","id","encerrarFaseGrupos","todosOsJogos","flatMap","classificados","join","jogosRodada","placar","prevJogos","updatedJogos","ultimaRodada","every","iniciarFinal","finalistas","set1","set2","split","Number","dupla1","dupla2","console","error","atualizarPlacarNaFinal","encerrarFaseEliminatoria","finalizarTorneio","final","terceiroLugar","vencedorFinal","perdedorFinal","terceiro","quarto","lugar","add8Duplas","newDuplas","push","renderizarRodadaAtual","min","isFinite","jogosDaRodadaAtual","onAddDupla","onRemoveDupla","onUpdateGroups","onChange","e","target","value","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { iniciarFaseEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [expandedRodadas, setExpandedRodadas] = useState({}); // Estado para controlar quais rodadas estão expandidas\n  const [visualizacao, setVisualizacao] = useState('acordeon'); // Padrão para acordeão\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const toggleRodada = (rodada) => {\n    setExpandedRodadas(prevState => ({\n      ...prevState,\n      [rodada]: !prevState[rodada]\n    }));\n  };\n\n  const renderizarRodadaAcordeon = (jogos) => {\n    const rodadas = [...new Set(jogos.map(jogo => jogo.rodada))].sort((a, b) => a - b);\n\n    // Determina a rodada atual (a menor rodada com jogos não submetidos)\n    let rodadaAtual = rodadas.find(r => jogos.some(j => j.rodada === r && !j.submetido)) || Math.max(...rodadas);\n\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const isExpanded = expandedRodadas[rodada] || (rodada === rodadaAtual); // Expande automaticamente a rodada atual\n      const jogosNaoSubmetidos = jogosDaRodada.filter(j => !j.submetido);\n\n      return (\n        <div key={rodada} className=\"accordion-item\">\n          <button onClick={() => toggleRodada(rodada)} className=\"accordion-header\">\n            {jogosDaRodada[0].fase} {isExpanded ? '▲' : '▼'}\n          </button>\n          {isExpanded && (\n            <div className=\"accordion-content\">\n              {jogosNaoSubmetidos.length > 0 ? (\n                <FaseEliminatoria\n                  jogos={jogosNaoSubmetidos}\n                  onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n                />\n              ) : (\n                <FaseEliminatoria\n                  jogos={jogosDaRodada} // Mostra todos os jogos da rodada se já foram submetidos\n                  onAtualizarPlacar={() => { }} // Desativa a submissão de placar\n                />\n              )}\n            </div>\n          )}\n        </div>\n      );\n    });\n  };\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n  \n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      const jogosRodada = iniciarFaseEliminatoria(classificados);\n      setJogosEliminatoria(jogosRodada);\n      setFaseAtual('eliminatória');\n    }\n  };\n  \n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n\n      // Verifica se todos os jogos da última rodada foram submetidos\n      const ultimaRodada = Math.max(...updatedJogos.map(j => j.rodada));\n      if (updatedJogos.filter(j => j.rodada === ultimaRodada).every(j => j.submetido)) {\n        iniciarFinal(updatedJogos);\n        setFinalConfigurada(true);\n      }\n\n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([\n        {\n          dupla1: finalistas[0],\n          dupla2: finalistas[1],\n          placar: '',\n          submetido: false,\n          fase: 'Final'\n        },\n        {\n          dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n          dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n          placar: '',\n          submetido: false,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1]\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1]\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const renderizarRodadaAtual = (jogos) => {\n    let rodadaAtual = Math.min(...jogos.filter(j => !j.submetido).map(j => j.rodada));\n    if (!isFinite(rodadaAtual)) {\n      rodadaAtual = Math.max(...jogos.map(j => j.rodada)); // Se todos os jogos foram submetidos, pega a última rodada\n    }\n    const jogosDaRodadaAtual = jogos.filter(j => j.rodada === rodadaAtual && !j.submetido);\n\n    if (jogosDaRodadaAtual.length === 0) {\n      if (rodadaAtual === Math.max(...jogos.map(j => j.rodada))) {\n        return <p>Todos os jogos desta fase foram submetidos. Aguardando avanço para a próxima etapa.</p>;\n      }\n      return null; // Se não há jogos para mostrar, não renderiza nada\n    }\n\n    return (\n      <div>\n        <h3>{jogosDaRodadaAtual[0].fase}</h3>\n        <FaseEliminatoria\n          jogos={jogosDaRodadaAtual}\n          onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button> {/* Botão temporário */}\n          </>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <select onChange={(e) => setVisualizacao(e.target.value)}>\n              <option value=\"acordeon\">Acordeão</option>\n              <option value=\"rodadaAtual\">Rodada Atual</option>\n            </select>\n            {visualizacao === 'acordeon'\n              ? renderizarRodadaAcordeon(jogosEliminatoria)\n              : renderizarRodadaAtual(jogosEliminatoria)}\n            {finalConfigurada && (\n              <button onClick={() => setFaseAtual('final')}>Avançar para a Final</button>\n            )}\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado &&\n              <p>A disputa pelo 3º lugar está configurada!</p>\n            }\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <ul>\n              {ranking.map((posição, index) => (\n                <li key={index}>\n                  {posição.lugar}º Lugar: {posição.dupla.join(' & ')}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}