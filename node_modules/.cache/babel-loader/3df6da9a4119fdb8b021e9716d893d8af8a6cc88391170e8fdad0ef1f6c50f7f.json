{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport { dividirGrupos, classificarDuplasPorDesempate, criarJogosParaGrupo } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let duplasRestantes = classificados.length;\n    let rodadas = Math.ceil(Math.log2(duplasRestantes));\n    let currentIndex = 0;\n    for (let r = 1; r <= rodadas; r++) {\n      let jogosDaRodada = [];\n      for (let i = 0; i < duplasRestantes; i += 2) {\n        let jogo = {\n          dupla1: classificados[i] || ['TBD', ''],\n          dupla2: classificados[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: currentIndex++,\n          rodada: r,\n          fase: r === rodadas ? 'Final' : r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`\n        };\n        jogosDaRodada.push(jogo);\n      }\n      jogos.push(...jogosDaRodada);\n      duplasRestantes = Math.ceil(duplasRestantes / 2);\n    }\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n    if (jogosUltimaRodada.length === 1) {\n      // Final\n      let final = jogosUltimaRodada[0];\n      let vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      let perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n\n      // Encontrar os perdedores das semifinais para a disputa do 3º lugar\n      let semiFinais = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada - 1);\n      let perdedoresSemifinal = semiFinais.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n\n      // Adicionar jogo para determinar o 3º lugar\n      setJogosEliminatoria(prevJogos => [...prevJogos, {\n        dupla1: perdedoresSemifinal[0],\n        dupla2: perdedoresSemifinal[1],\n        placar: '',\n        submetido: false,\n        jogoIndex: prevJogos.length,\n        rodada: ultimaRodada + 1,\n        fase: 'Disputa 3º Lugar'\n      }]);\n    } else {\n      // Identificar vencedores da última rodada\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      // Adicionar nova rodada\n      let novaRodada = ultimaRodada + 1;\n      let novosJogos = [];\n      for (let i = 0; i < vencedores.length; i += 2) {\n        novosJogos.push({\n          dupla1: vencedores[i],\n          dupla2: vencedores[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length + i / 2,\n          rodada: novaRodada,\n          fase: novaRodada === ultimaRodada + 1 ? 'Final' : `Rodada ${novaRodada}`\n        });\n      }\n      setJogosEliminatoria(prevJogos => [...prevJogos, ...novosJogos]);\n    }\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const atualizarEstatisticas = jogoInfo => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo => jogo.jogoIndex === jogoInfo.jogoIndex ? {\n        ...jogo,\n        placar: jogoInfo.placar,\n        submetido: true\n      } : jogo);\n      // Incluir rodada no histórico\n      setHistoricoJogos(prevHistorico => [...prevHistorico, {\n        ...jogoInfo,\n        placar: jogoInfo.placar,\n        rodada: jogoInfo.rodada\n      }]);\n      return updatedJogos;\n    });\n  };\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 1\",\n            ref: jogador1Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 2\",\n            ref: jogador2Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              var _jogador1Ref$current, _jogador2Ref$current;\n              const jogador1 = (_jogador1Ref$current = jogador1Ref.current) === null || _jogador1Ref$current === void 0 ? void 0 : _jogador1Ref$current.value;\n              const jogador2 = (_jogador2Ref$current = jogador2Ref.current) === null || _jogador2Ref$current === void 0 ? void 0 : _jogador2Ref$current.value;\n              if (jogador1 && jogador2) {\n                addDupla([jogador1, jogador2]);\n                if (jogador1Ref.current) jogador1Ref.current.value = '';\n                if (jogador2Ref.current) jogador2Ref.current.value = '';\n              } else {\n                alert('Por favor, insira os nomes dos dois jogadores.');\n              }\n            },\n            children: \"Adicionar Dupla\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: startTournament,\n          disabled: duplas.length < 3,\n          children: \"Come\\xE7ar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          fase: \"Fase Eliminat\\xF3ria\",\n          jogos: jogosEliminatoria,\n          onAtualizarEstatisticas: atualizarEstatisticas\n          // onUpdateJogos={setJogosEliminatoria}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), historicoJogos.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hist\\xF3rico de Jogos:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: historicoJogos.map((jogo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Rodada \", jogo.rodada || 'Desconhecida', \":\", jogo.dupla1 && jogo.dupla1.join ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida', \"vs\", jogo.dupla2 && jogo.dupla2.join ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida', \"- Placar: \", jogo.placar || 'Não Submetido']\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseEliminatoria,\n          disabled: jogosEliminatoria.some(jogo => !jogo.submetido),\n          children: \"Finalizar Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"O torneio foi finalizado. Parab\\xE9ns aos vencedores!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Ranking Final:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' e ')]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1JaNUZZTb5IbInXI2c/QP7LdCRA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","Input","dividirGrupos","classificarDuplasPorDesempate","criarJogosParaGrupo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","ranking","setRanking","historicoJogos","setHistoricoJogos","console","log","jogador1Ref","jogador2Ref","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","forEach","grupo","jogos","id","iniciarFaseEliminatoria","classificados","duplasRestantes","rodadas","ceil","log2","currentIndex","r","jogosDaRodada","jogo","dupla1","dupla2","placar","submetido","jogoIndex","rodada","fase","push","encerrarFaseEliminatoria","ultimaRodada","max","map","jogosUltimaRodada","final","vencedorFinal","split","Number","perdedorFinal","semiFinais","perdedoresSemifinal","set1","set2","prevJogos","vencedores","novaRodada","novosJogos","encerrarFaseGrupos","classificadosGrupo","slice","join","atualizarEstatisticas","jogoInfo","updatedJogos","prevHistorico","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","required","onRemoveDupla","ref","onClick","_jogador1Ref$current","_jogador2Ref$current","jogador1","current","value","jogador2","disabled","style","display","onAtualizarEstatisticas","onUpdateGroups","posição","lugar","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport {\n  dividirGrupos,\n  classificarDuplasPorDesempate,\n  criarJogosParaGrupo\n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let duplasRestantes = classificados.length;\n    let rodadas = Math.ceil(Math.log2(duplasRestantes));\n\n    let currentIndex = 0;\n\n    for (let r = 1; r <= rodadas; r++) {\n      let jogosDaRodada = [];\n      for (let i = 0; i < duplasRestantes; i += 2) {\n        let jogo = {\n          dupla1: classificados[i] || ['TBD', ''],\n          dupla2: classificados[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: currentIndex++,\n          rodada: r,\n          fase: r === rodadas ? 'Final' : (r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`)\n        };\n        jogosDaRodada.push(jogo);\n      }\n      jogos.push(...jogosDaRodada);\n      duplasRestantes = Math.ceil(duplasRestantes / 2);\n    }\n\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n  \n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n  \n    if (jogosUltimaRodada.length === 1) { // Final\n      let final = jogosUltimaRodada[0];\n      let vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      let perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n  \n      // Encontrar os perdedores das semifinais para a disputa do 3º lugar\n      let semiFinais = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada - 1);\n      let perdedoresSemifinal = semiFinais.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n  \n      // Adicionar jogo para determinar o 3º lugar\n      setJogosEliminatoria(prevJogos => [\n        ...prevJogos,\n        {\n          dupla1: perdedoresSemifinal[0],\n          dupla2: perdedoresSemifinal[1],\n          placar: '',\n          submetido: false,\n          jogoIndex: prevJogos.length,\n          rodada: ultimaRodada + 1,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n    } else {\n      // Identificar vencedores da última rodada\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n  \n      // Adicionar nova rodada\n      let novaRodada = ultimaRodada + 1;\n      let novosJogos = [];\n      for (let i = 0; i < vencedores.length; i += 2) {\n        novosJogos.push({\n          dupla1: vencedores[i],\n          dupla2: vencedores[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length + (i / 2),\n          rodada: novaRodada,\n          fase: novaRodada === ultimaRodada + 1 ? 'Final' : `Rodada ${novaRodada}`\n        });\n      }\n  \n      setJogosEliminatoria(prevJogos => [...prevJogos, ...novosJogos]);\n    }\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  const atualizarEstatisticas = (jogoInfo) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo =>\n        jogo.jogoIndex === jogoInfo.jogoIndex ? { ...jogo, placar: jogoInfo.placar, submetido: true } : jogo\n      );\n      // Incluir rodada no histórico\n      setHistoricoJogos(prevHistorico => [...prevHistorico, { ...jogoInfo, placar: jogoInfo.placar, rodada: jogoInfo.rodada }]);\n      return updatedJogos;\n    });\n  };\n\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onRemoveDupla={removeDupla} />\n            <div>\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 1\"\n                ref={jogador1Ref}\n              />\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 2\"\n                ref={jogador2Ref}\n              />\n              <Button\n                onClick={() => {\n                  const jogador1 = jogador1Ref.current?.value;\n                  const jogador2 = jogador2Ref.current?.value;\n                  if (jogador1 && jogador2) {\n                    addDupla([jogador1, jogador2]);\n                    if (jogador1Ref.current) jogador1Ref.current.value = '';\n                    if (jogador2Ref.current) jogador2Ref.current.value = '';\n                  } else {\n                    alert('Por favor, insira os nomes dos dois jogadores.');\n                  }\n                }}\n              >\n                Adicionar Dupla\n              </Button>\n              <Button onClick={add8Duplas}>\n                Adicionar 8 Duplas\n              </Button>\n            </div>\n            <Button onClick={startTournament} disabled={duplas.length < 3}>\n              Começar Torneio\n            </Button>\n          </>\n        )}\n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">{faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'}</h3>\n          {faseAtual === 'grupos' &&\n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onUpdateGroups={setGrupos} />\n          }\n          {faseAtual === 'eliminatória' &&\n            <FaseEliminatoria\n              fase=\"Fase Eliminatória\"\n              jogos={jogosEliminatoria}\n              onAtualizarEstatisticas={atualizarEstatisticas}\n            // onUpdateJogos={setJogosEliminatoria}\n            />\n          }\n          {historicoJogos.length > 0 && (\n            <section className=\"section\">\n              <h3>Histórico de Jogos:</h3>\n              <ul>\n                {historicoJogos.map((jogo, index) => (\n                  <li key={index}>\n                    Rodada {jogo.rodada || 'Desconhecida'}:\n                    {jogo.dupla1 && jogo.dupla1.join ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida'}\n                    vs\n                    {jogo.dupla2 && jogo.dupla2.join ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida'}\n                    - Placar: {jogo.placar || 'Não Submetido'}\n                  </li>\n                ))}\n              </ul>\n            </section>\n          )}\n          {faseAtual === 'grupos' &&\n            <Button onClick={encerrarFaseGrupos}>\n              Encerrar Fase de Grupos\n            </Button>\n          }\n          {faseAtual === 'eliminatória' &&\n            <Button\n              onClick={encerrarFaseEliminatoria}\n              disabled={jogosEliminatoria.some(jogo => !jogo.submetido)}\n            >\n              Finalizar Fase Eliminatória\n            </Button>\n          }\n          {faseAtual === 'finalizado' && (\n            <>\n              <p>O torneio foi finalizado. Parabéns aos vencedores!</p>\n              <h3>Ranking Final:</h3>\n              <ul>\n                {ranking.map((posição, index) => (\n                  <li key={index}>{posição.lugar}º Lugar: {posição.dupla.join(' e ')}</li>\n                ))}\n              </ul>\n            </>\n          )}\n        </section>\n      </main>\n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}