{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport gameDay from './assets/img/game-day.svg'; // Importa a imagem SVG\nimport btConnectLogo from './assets/img/btConnect.png'; // Importa btConnect\nimport tournamentsIcon from './assets/icons/tournaments.svg'; // Ícone começar torneio\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState(() => {\n    const savedDuplas = localStorage.getItem('torneioDuplas');\n    return savedDuplas ? JSON.parse(savedDuplas) : [];\n  });\n  const [faseAtual, setFaseAtual] = useState(() => localStorage.getItem('torneioFaseAtual') || 'duplas');\n  const [grupos, setGrupos] = useState(() => {\n    const savedGrupos = localStorage.getItem('torneioGrupos');\n    return savedGrupos ? JSON.parse(savedGrupos) : [];\n  });\n  const [jogosEliminatoria, setJogosEliminatoria] = useState(() => {\n    const savedJogos = localStorage.getItem('torneioJogosEliminatoria');\n    return savedJogos ? JSON.parse(savedJogos) : [];\n  });\n  const [finalConfigurada, setFinalConfigurada] = useState(() => localStorage.getItem('torneioFinalConfigurada') === 'true');\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(() => localStorage.getItem('torneioTerceiroLugarConfigurado') === 'true');\n  const [ranking, setRanking] = useState(() => {\n    const savedRanking = localStorage.getItem('torneioRanking');\n    return savedRanking ? JSON.parse(savedRanking) : [];\n  });\n  const [duplasBye, setDuplasBye] = useState(() => {\n    const savedDuplasBye = localStorage.getItem('torneioDuplasBye');\n    return savedDuplasBye ? JSON.parse(savedDuplasBye) : [];\n  });\n  const [historicoDuplas, setHistoricoDuplas] = useState(() => {\n    const savedHistorico = localStorage.getItem('torneioHistoricoDuplas');\n    return savedHistorico ? JSON.parse(savedHistorico) : {};\n  });\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(() => localStorage.getItem('torneioDataCriacao') || null);\n  const [nomeTorneio, setNomeTorneio] = useState(() => localStorage.getItem('torneioNome') || '');\n  const [dataInicio, setDataInicio] = useState(() => localStorage.getItem('torneioDataInicio') || '');\n  const [horaInicio, setHoraInicio] = useState(() => localStorage.getItem('torneioHoraInicio') || '');\n\n  // Salvar estado no localStorage sempre que houver alterações\n  useEffect(() => {\n    localStorage.setItem('torneioDuplas', JSON.stringify(duplas));\n    localStorage.setItem('torneioFaseAtual', faseAtual);\n    localStorage.setItem('torneioGrupos', JSON.stringify(grupos));\n    localStorage.setItem('torneioJogosEliminatoria', JSON.stringify(jogosEliminatoria));\n    localStorage.setItem('torneioFinalConfigurada', finalConfigurada);\n    localStorage.setItem('torneioTerceiroLugarConfigurado', terceiroLugarConfigurado);\n    localStorage.setItem('torneioRanking', JSON.stringify(ranking));\n    localStorage.setItem('torneioDuplasBye', JSON.stringify(duplasBye));\n    localStorage.setItem('torneioHistoricoDuplas', JSON.stringify(historicoDuplas));\n    localStorage.setItem('torneioDataCriacao', dataCriacaoTorneio || '');\n    localStorage.setItem('torneioNome', nomeTorneio);\n    localStorage.setItem('torneioDataInicio', dataInicio);\n    localStorage.setItem('torneioHoraInicio', horaInicio);\n  }, [duplas, faseAtual, grupos, jogosEliminatoria, finalConfigurada, terceiroLugarConfigurado, ranking, duplasBye, historicoDuplas, dataCriacaoTorneio, nomeTorneio, dataInicio, horaInicio]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto);\n    setDataCriacaoTorneio(dataTorneio.toISOString()); // Armazenar como string ISO\n\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n\n    // Inicializar historicoDuplas com todas as duplas\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = {\n        dupla,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      return acc;\n    }, {});\n    setHistoricoDuplas(historicoInicial);\n    console.log('Histórico Inicial:', historicoInicial);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    setHistoricoDuplas(prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      todosOsJogos.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      console.log('Histórico após Fase de Grupos:', novoHistorico);\n      console.log('Total de jogos registrados na fase de grupos:', todosOsJogos.length);\n      return novoHistorico;\n    });\n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1]));\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      if (duplas.length <= 11) {\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n        const jogosQuartas = [{\n          dupla1: [...duplasQuartas[0]],\n          dupla2: [...duplasQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }, {\n          dupla1: [...duplasQuartas[2]],\n          dupla2: [...duplasQuartas[3]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }];\n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n        setJogosEliminatoria(jogosOitavas);\n        setDuplasBye([]);\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Eliminatória (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    setJogosEliminatoria(prev => [...prev, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Final (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n      return updatedJogos;\n    });\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n      const semifinalMatches = [{\n        dupla1: [...duplasBye[0]],\n        dupla2: [...vencedoresQuartas[0]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: [...duplasBye[1]],\n        dupla2: [...vencedoresQuartas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n            }).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 524,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const incrementoMinutos = idx * 30;\n            const dataHora = formatarDataHora(dataCriacaoTorneio, incrementoMinutos);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 576,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 577,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 579,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 589,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 590,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 592,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 588,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [...grupos.flatMap(grupo => grupo.jogos), ...jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')].filter(jogo => jogo.submetido);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      var _ranking$find;\n      const aproveitamento = dados.jogos > 0 ? (dados.jogosVencidos / dados.jogos * 100).toFixed(2) : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ((_ranking$find = ranking.find(r => r.dupla.join('') === dados.dupla.join(''))) === null || _ranking$find === void 0 ? void 0 : _ranking$find.lugar) || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => {\n      return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n    }, estatisticasDuplas[0] || {\n      dupla: 'Nenhuma',\n      vitorias: 0,\n      jogos: 0,\n      saldoGames: 0\n    });\n    console.log('Estatísticas por Dupla:', estatisticasDuplas);\n    console.log('Melhor Campanha Calculada:', melhorCampanha);\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: btConnectLogo,\n        alt: \"btConnect Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 678,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: nomeTorneio,\n              onChange: e => setNomeTorneio(e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 677,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: dataInicio,\n              onChange: e => setDataInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: horaInicio,\n              onChange: e => setHoraInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: tournamentsIcon,\n                alt: \"Tournament Icon\",\n                className: \"button-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 709,\n                columnNumber: 19\n              }, this), \"Iniciar Torneio\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add27Duplas,\n              children: \"Adicionar 27 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 15\n          }, this), grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado, jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 767,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"DUPLAS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 768,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ranking.map((posição, index) => {\n              let medalha = '';\n              let color = '#000';\n              if (posição.lugar === 1) {\n                medalha = '🥇';\n                color = 'gold';\n              } else if (posição.lugar === 2) {\n                medalha = '🥈';\n                color = 'silver';\n              } else if (posição.lugar === 3) {\n                medalha = '🥉';\n                color = 'brown';\n              }\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color\n                  },\n                  children: [medalha, \" \", posição.lugar, \"\\xBA Colocado\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 787,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: posição.dupla.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 788,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 786,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relatorio-estatisticas\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Estat\\xEDsticas Gerais do Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 796,\n            columnNumber: 15\n          }, this), (() => {\n            const {\n              totalPartidas,\n              totalGames,\n              estatisticasDuplas,\n              melhorCampanha\n            } = gerarRelatorioEstatisticas();\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Partidas Disputadas:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 801,\n                  columnNumber: 24\n                }, this), \" \", totalPartidas]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 801,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Games Disputados:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 802,\n                  columnNumber: 24\n                }, this), \" \", totalGames]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Melhor Campanha:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 24\n                }, this), \" \", melhorCampanha.dupla, \" (Saldo de Games: \", melhorCampanha.saldoGames, \", \", melhorCampanha.vitorias, \" vit\\xF3rias em \", melhorCampanha.jogos, \" jogos)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 803,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Estat\\xEDsticas por Dupla\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 804,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"POSI\\xC7\\xC3O\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 808,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DUPLA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 809,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"PARTIDAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 810,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"VIT\\xD3RIAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 811,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"GAMES (V/P)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 812,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"SALDO GAMES\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 813,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"APROVEITAMENTO\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 814,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 807,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 806,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: estatisticasDuplas.map((dupla, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 820,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.dupla\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 821,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.jogos\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 822,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.vitorias\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 823,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.gamesVencidos, \"/\", dupla.gamesPerdidos]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 824,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.saldoGames\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 825,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.aproveitamento, \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 826,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 819,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 817,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 805,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true);\n          })(), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Torneio Finalizado em \", new Date().toLocaleString('pt-BR'), \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 834,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 669,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rkao+FReGCe+gImUiQom6Wfyv84=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","gameDay","btConnectLogo","tournamentsIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","savedDuplas","localStorage","getItem","JSON","parse","faseAtual","setFaseAtual","grupos","setGrupos","savedGrupos","jogosEliminatoria","setJogosEliminatoria","savedJogos","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","savedRanking","duplasBye","setDuplasBye","savedDuplasBye","historicoDuplas","setHistoricoDuplas","savedHistorico","dataCriacaoTorneio","setDataCriacaoTorneio","nomeTorneio","setNomeTorneio","dataInicio","setDataInicio","horaInicio","setHoraInicio","setItem","stringify","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","ano","mes","dia","split","map","Number","hora","minuto","dataTorneio","Date","toISOString","duplasSorteadas","sort","Math","random","gruposCriados","gruposComJogos","grupo","jogos","id","historicoInicial","reduce","acc","join","pontos","jogosVencidos","gamesVencidos","gamesPerdidos","console","log","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","prev","novoHistorico","forEach","g1","g2","placar","chave1","dupla1","chave2","dupla2","classificados","rankingGrupo1","rankingGrupo2","semifinalMatches","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","Array","isArray","error","dupla1Str","dupla2Str","rankingGeral","duplasByeLocal","duplasQuartas","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","prevJogos","j","updatedJogos","iniciarFinal","semifinalGames","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","updated","novaRodada","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","String","getDate","padStart","getMonth","getHours","className","children","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","gerarRelatorioEstatisticas","totalPartidas","totalGames","estatisticasDuplas","Object","values","dados","_ranking$find","aproveitamento","toFixed","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","add8Duplas","newDuplas","add27Duplas","src","alt","type","value","onChange","e","target","toUpperCase","placeholder","onClick","onAddDupla","onRemoveDupla","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","medalha","color","style","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport gameDay from './assets/img/game-day.svg'; // Importa a imagem SVG\nimport btConnectLogo from './assets/img/btConnect.png'; // Importa btConnect\nimport tournamentsIcon from './assets/icons/tournaments.svg'; // Ícone começar torneio\n\nfunction App() {\n  const [duplas, setDuplas] = useState(() => {\n    const savedDuplas = localStorage.getItem('torneioDuplas');\n    return savedDuplas ? JSON.parse(savedDuplas) : [];\n  });\n  const [faseAtual, setFaseAtual] = useState(() => localStorage.getItem('torneioFaseAtual') || 'duplas');\n  const [grupos, setGrupos] = useState(() => {\n    const savedGrupos = localStorage.getItem('torneioGrupos');\n    return savedGrupos ? JSON.parse(savedGrupos) : [];\n  });\n  const [jogosEliminatoria, setJogosEliminatoria] = useState(() => {\n    const savedJogos = localStorage.getItem('torneioJogosEliminatoria');\n    return savedJogos ? JSON.parse(savedJogos) : [];\n  });\n  const [finalConfigurada, setFinalConfigurada] = useState(() => localStorage.getItem('torneioFinalConfigurada') === 'true');\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(() => localStorage.getItem('torneioTerceiroLugarConfigurado') === 'true');\n  const [ranking, setRanking] = useState(() => {\n    const savedRanking = localStorage.getItem('torneioRanking');\n    return savedRanking ? JSON.parse(savedRanking) : [];\n  });\n  const [duplasBye, setDuplasBye] = useState(() => {\n    const savedDuplasBye = localStorage.getItem('torneioDuplasBye');\n    return savedDuplasBye ? JSON.parse(savedDuplasBye) : [];\n  });\n  const [historicoDuplas, setHistoricoDuplas] = useState(() => {\n    const savedHistorico = localStorage.getItem('torneioHistoricoDuplas');\n    return savedHistorico ? JSON.parse(savedHistorico) : {};\n  });\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(() => localStorage.getItem('torneioDataCriacao') || null);\n  const [nomeTorneio, setNomeTorneio] = useState(() => localStorage.getItem('torneioNome') || '');\n  const [dataInicio, setDataInicio] = useState(() => localStorage.getItem('torneioDataInicio') || '');\n  const [horaInicio, setHoraInicio] = useState(() => localStorage.getItem('torneioHoraInicio') || '');\n\n  // Salvar estado no localStorage sempre que houver alterações\n  useEffect(() => {\n    localStorage.setItem('torneioDuplas', JSON.stringify(duplas));\n    localStorage.setItem('torneioFaseAtual', faseAtual);\n    localStorage.setItem('torneioGrupos', JSON.stringify(grupos));\n    localStorage.setItem('torneioJogosEliminatoria', JSON.stringify(jogosEliminatoria));\n    localStorage.setItem('torneioFinalConfigurada', finalConfigurada);\n    localStorage.setItem('torneioTerceiroLugarConfigurado', terceiroLugarConfigurado);\n    localStorage.setItem('torneioRanking', JSON.stringify(ranking));\n    localStorage.setItem('torneioDuplasBye', JSON.stringify(duplasBye));\n    localStorage.setItem('torneioHistoricoDuplas', JSON.stringify(historicoDuplas));\n    localStorage.setItem('torneioDataCriacao', dataCriacaoTorneio || '');\n    localStorage.setItem('torneioNome', nomeTorneio);\n    localStorage.setItem('torneioDataInicio', dataInicio);\n    localStorage.setItem('torneioHoraInicio', horaInicio);\n  }, [\n    duplas,\n    faseAtual,\n    grupos,\n    jogosEliminatoria,\n    finalConfigurada,\n    terceiroLugarConfigurado,\n    ranking,\n    duplasBye,\n    historicoDuplas,\n    dataCriacaoTorneio,\n    nomeTorneio,\n    dataInicio,\n    horaInicio\n  ]);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto);\n    setDataCriacaoTorneio(dataTorneio.toISOString()); // Armazenar como string ISO\n  \n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n  \n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n  \n    // Inicializar historicoDuplas com todas as duplas\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n    setHistoricoDuplas(historicoInicial);\n    console.log('Histórico Inicial:', historicoInicial);\n  \n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    setHistoricoDuplas(prev => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      console.log('Histórico após Fase de Grupos:', novoHistorico);\n      console.log('Total de jogos registrados na fase de grupos:', todosOsJogos.length);\n      return novoHistorico;\n    });\n  \n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n  \n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) =>\n        index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1])\n      );\n  \n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n  \n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n  \n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n  \n      if (duplas.length <= 11) {\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n  \n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n  \n        const jogosQuartas = [\n          { dupla1: [...duplasQuartas[0]], dupla2: [...duplasQuartas[1]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 },\n          { dupla1: [...duplasQuartas[2]], dupla2: [...duplasQuartas[3]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 }\n        ];\n  \n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n  \n        setJogosEliminatoria(jogosOitavas);\n        setDuplasBye([]);\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos =>\n        prevJogos.map(j =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        )\n      );\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Eliminatória (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n  \n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n\n    setJogosEliminatoria(prev => [\n      ...prev,\n      {\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1\n      },\n      {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1\n      }\n    ]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Final (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n  \n      return updatedJogos;\n    });\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n\n      const semifinalMatches = [\n        { dupla1: [...duplasBye[0]], dupla2: [...vencedoresQuartas[0]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n        { dupla1: [...duplasBye[1]], dupla2: [...vencedoresQuartas[1]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n      ];\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n    setFaseAtual('finalizado');\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(j =>\n                j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar ? (g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate') : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(dataCriacaoTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor = jogo.placar && jogo.submetido\n                  ? (parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & '))\n                  : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [\n      ...grupos.flatMap(grupo => grupo.jogos),\n      ...jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')\n    ].filter(jogo => jogo.submetido);\n  \n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n  \n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      const aproveitamento = dados.jogos > 0 ? ((dados.jogosVencidos / dados.jogos) * 100).toFixed(2) : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ranking.find(r => r.dupla.join('') === dados.dupla.join(''))?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n  \n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => {\n      return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n    }, estatisticasDuplas[0] || { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 });\n  \n    console.log('Estatísticas por Dupla:', estatisticasDuplas);\n    console.log('Melhor Campanha Calculada:', melhorCampanha);\n  \n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n  \n\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={nomeTorneio}\n                  onChange={(e) => setNomeTorneio(e.target.value.toUpperCase())}\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={dataInicio}\n                  onChange={(e) => setDataInicio(e.target.value)}\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={horaInicio}\n                  onChange={(e) => setHoraInicio(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button className=\"iniciar-torneio\" onClick={startTournament}>\n                  <img src={tournamentsIcon} alt=\"Tournament Icon\" className=\"button-icon\" />\n                  Iniciar Torneio\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n                <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n              </div>\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {grupos.map(grupo => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado}\n            {jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLAS</th>\n                </tr>\n              </thead>\n              <tbody>\n                {ranking.map((posição, index) => {\n                  let medalha = '';\n                  let color = '#000';\n                  if (posição.lugar === 1) {\n                    medalha = '🥇';\n                    color = 'gold';\n                  } else if (posição.lugar === 2) {\n                    medalha = '🥈';\n                    color = 'silver';\n                  } else if (posição.lugar === 3) {\n                    medalha = '🥉';\n                    color = 'brown';\n                  }\n                  return (\n                    <tr key={index}>\n                      <td style={{ color }}>{medalha} {posição.lugar}º Colocado</td>\n                      <td>{posição.dupla.join(' & ')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n\n            <div className=\"relatorio-estatisticas\">\n              <h3>Estatísticas Gerais do Torneio</h3>\n              {(() => {\n                const { totalPartidas, totalGames, estatisticasDuplas, melhorCampanha } = gerarRelatorioEstatisticas();\n                return (\n                  <>\n                    <p><strong>Total de Partidas Disputadas:</strong> {totalPartidas}</p>\n                    <p><strong>Total de Games Disputados:</strong> {totalGames}</p>\n                    <p><strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (Saldo de Games: {melhorCampanha.saldoGames}, {melhorCampanha.vitorias} vitórias em {melhorCampanha.jogos} jogos)</p>\n                    <h4>Estatísticas por Dupla</h4>\n                    <table>\n                      <thead>\n                        <tr>\n                          <th>POSIÇÃO</th>\n                          <th>DUPLA</th>\n                          <th>PARTIDAS</th>\n                          <th>VITÓRIAS</th>\n                          <th>GAMES (V/P)</th>\n                          <th>SALDO GAMES</th>\n                          <th>APROVEITAMENTO</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {estatisticasDuplas.map((dupla, index) => (\n                          <tr key={index}>\n                            <td>{dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'}</td>\n                            <td>{dupla.dupla}</td>\n                            <td>{dupla.jogos}</td>\n                            <td>{dupla.vitorias}</td>\n                            <td>{dupla.gamesVencidos}/{dupla.gamesPerdidos}</td>\n                            <td>{dupla.saldoGames}</td>\n                            <td>{dupla.aproveitamento}%</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </>\n                );\n              })()}\n              <p>Torneio Finalizado em {new Date().toLocaleString('pt-BR')}!</p>\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}