{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport './App.css';\nimport { dividirGrupos, atualizarEstatisticas, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [resultados, setResultados] = useState({});\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado'); // Ou qualquer outro estado final\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  // Função para iniciar a fase eliminatória\n  const iniciarFaseEliminatoria = classificados => {\n    let jogosEliminatoria = [];\n    while (classificados.length > 1) {\n      let novosJogos = [];\n      for (let i = 0; i < classificados.length; i += 2) {\n        novosJogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['Bye', ''],\n          // Se for um número ímpar, adiciona 'Bye'\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length\n        });\n      }\n      jogosEliminatoria.push(...novosJogos);\n      classificados = novosJogos.map(jogo => jogo.dupla1); // Apenas dupla1 avança (ou dupla2 se houver 'Bye')\n    }\n    setJogosEliminatoria(jogosEliminatoria);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para adicionar 8 duplas automaticamente\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const atualizarEstatisticas = jogo => {\n    const {\n      dupla1,\n      dupla2,\n      placar\n    } = jogo;\n    const [set1, set2] = placar.split('-').map(Number);\n    const vencedor = set1 > set2 ? dupla1 : dupla2;\n    setResultados(prevResultados => {\n      var _prevResultados$dupla, _prevResultados$dupla2, _prevResultados$dupla3, _prevResultados$dupla4, _prevResultados$dupla5, _prevResultados$dupla6, _prevResultados$dupla7, _prevResultados$dupla8, _prevResultados$dupla9, _prevResultados$dupla10, _prevResultados$dupla11, _prevResultados$dupla12;\n      return {\n        ...prevResultados,\n        [dupla1.join(',')]: {\n          ...(prevResultados[dupla1.join(',')] || {\n            vitórias: 0,\n            derrotas: 0,\n            setsVencidos: 0,\n            setsPerdidos: 0\n          }),\n          vitórias: vencedor === dupla1 ? ((_prevResultados$dupla = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla === void 0 ? void 0 : _prevResultados$dupla.vitórias) + 1 || 1 : ((_prevResultados$dupla2 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla2 === void 0 ? void 0 : _prevResultados$dupla2.vitórias) || 0,\n          derrotas: vencedor === dupla2 ? ((_prevResultados$dupla3 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla3 === void 0 ? void 0 : _prevResultados$dupla3.derrotas) + 1 || 1 : ((_prevResultados$dupla4 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla4 === void 0 ? void 0 : _prevResultados$dupla4.derrotas) || 0,\n          setsVencidos: ((_prevResultados$dupla5 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla5 === void 0 ? void 0 : _prevResultados$dupla5.setsVencidos) + (vencedor === dupla1 ? set1 : set2) || (vencedor === dupla1 ? set1 : set2),\n          setsPerdidos: ((_prevResultados$dupla6 = prevResultados[dupla1.join(',')]) === null || _prevResultados$dupla6 === void 0 ? void 0 : _prevResultados$dupla6.setsPerdidos) + (vencedor === dupla1 ? set2 : set1) || (vencedor === dupla1 ? set2 : set1)\n        },\n        [dupla2.join(',')]: {\n          ...(prevResultados[dupla2.join(',')] || {\n            vitórias: 0,\n            derrotas: 0,\n            setsVencidos: 0,\n            setsPerdidos: 0\n          }),\n          vitórias: vencedor === dupla2 ? ((_prevResultados$dupla7 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla7 === void 0 ? void 0 : _prevResultados$dupla7.vitórias) + 1 || 1 : ((_prevResultados$dupla8 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla8 === void 0 ? void 0 : _prevResultados$dupla8.vitórias) || 0,\n          derrotas: vencedor === dupla1 ? ((_prevResultados$dupla9 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla9 === void 0 ? void 0 : _prevResultados$dupla9.derrotas) + 1 || 1 : ((_prevResultados$dupla10 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla10 === void 0 ? void 0 : _prevResultados$dupla10.derrotas) || 0,\n          setsVencidos: ((_prevResultados$dupla11 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla11 === void 0 ? void 0 : _prevResultados$dupla11.setsVencidos) + (vencedor === dupla2 ? set1 : set2) || (vencedor === dupla2 ? set1 : set2),\n          setsPerdidos: ((_prevResultados$dupla12 = prevResultados[dupla2.join(',')]) === null || _prevResultados$dupla12 === void 0 ? void 0 : _prevResultados$dupla12.setsPerdidos) + (vencedor === dupla2 ? set2 : set1) || (vencedor === dupla2 ? set2 : set1)\n        }\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          style: {\n            textTransform: 'uppercase'\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Adicionar Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: startTournament,\n            disabled: duplas.length < 3,\n            children: \"Come\\xE7ar Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas (Teste)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onEncerrarFase: encerrarFaseGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          fase: \"Fase Eliminat\\xF3ria\",\n          jogos: jogosEliminatoria,\n          onAtualizarEstatisticas: atualizarEstatisticas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"5IuBVLN/qiVbYyoU6oVVNSInAlY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","dividirGrupos","atualizarEstatisticas","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","resultados","setResultados","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","encerrarFaseGrupos","grupo","jogos","jogo","submetido","classificados","forEach","classificadosGrupo","push","slice","join","iniciarFaseEliminatoria","novosJogos","dupla1","dupla2","placar","jogoIndex","map","add8Duplas","newDuplas","set1","set2","split","Number","vencedor","prevResultados","_prevResultados$dupla","_prevResultados$dupla2","_prevResultados$dupla3","_prevResultados$dupla4","_prevResultados$dupla5","_prevResultados$dupla6","_prevResultados$dupla7","_prevResultados$dupla8","_prevResultados$dupla9","_prevResultados$dupla10","_prevResultados$dupla11","_prevResultados$dupla12","vitórias","derrotas","setsVencidos","setsPerdidos","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","placeholder","style","textTransform","required","onAddDupla","onRemoveDupla","onClick","disabled","display","onAtualizarEstatisticas","onEncerrarFase","fase","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport './App.css';\nimport {\n  dividirGrupos,\n  atualizarEstatisticas,\n  classificarDuplasPorDesempate\n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [resultados, setResultados] = useState({});\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  // Função para encerrar a fase de grupos\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    let classificados = [];\n    grupos.forEach(grupo => {\n      let classificadosGrupo = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n      classificados.push(...classificadosGrupo.slice(0, 2)); // Assume-se 2 primeiros por grupo\n    });\n\n    if (duplas.length <= 5) {\n      // Apenas um campeão\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado'); // Ou qualquer outro estado final\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  // Função para iniciar a fase eliminatória\n  const iniciarFaseEliminatoria = (classificados) => {\n    let jogosEliminatoria = [];\n\n    while (classificados.length > 1) {\n      let novosJogos = [];\n      for (let i = 0; i < classificados.length; i += 2) {\n        novosJogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['Bye', ''], // Se for um número ímpar, adiciona 'Bye'\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length\n        });\n      }\n      jogosEliminatoria.push(...novosJogos);\n      classificados = novosJogos.map(jogo => jogo.dupla1); // Apenas dupla1 avança (ou dupla2 se houver 'Bye')\n    }\n\n    setJogosEliminatoria(jogosEliminatoria);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para adicionar 8 duplas automaticamente\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const atualizarEstatisticas = (jogo) => {\n    const { dupla1, dupla2, placar } = jogo;\n    const [set1, set2] = placar.split('-').map(Number);\n    const vencedor = set1 > set2 ? dupla1 : dupla2;\n  \n    setResultados(prevResultados => {\n        return {\n          ...prevResultados,\n          [dupla1.join(',')]: {\n            ...(prevResultados[dupla1.join(',')] || { vitórias: 0, derrotas: 0, setsVencidos: 0, setsPerdidos: 0 }),\n            vitórias: vencedor === dupla1 ? prevResultados[dupla1.join(',')]?.vitórias + 1 || 1 : prevResultados[dupla1.join(',')]?.vitórias || 0,\n            derrotas: vencedor === dupla2 ? prevResultados[dupla1.join(',')]?.derrotas + 1 || 1 : prevResultados[dupla1.join(',')]?.derrotas || 0,\n            setsVencidos: prevResultados[dupla1.join(',')]?.setsVencidos + (vencedor === dupla1 ? set1 : set2) || (vencedor === dupla1 ? set1 : set2),\n            setsPerdidos: prevResultados[dupla1.join(',')]?.setsPerdidos + (vencedor === dupla1 ? set2 : set1) || (vencedor === dupla1 ? set2 : set1)\n          },\n          [dupla2.join(',')]: {\n            ...(prevResultados[dupla2.join(',')] || { vitórias: 0, derrotas: 0, setsVencidos: 0, setsPerdidos: 0 }),\n            vitórias: vencedor === dupla2 ? prevResultados[dupla2.join(',')]?.vitórias + 1 || 1 : prevResultados[dupla2.join(',')]?.vitórias || 0,\n            derrotas: vencedor === dupla1 ? prevResultados[dupla2.join(',')]?.derrotas + 1 || 1 : prevResultados[dupla2.join(',')]?.derrotas || 0,\n            setsVencidos: prevResultados[dupla2.join(',')]?.setsVencidos + (vencedor === dupla2 ? set1 : set2) || (vencedor === dupla2 ? set1 : set2),\n            setsPerdidos: prevResultados[dupla2.join(',')]?.setsPerdidos + (vencedor === dupla2 ? set2 : set1) || (vencedor === dupla2 ? set2 : set1)\n          }\n        };\n      });\n    };\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>BT Connect</h1>\n        </header>\n\n        <main className=\"container\">\n          <section className=\"section\">\n            <h2>Informações do Torneio</h2>\n            <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n            <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" style={{ textTransform: 'uppercase' }} required />\n            <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n            <input type=\"date\" id=\"dataTorneio\" required />\n          </section>\n\n          <section className=\"section\">\n            <h2>Adicionar Duplas</h2>\n            {faseAtual === 'duplas' &&\n              <>\n                <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n                <Button\n                  onClick={startTournament}\n                  disabled={duplas.length < 3}>\n                  Começar Torneio\n                </Button>\n                <Button onClick={add8Duplas}>Adicionar 8 Duplas (Teste)</Button>\n              </>\n            }\n          </section>\n\n          <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n            <h2>Organograma do Torneio</h2>\n            <h3 id=\"faseAtual\">{faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'}</h3>\n            {faseAtual === 'grupos' &&\n              <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onEncerrarFase={encerrarFaseGrupos} />\n            }\n            {faseAtual === 'eliminatória' &&\n              <FaseEliminatoria fase=\"Fase Eliminatória\" jogos={jogosEliminatoria} onAtualizarEstatisticas={atualizarEstatisticas} />\n            }\n            {faseAtual === 'grupos' &&\n              <Button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</Button>\n            }\n          </section>\n        </main>\n\n        <footer>\n          <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n        </footer>\n      </div>\n    );\n  }\n\n  export default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}