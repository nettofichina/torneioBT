{"ast":null,"code":"// src/utils/torneioUtils.js\nexport const classificarDuplas=grupos=>{let classificados=[];grupos.forEach(grupo=>{// Ordena duplas do grupo com base nos critérios de desempate\nconst duplasClassificadas=classificarDuplasPorDesempate(grupo.duplas,grupo.jogos);// Adiciona os 2 melhores de cada grupo à lista de classificados\nclassificados.push(duplasClassificadas[0],duplasClassificadas[1]);});console.log(\"Duplas classificadas para a fase eliminatória:\",classificados);return classificados;};export const criarJogosParaGrupo=(duplas,grupoId)=>{const jogos=[];for(let i=0;i<duplas.length;i++){for(let j=i+1;j<duplas.length;j++){jogos.push({dupla1:duplas[i],dupla2:duplas[j],placar:'',submetido:false,grupoId});}}return jogos;};export const dividirGrupos=duplas=>{let numGrupos;// Forçar 2 grupos para 10 duplas\nif(duplas.length===10){numGrupos=2;}else if(duplas.length<=5){numGrupos=1;}else if(duplas.length<=8){numGrupos=2;}else if(duplas.length<=11){numGrupos=3;}else if(duplas.length<=14){numGrupos=4;}else if(duplas.length<=17){numGrupos=5;}else if(duplas.length<=20){numGrupos=6;}else{numGrupos=Math.ceil(duplas.length/3);// Para 21 ou mais\n}const grupos=Array(numGrupos).fill().map((_,i)=>({id:i,duplas:duplas.slice(i*Math.ceil(duplas.length/numGrupos),(i+1)*Math.ceil(duplas.length/numGrupos))}));return grupos.filter(grupo=>grupo.duplas.length>0);};export const classificarDuplasPorDesempate=(duplas,jogos)=>{const resultados=duplas.reduce((acc,dupla)=>{if(!dupla||!Array.isArray(dupla)||dupla.length!==2){console.error('Dupla inválida:',dupla);return acc;}acc[dupla.join('')]={dupla,pontos:0,saldoGames:0};return acc;},{});jogos.forEach(jogo=>{if(jogo.placar&&jogo.dupla1&&jogo.dupla2&&Array.isArray(jogo.dupla1)&&Array.isArray(jogo.dupla2)){const[games1,games2]=jogo.placar.split('-').map(Number);const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(resultados[chave1]&&resultados[chave2]){if(games1>games2){resultados[chave1].pontos+=5;resultados[chave2].pontos+=2;}else{resultados[chave2].pontos+=5;resultados[chave1].pontos+=2;}resultados[chave1].saldoGames+=games1-games2;resultados[chave2].saldoGames+=games2-games1;}else{console.error('Dupla não encontrada em resultados:',{chave1,chave2,jogo});}}else{console.error('Jogo inválido ignorado:',jogo);}});return Object.values(resultados).sort((a,b)=>b.pontos-a.pontos||b.saldoGames-a.saldoGames).map(r=>r.dupla);};export const iniciarFaseEliminatoria=classificados=>{let totalDuplas=classificados.length;let rodadas=Math.ceil(Math.log2(totalDuplas));// Ajusta o número de duplas para uma potência de 2 (adiciona BYEs se necessário)\nlet proximoMultiplo=Math.pow(2,rodadas);let byes=proximoMultiplo-totalDuplas;let classificadosAjustados=[...classificados];for(let i=0;i<byes;i++){classificadosAjustados.push(['BYE','']);}// Define o nome da fase com base na quantidade de rodadas:\nlet faseNome;if(rodadas===1){faseNome='Final';}else if(rodadas===2){faseNome='Semifinal';}else if(rodadas===3){faseNome='Quartas de Final';}else{faseNome=\"Rodada 1\";}// Gera apenas a primeira rodada:\nlet jogosRodada=[];for(let i=0;i<classificadosAjustados.length;i+=2){jogosRodada.push({dupla1:classificadosAjustados[i],dupla2:classificadosAjustados[i+1],placar:'',submetido:false,fase:faseNome,rodada:1});}return jogosRodada;};export const avancarRodadaEliminatoria=jogosRodadaAtual=>{let vencedores=jogosRodadaAtual.map(jogo=>{const[score1,score2]=jogo.placar.split('-').map(Number);if(jogo.dupla2[0]==='BYE')return jogo.dupla1;return score1>score2?jogo.dupla1:jogo.dupla2;});let rodadasTotal=Math.ceil(Math.log2(vencedores.length));let novaFaseNome=['Final','Semifinal','Quartas de Final'][rodadasTotal-1]||\"Rodada \".concat(jogosRodadaAtual[0].rodada+1);let novaRodada=[];for(let i=0;i<vencedores.length;i+=2){if(vencedores[i+1]){novaRodada.push({dupla1:vencedores[i],dupla2:vencedores[i+1],placar:'',submetido:false,fase:novaFaseNome,rodada:jogosRodadaAtual[0].rodada+1});}else{// Caso seja um número ímpar, adiciona um BYE\nnovaRodada.push({dupla1:vencedores[i],dupla2:['BYE',''],placar:'',submetido:false,fase:novaFaseNome,rodada:jogosRodadaAtual[0].rodada+1});}}return novaRodada;};","map":{"version":3,"names":["classificarDuplas","grupos","classificados","forEach","grupo","duplasClassificadas","classificarDuplasPorDesempate","duplas","jogos","push","console","log","criarJogosParaGrupo","grupoId","i","length","j","dupla1","dupla2","placar","submetido","dividirGrupos","numGrupos","Math","ceil","Array","fill","map","_","id","slice","filter","resultados","reduce","acc","dupla","isArray","error","join","pontos","saldoGames","jogo","games1","games2","split","Number","chave1","chave2","Object","values","sort","a","b","r","iniciarFaseEliminatoria","totalDuplas","rodadas","log2","proximoMultiplo","pow","byes","classificadosAjustados","faseNome","jogosRodada","fase","rodada","avancarRodadaEliminatoria","jogosRodadaAtual","vencedores","score1","score2","rodadasTotal","novaFaseNome","concat","novaRodada"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["// src/utils/torneioUtils.js\r\nexport const classificarDuplas = (grupos) => {\r\n  let classificados = [];\r\n\r\n  grupos.forEach(grupo => {\r\n    // Ordena duplas do grupo com base nos critérios de desempate\r\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\r\n\r\n    // Adiciona os 2 melhores de cada grupo à lista de classificados\r\n    classificados.push(duplasClassificadas[0], duplasClassificadas[1]);\r\n  });\r\n\r\n  console.log(\"Duplas classificadas para a fase eliminatória:\", classificados);\r\n  return classificados;\r\n};\r\n\r\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\r\n  const jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        grupoId\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const dividirGrupos = (duplas) => {\r\n  let numGrupos;\r\n  // Forçar 2 grupos para 10 duplas\r\n  if (duplas.length === 10) {\r\n    numGrupos = 2;\r\n  } else if (duplas.length <= 5) {\r\n    numGrupos = 1;\r\n  } else if (duplas.length <= 8) {\r\n    numGrupos = 2;\r\n  } else if (duplas.length <= 11) {\r\n    numGrupos = 3;\r\n  } else if (duplas.length <= 14) {\r\n    numGrupos = 4;\r\n  } else if (duplas.length <= 17) {\r\n    numGrupos = 5;\r\n  } else if (duplas.length <= 20) {\r\n    numGrupos = 6;\r\n  } else {\r\n    numGrupos = Math.ceil(duplas.length / 3); // Para 21 ou mais\r\n  }\r\n\r\n  const grupos = Array(numGrupos).fill().map((_, i) => ({\r\n    id: i,\r\n    duplas: duplas.slice(i * Math.ceil(duplas.length / numGrupos), (i + 1) * Math.ceil(duplas.length / numGrupos))\r\n  }));\r\n\r\n  return grupos.filter(grupo => grupo.duplas.length > 0);\r\n};\r\n\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  const resultados = duplas.reduce((acc, dupla) => {\r\n    if (!dupla || !Array.isArray(dupla) || dupla.length !== 2) {\r\n      console.error('Dupla inválida:', dupla);\r\n      return acc;\r\n    }\r\n    acc[dupla.join('')] = { dupla, pontos: 0, saldoGames: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  jogos.forEach(jogo => {\r\n    if (jogo.placar && jogo.dupla1 && jogo.dupla2 && Array.isArray(jogo.dupla1) && Array.isArray(jogo.dupla2)) {\r\n      const [games1, games2] = jogo.placar.split('-').map(Number);\r\n      const chave1 = jogo.dupla1.join('');\r\n      const chave2 = jogo.dupla2.join('');\r\n\r\n      if (resultados[chave1] && resultados[chave2]) {\r\n        if (games1 > games2) {\r\n          resultados[chave1].pontos += 5;\r\n          resultados[chave2].pontos += 2;\r\n        } else {\r\n          resultados[chave2].pontos += 5;\r\n          resultados[chave1].pontos += 2;\r\n        }\r\n        resultados[chave1].saldoGames += games1 - games2;\r\n        resultados[chave2].saldoGames += games2 - games1;\r\n      } else {\r\n        console.error('Dupla não encontrada em resultados:', { chave1, chave2, jogo });\r\n      }\r\n    } else {\r\n      console.error('Jogo inválido ignorado:', jogo);\r\n    }\r\n  });\r\n\r\n  return Object.values(resultados)\r\n    .sort((a, b) => b.pontos - a.pontos || b.saldoGames - a.saldoGames)\r\n    .map(r => r.dupla);\r\n};\r\n\r\nexport const iniciarFaseEliminatoria = (classificados) => {\r\n  let totalDuplas = classificados.length;\r\n  let rodadas = Math.ceil(Math.log2(totalDuplas));\r\n  // Ajusta o número de duplas para uma potência de 2 (adiciona BYEs se necessário)\r\n  let proximoMultiplo = Math.pow(2, rodadas);\r\n  let byes = proximoMultiplo - totalDuplas;\r\n  let classificadosAjustados = [...classificados];\r\n  for (let i = 0; i < byes; i++) {\r\n    classificadosAjustados.push(['BYE', '']);\r\n  }\r\n\r\n  // Define o nome da fase com base na quantidade de rodadas:\r\n  let faseNome;\r\n  if (rodadas === 1) {\r\n    faseNome = 'Final';\r\n  } else if (rodadas === 2) {\r\n    faseNome = 'Semifinal';\r\n  } else if (rodadas === 3) {\r\n    faseNome = 'Quartas de Final';\r\n  } else {\r\n    faseNome = `Rodada 1`;\r\n  }\r\n\r\n  // Gera apenas a primeira rodada:\r\n  let jogosRodada = [];\r\n  for (let i = 0; i < classificadosAjustados.length; i += 2) {\r\n    jogosRodada.push({\r\n      dupla1: classificadosAjustados[i],\r\n      dupla2: classificadosAjustados[i + 1],\r\n      placar: '',\r\n      submetido: false,\r\n      fase: faseNome,\r\n      rodada: 1\r\n    });\r\n  }\r\n  return jogosRodada;\r\n};\r\n\r\nexport const avancarRodadaEliminatoria = (jogosRodadaAtual) => {\r\n  let vencedores = jogosRodadaAtual.map(jogo => {\r\n    const [score1, score2] = jogo.placar.split('-').map(Number);\r\n    if (jogo.dupla2[0] === 'BYE') return jogo.dupla1;\r\n    return score1 > score2 ? jogo.dupla1 : jogo.dupla2;\r\n  });\r\n\r\n  let rodadasTotal = Math.ceil(Math.log2(vencedores.length));\r\n  let novaFaseNome = ['Final', 'Semifinal', 'Quartas de Final'][rodadasTotal - 1] || `Rodada ${jogosRodadaAtual[0].rodada + 1}`;\r\n\r\n  let novaRodada = [];\r\n  for (let i = 0; i < vencedores.length; i += 2) {\r\n    if (vencedores[i + 1]) {\r\n      novaRodada.push({\r\n        dupla1: vencedores[i],\r\n        dupla2: vencedores[i + 1],\r\n        placar: '',\r\n        submetido: false,\r\n        fase: novaFaseNome,\r\n        rodada: jogosRodadaAtual[0].rodada + 1\r\n      });\r\n    } else {\r\n      // Caso seja um número ímpar, adiciona um BYE\r\n      novaRodada.push({\r\n        dupla1: vencedores[i],\r\n        dupla2: ['BYE', ''], \r\n        placar: '',\r\n        submetido: false,\r\n        fase: novaFaseNome,\r\n        rodada: jogosRodadaAtual[0].rodada + 1\r\n      });\r\n    }\r\n  }\r\n  return novaRodada;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}