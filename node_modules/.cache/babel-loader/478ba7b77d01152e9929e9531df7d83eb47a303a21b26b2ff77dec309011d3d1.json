{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport { saveTournament, loadTournaments, deleteTournament, generateTournament, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport shuffleIcon from './assets/icons/shuffle.svg';\nimport folderIcon from './assets/icons/folder.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n  useEffect(() => {\n    const updatedTournaments = loadTournaments();\n    setTournaments(updatedTournaments);\n  }, []);\n  const saveCurrentTournament = useCallback(() => {\n    if (currentTournament && currentTournament.nome && currentTournament.dataInicio && currentTournament.horaInicio) {\n      const tournamentToSave = {\n        ...currentTournament,\n        faseAtual\n      };\n      console.log('Salvando torneio no localStorage:', tournamentToSave);\n      saveTournament(tournamentToSave);\n      setTournaments(loadTournaments());\n    }\n  }, [currentTournament, faseAtual]);\n  const updateTournamentField = useCallback((field, value) => {\n    setCurrentTournament(prev => {\n      const updated = {\n        ...prev,\n        [field]: value\n      };\n      console.log(`Atualizando ${field}:`, value);\n      if (updated.nome && updated.dataInicio && updated.horaInicio) {\n        saveCurrentTournament();\n      }\n      return updated;\n    });\n  }, [saveCurrentTournament]);\n  const createNewTournament = useCallback(() => {\n    const newTournament = {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas'\n    };\n    setCurrentTournament(newTournament);\n    setFaseAtual('duplas');\n  }, []);\n  const loadTournament = useCallback(nome => {\n    const tournament = tournaments[nome];\n    if (tournament) {\n      console.log('Carregando torneio do localStorage:', tournament);\n      setCurrentTournament(tournament);\n      setFaseAtual(tournament.status === 'finalizado' ? 'finalizado' : tournament.faseAtual || 'duplas');\n    } else {\n      createNewTournament();\n    }\n  }, [tournaments, createNewTournament]);\n  const handleDeleteTournament = useCallback(nome => {\n    deleteTournament(nome);\n    setTournaments(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n    }\n  }, [currentTournament]);\n  const handleImportTournaments = useCallback(importedTournaments => {\n    setTournaments(prev => {\n      const updatedTournaments = {\n        ...prev,\n        ...importedTournaments\n      };\n      Object.entries(updatedTournaments).forEach(([nome, tournament]) => {\n        saveTournament(tournament);\n      });\n      return updatedTournaments;\n    });\n  }, []);\n  const addDupla = useCallback(dupla => {\n    if (!(currentTournament !== null && currentTournament !== void 0 && currentTournament.duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1])))) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  }, [currentTournament, updateTournamentField]);\n  const removeDupla = useCallback(index => {\n    updateTournamentField('duplas', currentTournament.duplas.filter((_, i) => i !== index));\n  }, [currentTournament, updateTournamentField]);\n  const startTournament = useCallback(() => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!currentTournament.nome || !currentTournament.dataInicio || !currentTournament.horaInicio) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const duplasSorteadas = [...currentTournament.duplas].sort(() => Math.random() - 0.5);\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = {\n        dupla,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      return acc;\n    }, {});\n    setCurrentTournament(prev => ({\n      ...prev,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString(),\n      duplas: duplasSorteadas\n    }));\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  }, [currentTournament, saveCurrentTournament]);\n  const encerrarFaseGrupos = useCallback(() => {\n    if (currentTournament.grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido || !jogo.placar))) {\n      alert('Todos os jogos da fase de grupos devem ter placares submetidos antes de encerrar.');\n      return;\n    }\n    const todosOsJogos = currentTournament.grupos.flatMap(grupo => grupo.jogos);\n    console.log('Jogos da fase de grupos:', todosOsJogos);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      todosOsJogos.forEach(jogo => {\n        if (!jogo.placar || !jogo.placar.includes('-') || !jogo.submetido) {\n          console.log('Ignorando jogo inválido na atualização do histórico:', jogo);\n          return;\n        }\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      console.log('Histórico após fase de grupos:', novoHistorico);\n      return novoHistorico;\n    });\n    const numDuplas = currentTournament.duplas.length;\n    if (numDuplas <= 4) {\n      const classificados = classificarDuplasPorDesempate(currentTournament.duplas, todosOsJogos);\n      updateTournamentField('ranking', classificados.map((dupla, index) => ({\n        lugar: index + 1,\n        dupla: dupla\n      })));\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else if (numDuplas === 9 || numDuplas === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(currentTournament.grupos[0].duplas, currentTournament.grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(currentTournament.grupos[1].duplas, currentTournament.grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: [...rankingGrupo1[0]],\n        dupla2: [...rankingGrupo2[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: [...rankingGrupo2[0]],\n        dupla2: [...rankingGrupo1[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      updateTournamentField('jogosEliminatoria', semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = currentTournament.grupos.map(grupo => classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2)).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d.join('') === dupla.join('')));\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      if (numDuplas <= 11) {\n        if (rankingGeral.length <= 4) {\n          // Para 6 duplas (4 classificadas), vai direto para semifinais\n          const jogosSemifinais = [{\n            dupla1: [...rankingGeral[0]],\n            dupla2: [...rankingGeral[3]],\n            placar: '',\n            submetido: false,\n            fase: 'Semifinal',\n            rodada: 1\n          }, {\n            dupla1: [...rankingGeral[1]],\n            dupla2: [...rankingGeral[2]],\n            placar: '',\n            submetido: false,\n            fase: 'Semifinal',\n            rodada: 1\n          }];\n          updateTournamentField('jogosEliminatoria', jogosSemifinais);\n          updateTournamentField('duplasBye', []);\n          setFaseAtual('eliminatória');\n        } else if (rankingGeral.length === 5) {\n          const duplasByeLocal = rankingGeral.slice(0, 1);\n          const duplasSemifinais = rankingGeral.slice(1, 5);\n          const jogosSemifinais = [{\n            dupla1: [...duplasSemifinais[0]],\n            dupla2: [...duplasSemifinais[3]],\n            placar: '',\n            submetido: false,\n            fase: 'Semifinal',\n            rodada: 1\n          }, {\n            dupla1: [...duplasSemifinais[1]],\n            dupla2: [...duplasSemifinais[2]],\n            placar: '',\n            submetido: false,\n            fase: 'Semifinal',\n            rodada: 1\n          }];\n          updateTournamentField('jogosEliminatoria', jogosSemifinais);\n          updateTournamentField('duplasBye', duplasByeLocal);\n          setFaseAtual('eliminatória');\n        } else {\n          // Para 8 duplas ou mais (6 ou mais classificadas)\n          const duplasByeLocal = rankingGeral.slice(0, 2);\n          const duplasQuartas = rankingGeral.slice(2, 6);\n          const jogosQuartas = [{\n            dupla1: [...duplasQuartas[0]],\n            dupla2: [...duplasQuartas[3]],\n            placar: '',\n            submetido: false,\n            fase: 'Quartas de Final',\n            rodada: 1\n          }, {\n            dupla1: [...duplasQuartas[1]],\n            dupla2: [...duplasQuartas[2]],\n            placar: '',\n            submetido: false,\n            fase: 'Quartas de Final',\n            rodada: 1\n          }];\n          updateTournamentField('jogosEliminatoria', jogosQuartas);\n          updateTournamentField('duplasBye', duplasByeLocal);\n          setFaseAtual('eliminatória');\n        }\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: top16[i + 1] ? [...top16[i + 1]] : ['BYE', ''],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n        updateTournamentField('jogosEliminatoria', jogosOitavas);\n        updateTournamentField('duplasBye', []);\n        setFaseAtual('eliminatória');\n      }\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const atualizarPlacarNaEliminatoria = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na eliminatória:', {\n      jogo,\n      placar\n    });\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j)]);\n      const vencedora = jogo.dupla1[0] === 'BYE' ? jogo.dupla2 : jogo.dupla1;\n      const chaveVencedora = vencedora.join('');\n      updateTournamentField('historicoDuplas', prev => {\n        var _novoHistorico$chaveV, _novoHistorico$chaveV2, _novoHistorico$chaveV3, _novoHistorico$chaveV4, _novoHistorico$chaveV5;\n        const novoHistorico = {\n          ...prev\n        };\n        novoHistorico[chaveVencedora] = {\n          dupla: vencedora,\n          jogos: (((_novoHistorico$chaveV = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV === void 0 ? void 0 : _novoHistorico$chaveV.jogos) || 0) + 1,\n          jogosVencidos: (((_novoHistorico$chaveV2 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV2 === void 0 ? void 0 : _novoHistorico$chaveV2.jogosVencidos) || 0) + 1,\n          pontos: (((_novoHistorico$chaveV3 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV3 === void 0 ? void 0 : _novoHistorico$chaveV3.pontos) || 0) + 5,\n          gamesVencidos: ((_novoHistorico$chaveV4 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV4 === void 0 ? void 0 : _novoHistorico$chaveV4.gamesVencidos) || 0,\n          gamesPerdidos: ((_novoHistorico$chaveV5 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV5 === void 0 ? void 0 : _novoHistorico$chaveV5.gamesPerdidos) || 0\n        };\n        console.log('Histórico após eliminatória (BYE):', novoHistorico);\n        return novoHistorico;\n      });\n    } else {\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n        ...j,\n        placar,\n        submetido: true\n      } : j)]);\n      updateTournamentField('historicoDuplas', prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após eliminatória:', novoHistorico);\n        return novoHistorico;\n      });\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const iniciarFinal = useCallback(jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria, {\n      dupla1: [...finalistas[0]],\n      dupla2: [...finalistas[1]],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }, {\n      dupla1: [...perdedores[0]],\n      dupla2: [...perdedores[1]],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const atualizarPlacarNaFinal = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na final:', {\n      jogo,\n      placar\n    });\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n      ...j,\n      placar,\n      submetido: true\n    } : j)]);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n        dupla: jogo.dupla1,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n        dupla: jogo.dupla2,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      console.log('Histórico após final:', novoHistorico);\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const encerrarFaseEliminatoria = useCallback(jogos => {\n    const rodadaAtual = Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !currentTournament.finalConfigurada) {\n      iniciarFinal(jogos);\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && currentTournament.duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      const semifinalMatches = [{\n        dupla1: [...currentTournament.duplasBye[0]],\n        dupla2: [...vencedoresQuartas[0]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: [...currentTournament.duplasBye[1]],\n        dupla2: [...vencedoresQuartas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament, iniciarFinal]);\n  const finalizarTorneio = useCallback(() => {\n    const final = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    updateTournamentField('ranking', [{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n  const renderClassificacaoGrupo = useCallback(grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n            }).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 701,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 704,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 705,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 706,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 700,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const incrementoMinutos = idx * 30;\n            const dataHora = formatarDataHora(currentTournament.dataTorneio, incrementoMinutos);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 734,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 735,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 736,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 737,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 738,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 739,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 724,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this);\n  }, [currentTournament]);\n  const renderizarFaseEliminatoria = useCallback(jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 760,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 761,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 762,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 759,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 758,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 776,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 777,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 778,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 779,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 775,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 766,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 9\n      }, this);\n    });\n  }, []);\n  const gerarRelatorioEstatisticas = useCallback(() => {\n    const todosOsJogos = [...currentTournament.grupos.flatMap(grupo => grupo.jogos), ...currentTournament.jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')].filter(jogo => jogo.submetido);\n    console.log('Todos os jogos para relatório:', todosOsJogos);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + (isNaN(g1) || isNaN(g2) ? 0 : g1 + g2);\n    }, 0);\n    let historicoDuplas = currentTournament.historicoDuplas || {};\n    console.log('Histórico inicial antes de recalcular:', historicoDuplas);\n    historicoDuplas = currentTournament.duplas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = {\n        dupla,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      return acc;\n    }, {});\n    todosOsJogos.forEach(jogo => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      if (isNaN(g1) || isNaN(g2)) return;\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      historicoDuplas[chave1].jogos += 1;\n      historicoDuplas[chave2].jogos += 1;\n      if (g1 > g2) {\n        historicoDuplas[chave1].pontos += 5;\n        historicoDuplas[chave1].jogosVencidos += 1;\n        historicoDuplas[chave1].gamesVencidos += g1;\n        historicoDuplas[chave1].gamesPerdidos += g2;\n        historicoDuplas[chave2].pontos += 2;\n        historicoDuplas[chave2].gamesVencidos += g2;\n        historicoDuplas[chave2].gamesPerdidos += g1;\n      } else {\n        historicoDuplas[chave2].pontos += 5;\n        historicoDuplas[chave2].jogosVencidos += 1;\n        historicoDuplas[chave2].gamesVencidos += g2;\n        historicoDuplas[chave2].gamesPerdidos += g1;\n        historicoDuplas[chave1].pontos += 2;\n        historicoDuplas[chave1].gamesVencidos += g1;\n        historicoDuplas[chave1].gamesPerdidos += g2;\n      }\n    });\n    updateTournamentField('historicoDuplas', historicoDuplas);\n    console.log('Histórico recalculado:', historicoDuplas);\n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      var _currentTournament$ra;\n      const derrotas = dados.jogos - dados.jogosVencidos;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ((_currentTournament$ra = currentTournament.ranking.find(r => r.dupla.join('') === dados.dupla.join(''))) === null || _currentTournament$ra === void 0 ? void 0 : _currentTournament$ra.lugar) || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        derrotas,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => atual.saldoGames > melhor.saldoGames ? atual : melhor, estatisticasDuplas[0] || {\n      dupla: 'Nenhuma',\n      vitorias: 0,\n      jogos: 0,\n      saldoGames: 0\n    });\n    console.log('Estatísticas finais:', estatisticasDuplas);\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  }, [currentTournament, updateTournamentField]);\n  const resetTournament = useCallback(() => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  }, []);\n  const add8Duplas = useCallback(() => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  }, [currentTournament, updateTournamentField]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: btConnectLogo,\n        alt: \"btConnect Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 892,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'menu' && /*#__PURE__*/_jsxDEV(MeusTorneios, {\n        tournaments: tournaments,\n        onSelectTournament: loadTournament,\n        onCreateNew: createNewTournament,\n        onDeleteTournament: handleDeleteTournament,\n        onImportTournaments: handleImportTournaments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 11\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 908,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.nome) || '',\n              onChange: e => updateTournamentField('nome', e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 909,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 907,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 919,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.dataInicio) || '',\n              onChange: e => updateTournamentField('dataInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 920,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 918,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 929,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.horaInicio) || '',\n              onChange: e => updateTournamentField('horaInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 906,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 939,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"GerarChaves\",\n              onClick: () => {\n                try {\n                  const tournament = generateTournament(currentTournament.nome, currentTournament.duplas, currentTournament.dataInicio, currentTournament.horaInicio);\n                  setCurrentTournament(tournament);\n                  setTournaments(loadTournaments());\n                  setFaseAtual('grupos');\n                } catch (error) {\n                  alert(error.message);\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: shuffleIcon,\n                alt: \"Shuffle Icon\",\n                className: \"shuffle-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 962,\n                columnNumber: 19\n              }, this), \"Gerar Chaveamento\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 944,\n              columnNumber: 17\n            }, this), (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.status) === 'rascunho' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: tournamentsIcon,\n                alt: \"Tournament Icon\",\n                className: \"button-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 967,\n                columnNumber: 21\n              }, this), \"Iniciar Torneio\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 966,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"homePage\",\n              onClick: () => setFaseAtual('menu'),\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: folderIcon,\n                alt: \"Folder Icon\",\n                className: \"folder-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 972,\n                columnNumber: 19\n              }, this), \"Meus Torneios\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 971,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 975,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 943,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.duplas) || [],\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 942,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 905,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: currentTournament.grupos,\n          onUpdateGroups: newGrupos => updateTournamentField('grupos', newGrupos)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 987,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 991,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 993,\n            columnNumber: 15\n          }, this), currentTournament.grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1000,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria,\n          onAvancarParaFinal: encerrarFaseEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1001,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => encerrarFaseEliminatoria(currentTournament.jogosEliminatoria),\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1014,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1021,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 13\n        }, this), currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1032,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1035,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1034,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1046,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1050,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"DUPLAS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1051,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1049,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1048,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: currentTournament.ranking.map((posição, index) => {\n              let medalha = '';\n              let color = '#000';\n              if (posição.lugar === 1) {\n                medalha = '🥇';\n                color = 'gold';\n              } else if (posição.lugar === 2) {\n                medalha = '🥈';\n                color = 'silver';\n              } else if (posição.lugar === 3) {\n                medalha = '🥉';\n                color = 'brown';\n              }\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color\n                  },\n                  children: [medalha, \" \", posição.lugar, \"\\xBA Colocado\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1070,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: posição.dupla.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1071,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1069,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1054,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1047,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relatorio-estatisticas\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Estat\\xEDsticas Gerais do Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1078,\n            columnNumber: 15\n          }, this), (() => {\n            const {\n              totalPartidas,\n              totalGames,\n              estatisticasDuplas,\n              melhorCampanha\n            } = gerarRelatorioEstatisticas();\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Partidas Disputadas:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1084,\n                  columnNumber: 24\n                }, this), \" \", totalPartidas]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1084,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Games Disputados:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1085,\n                  columnNumber: 24\n                }, this), \" \", totalGames]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1085,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Melhor Campanha:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1087,\n                  columnNumber: 23\n                }, this), \" \", melhorCampanha.dupla, \" ( Saldo de Games: \", melhorCampanha.saldoGames, \", \", melhorCampanha.vitorias, \" vit\\xF3rias em\", ' ', melhorCampanha.jogos, \" jogos)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1086,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Estat\\xEDsticas por Dupla\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1091,\n                columnNumber: 21\n              }, this), estatisticasDuplas.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"POSI\\xC7\\xC3O\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1096,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DUPLA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1097,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"PARTIDAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1098,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"VIT\\xD3RIAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1099,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DERROTAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1100,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"GAMES (V/P)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1101,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"SALDO GAMES\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1102,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1095,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1094,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: estatisticasDuplas.map((dupla, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1108,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.dupla\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1109,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.jogos\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1110,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.vitorias\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1111,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.derrotas\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1112,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.gamesVencidos, \"/\", dupla.gamesPerdidos]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1113,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.saldoGames\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1114,\n                      columnNumber: 31\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1107,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1105,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1093,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Nenhuma estat\\xEDstica dispon\\xEDvel para as duplas.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1120,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"historico-jogos\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Hist\\xF3rico de Jogos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1124,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Fase de Grupos\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1125,\n                  columnNumber: 23\n                }, this), currentTournament.grupos.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                    children: [\"Grupo \", grupo.id + 1]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1128,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                          children: \"Jogo\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1132,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: \"Dupla 1\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1133,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: \"Placar\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1134,\n                          columnNumber: 33\n                        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: \"Dupla 2\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1135,\n                          columnNumber: 33\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1131,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1130,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                      children: grupo.jogos.filter(jogo => jogo.submetido).map((jogo, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                          children: index + 1\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1143,\n                          columnNumber: 37\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: jogo.dupla1.join(' & ')\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1144,\n                          columnNumber: 37\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: jogo.placar\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1145,\n                          columnNumber: 37\n                        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: jogo.dupla2.join(' & ')\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1146,\n                          columnNumber: 37\n                        }, this)]\n                      }, index, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1142,\n                        columnNumber: 35\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1138,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1129,\n                    columnNumber: 27\n                  }, this)]\n                }, `grupo-${grupo.id}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1127,\n                  columnNumber: 25\n                }, this)), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Fase Eliminat\\xF3ria\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1154,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Jogo\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1158,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Dupla 1\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1159,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Placar\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1160,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Dupla 2\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1161,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Fase\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1162,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1157,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1156,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: currentTournament.jogosEliminatoria.filter(jogo => jogo.submetido && jogo.fase !== 'Final' && jogo.fase !== 'Disputa 3º Lugar').map((jogo, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: index + 1\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1170,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.dupla1.join(' & ')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1171,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.placar\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1172,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.dupla2.join(' & ')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1173,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.fase\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1174,\n                        columnNumber: 33\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1169,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1165,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1155,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: \"Fase Final\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1180,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                    children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Jogo\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1184,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Dupla 1\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1185,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Placar\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1186,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Dupla 2\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1187,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                        children: \"Fase\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1188,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1183,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1182,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                    children: currentTournament.jogosEliminatoria.filter(jogo => jogo.submetido && (jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')).map((jogo, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: index + 1\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1196,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.dupla1.join(' & ')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1197,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.placar\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1198,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.dupla2.join(' & ')\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1199,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: jogo.fase\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1200,\n                        columnNumber: 33\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1195,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1191,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1181,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1123,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Torneio Finalizado em \", new Date().toLocaleString('pt-BR'), \"!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1207,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: resetTournament,\n                className: \"novo-torneio-btn\",\n                children: \"In\\xEDcio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1208,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true);\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1077,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 890,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9rFxg8X4SKE0HSMjK6zl9FFtHyQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","MeusTorneios","saveTournament","loadTournaments","deleteTournament","generateTournament","classificarDuplasPorDesempate","gameDay","btConnectLogo","tournamentsIcon","shuffleIcon","folderIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentTournament","setCurrentTournament","faseAtual","setFaseAtual","tournaments","setTournaments","updatedTournaments","saveCurrentTournament","nome","dataInicio","horaInicio","tournamentToSave","console","log","updateTournamentField","field","value","prev","updated","createNewTournament","newTournament","dataCriacao","dataTorneio","duplas","grupos","jogosEliminatoria","finalConfigurada","terceiroLugarConfigurado","ranking","duplasBye","historicoDuplas","status","loadTournament","tournament","handleDeleteTournament","handleImportTournaments","importedTournaments","Object","entries","forEach","addDupla","dupla","some","d","includes","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","historicoInicial","reduce","acc","join","pontos","jogos","jogosVencidos","gamesVencidos","gamesPerdidos","Date","toISOString","encerrarFaseGrupos","grupo","jogo","submetido","placar","todosOsJogos","flatMap","novoHistorico","g1","g2","split","map","Number","isNaN","chave1","dupla1","chave2","dupla2","numDuplas","classificados","lugar","rankingGrupo1","rankingGrupo2","semifinalMatches","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","dupla1Str","dupla2Str","rankingGeral","jogosSemifinais","duplasByeLocal","duplasSemifinais","duplasQuartas","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","j","vencedora","chaveVencedora","_novoHistorico$chaveV","_novoHistorico$chaveV2","_novoHistorico$chaveV3","_novoHistorico$chaveV4","_novoHistorico$chaveV5","iniciarFinal","semifinalGames","error","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","dia","String","getDate","padStart","mes","getMonth","hora","getHours","minuto","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","gerarRelatorioEstatisticas","totalPartidas","totalGames","estatisticasDuplas","values","dados","_currentTournament$ra","derrotas","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","resetTournament","add8Duplas","newDuplas","src","alt","onSelectTournament","onCreateNew","onDeleteTournament","onImportTournaments","type","onChange","e","target","toUpperCase","placeholder","onClick","message","onAddDupla","onRemoveDupla","onUpdateGroups","newGrupos","onAtualizarPlacar","onAvancarParaFinal","onFinalizarTorneio","posição","medalha","color","style","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport {\n  saveTournament,\n  loadTournaments,\n  deleteTournament,\n  generateTournament,\n  classificarDuplasPorDesempate,\n} from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport shuffleIcon from './assets/icons/shuffle.svg';\nimport folderIcon from './assets/icons/folder.svg';\n\nfunction App() {\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n\n  useEffect(() => {\n    const updatedTournaments = loadTournaments();\n    setTournaments(updatedTournaments);\n  }, []);\n\n  const saveCurrentTournament = useCallback(() => {\n    if (currentTournament && currentTournament.nome && currentTournament.dataInicio && currentTournament.horaInicio) {\n      const tournamentToSave = { ...currentTournament, faseAtual };\n      console.log('Salvando torneio no localStorage:', tournamentToSave);\n      saveTournament(tournamentToSave);\n      setTournaments(loadTournaments());\n    }\n  }, [currentTournament, faseAtual]);\n\n  const updateTournamentField = useCallback((field, value) => {\n    setCurrentTournament((prev) => {\n      const updated = { ...prev, [field]: value };\n      console.log(`Atualizando ${field}:`, value);\n      if (updated.nome && updated.dataInicio && updated.horaInicio) {\n        saveCurrentTournament();\n      }\n      return updated;\n    });\n  }, [saveCurrentTournament]);\n\n  const createNewTournament = useCallback(() => {\n    const newTournament = {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas',\n    };\n    setCurrentTournament(newTournament);\n    setFaseAtual('duplas');\n  }, []);\n\n  const loadTournament = useCallback((nome) => {\n    const tournament = tournaments[nome];\n    if (tournament) {\n      console.log('Carregando torneio do localStorage:', tournament);\n      setCurrentTournament(tournament);\n      setFaseAtual(tournament.status === 'finalizado' ? 'finalizado' : tournament.faseAtual || 'duplas');\n    } else {\n      createNewTournament();\n    }\n  }, [tournaments, createNewTournament]);\n\n  const handleDeleteTournament = useCallback((nome) => {\n    deleteTournament(nome);\n    setTournaments((prev) => {\n      const updated = { ...prev };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n    }\n  }, [currentTournament]);\n\n  const handleImportTournaments = useCallback((importedTournaments) => {\n    setTournaments((prev) => {\n      const updatedTournaments = { ...prev, ...importedTournaments };\n      Object.entries(updatedTournaments).forEach(([nome, tournament]) => {\n        saveTournament(tournament);\n      });\n      return updatedTournaments;\n    });\n  }, []);\n\n  const addDupla = useCallback((dupla) => {\n    if (\n      !currentTournament?.duplas.some(\n        (d) => d.includes(dupla[0]) || d.includes(dupla[1])\n      )\n    ) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  }, [currentTournament, updateTournamentField]);\n\n  const removeDupla = useCallback((index) => {\n    updateTournamentField(\n      'duplas',\n      currentTournament.duplas.filter((_, i) => i !== index)\n    );\n  }, [currentTournament, updateTournamentField]);\n\n  const startTournament = useCallback(() => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (\n      !currentTournament.nome ||\n      !currentTournament.dataInicio ||\n      !currentTournament.horaInicio\n    ) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const duplasSorteadas = [...currentTournament.duplas].sort(() => Math.random() - 0.5);\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n    setCurrentTournament((prev) => ({\n      ...prev,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString(),\n      duplas: duplasSorteadas,\n    }));\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  }, [currentTournament, saveCurrentTournament]);\n\n  const encerrarFaseGrupos = useCallback(() => {\n    if (\n      currentTournament.grupos.some((grupo) =>\n        grupo.jogos.some((jogo) => !jogo.submetido || !jogo.placar)\n      )\n    ) {\n      alert('Todos os jogos da fase de grupos devem ter placares submetidos antes de encerrar.');\n      return;\n    }\n\n    const todosOsJogos = currentTournament.grupos.flatMap((grupo) => grupo.jogos);\n    console.log('Jogos da fase de grupos:', todosOsJogos);\n\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach((jogo) => {\n        if (!jogo.placar || !jogo.placar.includes('-') || !jogo.submetido) {\n          console.log('Ignorando jogo inválido na atualização do histórico:', jogo);\n          return;\n        }\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      console.log('Histórico após fase de grupos:', novoHistorico);\n      return novoHistorico;\n    });\n\n    const numDuplas = currentTournament.duplas.length;\n\n    if (numDuplas <= 4) {\n      const classificados = classificarDuplasPorDesempate(\n        currentTournament.duplas,\n        todosOsJogos\n      );\n      updateTournamentField('ranking', classificados.map((dupla, index) => ({\n        lugar: index + 1,\n        dupla: dupla,\n      })));\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else if (numDuplas === 9 || numDuplas === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(\n        currentTournament.grupos[0].duplas,\n        currentTournament.grupos[0].jogos\n      );\n      const rankingGrupo2 = classificarDuplasPorDesempate(\n        currentTournament.grupos[1].duplas,\n        currentTournament.grupos[1].jogos\n      );\n      const semifinalMatches = [\n        {\n          dupla1: [...rankingGrupo1[0]],\n          dupla2: [...rankingGrupo2[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n        {\n          dupla1: [...rankingGrupo2[0]],\n          dupla2: [...rankingGrupo1[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = currentTournament.grupos\n        .map((grupo) => classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2))\n        .flat();\n      const duplasUnicas = classificadosPorGrupo.filter(\n        (dupla, index, self) =>\n          index === self.findIndex((d) => d.join('') === dupla.join(''))\n      );\n      const jogosClassificados = todosOsJogos.filter((jogo) => {\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return (\n          duplasUnicas.some((d) => d.join('') === dupla1Str) &&\n          duplasUnicas.some((d) => d.join('') === dupla2Str)\n        );\n      });\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n\n      if (numDuplas <= 11) {\n        if (rankingGeral.length <= 4) { // Para 6 duplas (4 classificadas), vai direto para semifinais\n          const jogosSemifinais = [\n            {\n              dupla1: [...rankingGeral[0]],\n              dupla2: [...rankingGeral[3]],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1,\n            },\n            {\n              dupla1: [...rankingGeral[1]],\n              dupla2: [...rankingGeral[2]],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1,\n            },\n          ];\n          updateTournamentField('jogosEliminatoria', jogosSemifinais);\n          updateTournamentField('duplasBye', []);\n          setFaseAtual('eliminatória');\n        } else if (rankingGeral.length === 5) {\n          const duplasByeLocal = rankingGeral.slice(0, 1);\n          const duplasSemifinais = rankingGeral.slice(1, 5);\n          const jogosSemifinais = [\n            {\n              dupla1: [...duplasSemifinais[0]],\n              dupla2: [...duplasSemifinais[3]],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1,\n            },\n            {\n              dupla1: [...duplasSemifinais[1]],\n              dupla2: [...duplasSemifinais[2]],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1,\n            },\n          ];\n          updateTournamentField('jogosEliminatoria', jogosSemifinais);\n          updateTournamentField('duplasBye', duplasByeLocal);\n          setFaseAtual('eliminatória');\n        } else { // Para 8 duplas ou mais (6 ou mais classificadas)\n          const duplasByeLocal = rankingGeral.slice(0, 2);\n          const duplasQuartas = rankingGeral.slice(2, 6);\n          const jogosQuartas = [\n            {\n              dupla1: [...duplasQuartas[0]],\n              dupla2: [...duplasQuartas[3]],\n              placar: '',\n              submetido: false,\n              fase: 'Quartas de Final',\n              rodada: 1,\n            },\n            {\n              dupla1: [...duplasQuartas[1]],\n              dupla2: [...duplasQuartas[2]],\n              placar: '',\n              submetido: false,\n              fase: 'Quartas de Final',\n              rodada: 1,\n            },\n          ];\n          updateTournamentField('jogosEliminatoria', jogosQuartas);\n          updateTournamentField('duplasBye', duplasByeLocal);\n          setFaseAtual('eliminatória');\n        }\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: top16[i + 1] ? [...top16[i + 1]] : ['BYE', ''],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1,\n          });\n        }\n        updateTournamentField('jogosEliminatoria', jogosOitavas);\n        updateTournamentField('duplasBye', []);\n        setFaseAtual('eliminatória');\n      }\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const atualizarPlacarNaEliminatoria = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na eliminatória:', { jogo, placar });\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        ),\n      ]);\n      const vencedora = jogo.dupla1[0] === 'BYE' ? jogo.dupla2 : jogo.dupla1;\n      const chaveVencedora = vencedora.join('');\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        novoHistorico[chaveVencedora] = {\n          dupla: vencedora,\n          jogos: (novoHistorico[chaveVencedora]?.jogos || 0) + 1,\n          jogosVencidos: (novoHistorico[chaveVencedora]?.jogosVencidos || 0) + 1,\n          pontos: (novoHistorico[chaveVencedora]?.pontos || 0) + 5,\n          gamesVencidos: novoHistorico[chaveVencedora]?.gamesVencidos || 0,\n          gamesPerdidos: novoHistorico[chaveVencedora]?.gamesPerdidos || 0,\n        };\n        console.log('Histórico após eliminatória (BYE):', novoHistorico);\n        return novoHistorico;\n      });\n    } else {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar, submetido: true } : j\n        ),\n      ]);\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após eliminatória:', novoHistorico);\n        return novoHistorico;\n      });\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const iniciarFinal = useCallback((jogos) => {\n    const semifinalGames = jogos.filter((jogo) => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria,\n      {\n        dupla1: [...finalistas[0]],\n        dupla2: [...finalistas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n      {\n        dupla1: [...perdedores[0]],\n        dupla2: [...perdedores[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n    ]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const atualizarPlacarNaFinal = useCallback((jogo, placar) => {\n    console.log('Atualizando placar na final:', { jogo, placar });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria.map((j) =>\n        j === jogo ? { ...j, placar, submetido: true } : j\n      ),\n    ]);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1])\n        novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      if (!novoHistorico[chave2])\n        novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      console.log('Histórico após final:', novoHistorico);\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const encerrarFaseEliminatoria = useCallback((jogos) => {\n    const rodadaAtual = Math.max(\n      ...currentTournament.jogosEliminatoria.map((j) => j.rodada)\n    );\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(\n      (j) => j.rodada === rodadaAtual\n    );\n\n    if (!jogosRodadaAtual.every((j) => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    if (\n      jogosRodadaAtual.some((j) => j.fase === 'Semifinal') &&\n      !currentTournament.finalConfigurada\n    ) {\n      iniciarFinal(jogos);\n    } else if (\n      jogosRodadaAtual.some((j) => j.fase === 'Quartas de Final') &&\n      currentTournament.duplas.length <= 11\n    ) {\n      const vencedoresQuartas = jogosRodadaAtual.map((jogo) => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      const semifinalMatches = [\n        {\n          dupla1: [...currentTournament.duplasBye[0]],\n          dupla2: [...vencedoresQuartas[0]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n        {\n          dupla1: [...currentTournament.duplasBye[1]],\n          dupla2: [...vencedoresQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.filter((j) => j.rodada < rodadaAtual + 1),\n        ...semifinalMatches,\n      ]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament, iniciarFinal]);\n\n  const finalizarTorneio = useCallback(() => {\n    const final = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Final'\n    );\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Disputa 3º Lugar'\n    );\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] =\n      finalSet1 > finalSet2\n        ? [final.dupla1, final.dupla2]\n        : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] =\n      terceiroSet1 > terceiroSet2\n        ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n        : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    updateTournamentField('ranking', [\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto },\n    ]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  }, [currentTournament, updateTournamentField, saveCurrentTournament]);\n\n  const renderClassificacaoGrupo = useCallback((grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every((jogo) => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(\n                (j) =>\n                  j.dupla1.join('') === dupla.join('') ||\n                  j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar\n                ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate'\n                : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(currentTournament.dataTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }, [currentTournament]);\n\n  const renderizarFaseEliminatoria = useCallback((jogos) => {\n    const rodadas = [...new Set(jogos.map((j) => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map((rodada) => {\n      const jogosDaRodada = jogos.filter((j) => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor =\n                  jogo.placar && jogo.submetido\n                    ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1])\n                      ? jogo.dupla1.join(' & ')\n                      : jogo.dupla2.join(' & ')\n                    : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  }, []);\n\n  const gerarRelatorioEstatisticas = useCallback(() => {\n    const todosOsJogos = [\n      ...currentTournament.grupos.flatMap((grupo) => grupo.jogos),\n      ...currentTournament.jogosEliminatoria.filter((jogo) => jogo.placar !== 'BYE'),\n    ].filter((jogo) => jogo.submetido);\n\n    console.log('Todos os jogos para relatório:', todosOsJogos);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + (isNaN(g1) || isNaN(g2) ? 0 : g1 + g2);\n    }, 0);\n\n    let historicoDuplas = currentTournament.historicoDuplas || {};\n    console.log('Histórico inicial antes de recalcular:', historicoDuplas);\n\n    historicoDuplas = currentTournament.duplas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n\n    todosOsJogos.forEach((jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      if (isNaN(g1) || isNaN(g2)) return;\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      historicoDuplas[chave1].jogos += 1;\n      historicoDuplas[chave2].jogos += 1;\n      if (g1 > g2) {\n        historicoDuplas[chave1].pontos += 5;\n        historicoDuplas[chave1].jogosVencidos += 1;\n        historicoDuplas[chave1].gamesVencidos += g1;\n        historicoDuplas[chave1].gamesPerdidos += g2;\n        historicoDuplas[chave2].pontos += 2;\n        historicoDuplas[chave2].gamesVencidos += g2;\n        historicoDuplas[chave2].gamesPerdidos += g1;\n      } else {\n        historicoDuplas[chave2].pontos += 5;\n        historicoDuplas[chave2].jogosVencidos += 1;\n        historicoDuplas[chave2].gamesVencidos += g2;\n        historicoDuplas[chave2].gamesPerdidos += g1;\n        historicoDuplas[chave1].pontos += 2;\n        historicoDuplas[chave1].gamesVencidos += g1;\n        historicoDuplas[chave1].gamesPerdidos += g2;\n      }\n    });\n\n    updateTournamentField('historicoDuplas', historicoDuplas);\n    console.log('Histórico recalculado:', historicoDuplas);\n\n    const estatisticasDuplas = Object.values(historicoDuplas).map((dados) => {\n      const derrotas = dados.jogos - dados.jogosVencidos;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking =\n        currentTournament.ranking.find((r) => r.dupla.join('') === dados.dupla.join(''))?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        derrotas,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        posicaoRanking,\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n\n    const melhorCampanha = estatisticasDuplas.reduce(\n      (melhor, atual) => (atual.saldoGames > melhor.saldoGames ? atual : melhor),\n      estatisticasDuplas[0] || { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 }\n    );\n\n    console.log('Estatísticas finais:', estatisticasDuplas);\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha,\n    };\n  }, [currentTournament, updateTournamentField]);\n\n  const resetTournament = useCallback(() => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  }, []);\n\n  const add8Duplas = useCallback(() => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  }, [currentTournament, updateTournamentField]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'menu' && (\n          <MeusTorneios\n            tournaments={tournaments}\n            onSelectTournament={loadTournament}\n            onCreateNew={createNewTournament}\n            onDeleteTournament={handleDeleteTournament}\n            onImportTournaments={handleImportTournaments}\n          />\n        )}\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={currentTournament?.nome || ''}\n                  onChange={(e) =>\n                    updateTournamentField('nome', e.target.value.toUpperCase())\n                  }\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={currentTournament?.dataInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('dataInicio', e.target.value)\n                  }\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={currentTournament?.horaInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('horaInicio', e.target.value)\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button\n                  className=\"GerarChaves\"\n                  onClick={() => {\n                    try {\n                      const tournament = generateTournament(\n                        currentTournament.nome,\n                        currentTournament.duplas,\n                        currentTournament.dataInicio,\n                        currentTournament.horaInicio\n                      );\n                      setCurrentTournament(tournament);\n                      setTournaments(loadTournaments());\n                      setFaseAtual('grupos');\n                    } catch (error) {\n                      alert(error.message);\n                    }\n                  }}\n                >\n                  <img src={shuffleIcon} alt=\"Shuffle Icon\" className=\"shuffle-icon\" />\n                  Gerar Chaveamento\n                </button>\n                {currentTournament?.status === 'rascunho' && (\n                  <button className=\"iniciar-torneio\" onClick={startTournament}>\n                    <img src={tournamentsIcon} alt=\"Tournament Icon\" className=\"button-icon\" />\n                    Iniciar Torneio\n                  </button>\n                )}\n                <button className=\"homePage\" onClick={() => setFaseAtual('menu')}>\n                  <img src={folderIcon} alt=\"Folder Icon\" className=\"folder-icon\" />\n                  Meus Torneios\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n              </div>\n              <DuplasList\n                duplas={currentTournament?.duplas || []}\n                onAddDupla={addDupla}\n                onRemoveDupla={removeDupla}\n              />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos\n              grupos={currentTournament.grupos}\n              onUpdateGroups={(newGrupos) => updateTournamentField('grupos', newGrupos)}\n            />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {currentTournament.grupos.map((grupo) => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) =>\n                  !jogo.submetido ||\n                  jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map((j) => j.rodada))\n              )}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n              onAvancarParaFinal={encerrarFaseEliminatoria}\n            />\n            <button onClick={() => encerrarFaseEliminatoria(currentTournament.jogosEliminatoria)}>\n              Encerrar Etapa\n            </button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {currentTournament.jogosEliminatoria\n              .filter((jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')\n              .every((jogo) => jogo.submetido) && (\n                <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n              )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(\n                currentTournament.jogosEliminatoria.filter(\n                  (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n                )\n              )}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLAS</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentTournament.ranking.map((posição, index) => {\n                  let medalha = '';\n                  let color = '#000';\n                  if (posição.lugar === 1) {\n                    medalha = '🥇';\n                    color = 'gold';\n                  } else if (posição.lugar === 2) {\n                    medalha = '🥈';\n                    color = 'silver';\n                  } else if (posição.lugar === 3) {\n                    medalha = '🥉';\n                    color = 'brown';\n                  }\n                  return (\n                    <tr key={index}>\n                      <td style={{ color }}>{medalha} {posição.lugar}º Colocado</td>\n                      <td>{posição.dupla.join(' & ')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <div className=\"relatorio-estatisticas\">\n              <h3>Estatísticas Gerais do Torneio</h3>\n              {(() => {\n                const { totalPartidas, totalGames, estatisticasDuplas, melhorCampanha } =\n                  gerarRelatorioEstatisticas();\n                return (\n                  <>\n                    <p><strong>Total de Partidas Disputadas:</strong> {totalPartidas}</p>\n                    <p><strong>Total de Games Disputados:</strong> {totalGames}</p>\n                    <p>\n                      <strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (\n                      Saldo de Games: {melhorCampanha.saldoGames}, {melhorCampanha.vitorias} vitórias em{' '}\n                      {melhorCampanha.jogos} jogos)\n                    </p>\n                    <h4>Estatísticas por Dupla</h4>\n                    {estatisticasDuplas.length > 0 ? (\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>POSIÇÃO</th>\n                            <th>DUPLA</th>\n                            <th>PARTIDAS</th>\n                            <th>VITÓRIAS</th>\n                            <th>DERROTAS</th>\n                            <th>GAMES (V/P)</th>\n                            <th>SALDO GAMES</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {estatisticasDuplas.map((dupla, index) => (\n                            <tr key={index}>\n                              <td>{dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'}</td>\n                              <td>{dupla.dupla}</td>\n                              <td>{dupla.jogos}</td>\n                              <td>{dupla.vitorias}</td>\n                              <td>{dupla.derrotas}</td>\n                              <td>{dupla.gamesVencidos}/{dupla.gamesPerdidos}</td>\n                              <td>{dupla.saldoGames}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    ) : (\n                      <p>Nenhuma estatística disponível para as duplas.</p>\n                    )}\n\n                    <div className=\"historico-jogos\">\n                      <h4>Histórico de Jogos</h4>\n                      <h5>Fase de Grupos</h5>\n                      {currentTournament.grupos.map((grupo) => (\n                        <div key={`grupo-${grupo.id}`}>\n                          <h6>Grupo {grupo.id + 1}</h6>\n                          <table>\n                            <thead>\n                              <tr>\n                                <th>Jogo</th>\n                                <th>Dupla 1</th>\n                                <th>Placar</th>\n                                <th>Dupla 2</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {grupo.jogos\n                                .filter((jogo) => jogo.submetido)\n                                .map((jogo, index) => (\n                                  <tr key={index}>\n                                    <td>{index + 1}</td>\n                                    <td>{jogo.dupla1.join(' & ')}</td>\n                                    <td>{jogo.placar}</td>\n                                    <td>{jogo.dupla2.join(' & ')}</td>\n                                  </tr>\n                                ))}\n                            </tbody>\n                          </table>\n                        </div>\n                      ))}\n\n                      <h5>Fase Eliminatória</h5>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Jogo</th>\n                            <th>Dupla 1</th>\n                            <th>Placar</th>\n                            <th>Dupla 2</th>\n                            <th>Fase</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {currentTournament.jogosEliminatoria\n                            .filter((jogo) => jogo.submetido && jogo.fase !== 'Final' && jogo.fase !== 'Disputa 3º Lugar')\n                            .map((jogo, index) => (\n                              <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{jogo.dupla1.join(' & ')}</td>\n                                <td>{jogo.placar}</td>\n                                <td>{jogo.dupla2.join(' & ')}</td>\n                                <td>{jogo.fase}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n\n                      <h5>Fase Final</h5>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Jogo</th>\n                            <th>Dupla 1</th>\n                            <th>Placar</th>\n                            <th>Dupla 2</th>\n                            <th>Fase</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {currentTournament.jogosEliminatoria\n                            .filter((jogo) => jogo.submetido && (jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))\n                            .map((jogo, index) => (\n                              <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{jogo.dupla1.join(' & ')}</td>\n                                <td>{jogo.placar}</td>\n                                <td>{jogo.dupla2.join(' & ')}</td>\n                                <td>{jogo.fase}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n                    </div>\n\n                    <p>Torneio Finalizado em {new Date().toLocaleString('pt-BR')}!</p>\n                    <button onClick={resetTournament} className=\"novo-torneio-btn\">\n                      Início\n                    </button>\n                  </>\n                );\n              })()}\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}