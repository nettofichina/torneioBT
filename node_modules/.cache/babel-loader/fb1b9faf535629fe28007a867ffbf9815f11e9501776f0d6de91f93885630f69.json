{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [expandedRodadas, setExpandedRodadas] = useState({}); // Estado para controlar quais rodadas estão expandidas\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const toggleRodada = rodada => {\n    setExpandedRodadas(prevState => ({\n      ...prevState,\n      [rodada]: !prevState[rodada]\n    }));\n  };\n  const renderizarRodadaAcordeon = jogos => {\n    const rodadas = [...new Set(jogos.map(jogo => jogo.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const isExpanded = expandedRodadas[rodada] || false;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accordion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleRodada(rodada),\n          className: \"accordion-header\",\n          children: [jogosDaRodada[0].fase, \" \", isExpanded ? '▲' : '▼']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"accordion-content\",\n          children: /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n            jogos: jogosDaRodada.filter(j => !j.submetido),\n            onAtualizarPlacar: atualizarPlacarNaEliminatoria\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    let jogos = [];\n    let rodadas = Math.ceil(Math.log2(classificados.length));\n    for (let r = 1; r <= rodadas; r++) {\n      for (let i = 0; i < classificados.length; i += 2) {\n        let faseNome = '';\n        if (r === rodadas) faseNome = 'Final';else if (r === rodadas - 1) faseNome = 'Semifinal';else if (r === rodadas - 2) faseNome = 'Quartas de Final';else faseNome = `Rodada ${r}`;\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['BYE', ''],\n          placar: '',\n          submetido: false,\n          fase: faseNome,\n          rodada: r\n        });\n      }\n      classificados = classificados.filter((_, i) => i % 2 === 0); // Mantém apenas os vencedores\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      return prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n    });\n  };\n  const iniciarFinal = jogos => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([{\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final'\n      }, {\n        dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n        dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1] ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const renderizarRodadaAtual = jogos => {\n    let rodadaAtual = Math.min(...jogos.filter(j => !j.submetido).map(j => j.rodada));\n    if (!isFinite(rodadaAtual)) {\n      rodadaAtual = Math.max(...jogos.map(j => j.rodada)); // Se todos os jogos foram submetidos, pega a última rodada\n    }\n    const jogosDaRodadaAtual = jogos.filter(j => j.rodada === rodadaAtual && !j.submetido);\n    if (jogosDaRodadaAtual.length === 0) {\n      if (rodadaAtual === Math.max(...jogos.map(j => j.rodada))) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Todos os jogos desta fase foram submetidos. Aguardando avan\\xE7o para a pr\\xF3xima etapa.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 16\n        }, this);\n      }\n      return null; // Se não há jogos para mostrar, não renderiza nada\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: jogosDaRodadaAtual[0].fase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n        jogos: jogosDaRodadaAtual,\n        onAtualizarPlacar: atualizarPlacarNaEliminatoria\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), renderizarRodadaAcordeon(jogosEliminatoria), finalConfigurada && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setFaseAtual('final'),\n          children: \"Avan\\xE7ar para a Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' & ')]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Qol1mJ3mDXOiTHP4C6e+IDoQeRk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","expandedRodadas","setExpandedRodadas","toggleRodada","rodada","prevState","renderizarRodadaAcordeon","jogos","rodadas","Set","map","jogo","sort","a","b","jogosDaRodada","filter","j","isExpanded","className","children","onClick","fase","fileName","_jsxFileName","lineNumber","columnNumber","submetido","onAtualizarPlacar","atualizarPlacarNaEliminatoria","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","_","i","startTournament","length","duplasSorteadas","Math","random","gruposCriados","forEach","grupo","id","encerrarFaseGrupos","todosOsJogos","flatMap","classificados","join","iniciarFaseEliminatoria","ceil","log2","r","faseNome","push","dupla1","dupla2","placar","prevJogos","iniciarFinal","finalistas","set1","set2","split","Number","console","error","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","max","every","finalizarTorneio","final","find","terceiroLugar","vencedorFinal","perdedorFinal","terceiro","quarto","lugar","add8Duplas","newDuplas","renderizarRodadaAtual","min","isFinite","jogosDaRodadaAtual","onAddDupla","onRemoveDupla","onUpdateGroups","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [expandedRodadas, setExpandedRodadas] = useState({}); // Estado para controlar quais rodadas estão expandidas\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const toggleRodada = (rodada) => {\n    setExpandedRodadas(prevState => ({\n      ...prevState,\n      [rodada]: !prevState[rodada]\n    }));\n  };\n\n  const renderizarRodadaAcordeon = (jogos) => {\n    const rodadas = [...new Set(jogos.map(jogo => jogo.rodada))].sort((a, b) => a - b);\n\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const isExpanded = expandedRodadas[rodada] || false;\n\n      return (\n        <div key={rodada} className=\"accordion-item\">\n          <button onClick={() => toggleRodada(rodada)} className=\"accordion-header\">\n            {jogosDaRodada[0].fase} {isExpanded ? '▲' : '▼'}\n          </button>\n          {isExpanded && (\n            <div className=\"accordion-content\">\n              <FaseEliminatoria \n                jogos={jogosDaRodada.filter(j => !j.submetido)} \n                onAtualizarPlacar={atualizarPlacarNaEliminatoria} \n              />\n            </div>\n          )}\n        </div>\n      );\n    });\n  };\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    let jogos = [];\n    let rodadas = Math.ceil(Math.log2(classificados.length));\n\n    for (let r = 1; r <= rodadas; r++) {\n      for (let i = 0; i < classificados.length; i += 2) {\n        let faseNome = '';\n        if (r === rodadas) faseNome = 'Final';\n        else if (r === rodadas - 1) faseNome = 'Semifinal';\n        else if (r === rodadas - 2) faseNome = 'Quartas de Final';\n        else faseNome = `Rodada ${r}`;\n\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['BYE', ''],\n          placar: '',\n          submetido: false,\n          fase: faseNome,\n          rodada: r\n        });\n      }\n      classificados = classificados.filter((_, i) => i % 2 === 0); // Mantém apenas os vencedores\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      return prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([\n        {\n          dupla1: finalistas[0],\n          dupla2: finalistas[1],\n          placar: '',\n          submetido: false,\n          fase: 'Final'\n        },\n        {\n          dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n          dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n          placar: '',\n          submetido: false,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1]\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1]\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const renderizarRodadaAtual = (jogos) => {\n    let rodadaAtual = Math.min(...jogos.filter(j => !j.submetido).map(j => j.rodada));\n    if (!isFinite(rodadaAtual)) {\n      rodadaAtual = Math.max(...jogos.map(j => j.rodada)); // Se todos os jogos foram submetidos, pega a última rodada\n    }\n    const jogosDaRodadaAtual = jogos.filter(j => j.rodada === rodadaAtual && !j.submetido);\n  \n    if (jogosDaRodadaAtual.length === 0) {\n      if (rodadaAtual === Math.max(...jogos.map(j => j.rodada))) {\n        return <p>Todos os jogos desta fase foram submetidos. Aguardando avanço para a próxima etapa.</p>;\n      }\n      return null; // Se não há jogos para mostrar, não renderiza nada\n    }\n  \n    return (\n      <div>\n        <h3>{jogosDaRodadaAtual[0].fase}</h3>\n        <FaseEliminatoria \n          jogos={jogosDaRodadaAtual} \n          onAtualizarPlacar={atualizarPlacarNaEliminatoria} \n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button> {/* Botão temporário */}\n          </>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            {renderizarRodadaAcordeon(jogosEliminatoria)}\n            {finalConfigurada && (\n              <button onClick={() => setFaseAtual('final')}>Avançar para a Final</button>\n            )}\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal \n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')} \n              onAtualizarPlacar={atualizarPlacarNaFinal} \n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado && \n              <p>A disputa pelo 3º lugar está configurada!</p>\n            }\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <ul>\n              {ranking.map((posição, index) => (\n                <li key={index}>\n                  {posição.lugar}º Lugar: {posição.dupla.join(' & ')}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}