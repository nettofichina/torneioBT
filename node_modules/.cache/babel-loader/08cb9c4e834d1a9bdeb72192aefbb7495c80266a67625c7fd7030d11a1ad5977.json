{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport { saveTournament, loadTournaments, deleteTournament, generateTournament, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentTournament, setCurrentTournament] = useState(null); // Torneio atual\n  const [faseAtual, setFaseAtual] = useState('menu'); // Começa no menu \"Meus Torneios\"\n\n  // Carrega um torneio específico do localStorage\n  const loadTournament = nome => {\n    const tournaments = loadTournaments();\n    const tournament = tournaments[nome] || {\n      nome: '',\n      dataCriacao: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas'\n    };\n    setCurrentTournament(tournament);\n    setFaseAtual(tournament.faseAtual || 'duplas');\n  };\n\n  // Salva o torneio atual no localStorage\n  const saveCurrentTournament = () => {\n    if (currentTournament && currentTournament.nome) {\n      saveTournament({\n        ...currentTournament,\n        faseAtual\n      });\n    }\n  };\n\n  // Atualiza um campo específico do torneio atual e salva\n  const updateTournamentField = (field, value) => {\n    setCurrentTournament(prev => {\n      const updated = {\n        ...prev,\n        [field]: value\n      };\n      saveCurrentTournament(updated);\n      return updated;\n    });\n  };\n\n  // Cria um novo torneio vazio\n  const createNewTournament = () => {\n    setCurrentTournament({\n      nome: '',\n      dataCriacao: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas'\n    });\n    setFaseAtual('duplas');\n  };\n\n  // Adiciona uma dupla ao torneio atual\n  const addDupla = dupla => {\n    if (!(currentTournament !== null && currentTournament !== void 0 && currentTournament.duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1])))) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  };\n\n  // Remove uma dupla do torneio atual\n  const removeDupla = index => {\n    updateTournamentField('duplas', currentTournament.duplas.filter((_, i) => i !== index));\n  };\n\n  // Inicia o torneio (muda status para \"em andamento\")\n  const startTournament = () => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!currentTournament.nome || !currentTournament.dataInicio || !currentTournament.horaInicio) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    updateTournamentField('status', 'em andamento');\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  };\n\n  // Encerra a fase de grupos e avança para eliminatórias\n  const encerrarFaseGrupos = () => {\n    if (currentTournament.grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = currentTournament.grupos.flatMap(grupo => grupo.jogos);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      todosOsJogos.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      return novoHistorico;\n    });\n    if (currentTournament.duplas.length <= 5) {\n      const classificados = classificarDuplasPorDesempate(currentTournament.duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else if (currentTournament.duplas.length === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(currentTournament.grupos[0].duplas, currentTournament.grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(currentTournament.grupos[1].duplas, currentTournament.grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      updateTournamentField('jogosEliminatoria', semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      // Lógica existente para outros tamanhos de torneio\n      const classificadosPorGrupo = currentTournament.grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d.join('') === dupla.join('')));\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      if (currentTournament.duplas.length <= 11) {\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n        const jogosQuartas = [{\n          dupla1: [...duplasQuartas[0]],\n          dupla2: [...duplasQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }, {\n          dupla1: [...duplasQuartas[2]],\n          dupla2: [...duplasQuartas[3]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }];\n        updateTournamentField('jogosEliminatoria', jogosQuartas);\n        updateTournamentField('duplasBye', duplasByeLocal);\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n        updateTournamentField('jogosEliminatoria', jogosOitavas);\n        updateTournamentField('duplasBye', []);\n      }\n      setFaseAtual('eliminatória');\n    }\n    saveCurrentTournament();\n  };\n\n  // Atualiza placar na fase eliminatória\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j)]);\n      return;\n    }\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n      ...j,\n      placar,\n      submetido: true\n    } : j)]);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n        dupla: jogo.dupla1,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n        dupla: jogo.dupla2,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n\n  // Inicia a fase final\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  };\n\n  // Atualiza placar na fase final\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n      ...j,\n      placar,\n      submetido: true\n    } : j)]);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n        dupla: jogo.dupla1,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n        dupla: jogo.dupla2,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n\n  // Encerra a fase eliminatória\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !currentTournament.finalConfigurada) {\n      iniciarFinal(currentTournament.jogosEliminatoria);\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && currentTournament.duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      const semifinalMatches = [{\n        dupla1: [...currentTournament.duplasBye[0]],\n        dupla2: [...vencedoresQuartas[0]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: [...currentTournament.duplasBye[1]],\n        dupla2: [...vencedoresQuartas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n    saveCurrentTournament();\n  };\n\n  // Finaliza o torneio\n  const finalizarTorneio = () => {\n    const final = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    updateTournamentField('ranking', [{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  };\n\n  // Funções de renderização e relatórios (mantidas iguais, mas ajustadas para currentTournament)\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n            }).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 640,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 641,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 644,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const incrementoMinutos = idx * 30;\n            const dataHora = formatarDataHora(currentTournament.dataCriacao, incrementoMinutos);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 682,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 683,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 684,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 685,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 687,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 710,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 711,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 712,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 713,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 727,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 728,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 729,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 730,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 726,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [...currentTournament.grupos.flatMap(grupo => grupo.jogos), ...currentTournament.jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')].filter(jogo => jogo.submetido);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n    const estatisticasDuplas = Object.values(currentTournament.historicoDuplas).map(dados => {\n      var _currentTournament$ra;\n      const aproveitamento = dados.jogos > 0 ? (dados.jogosVencidos / dados.jogos * 100).toFixed(2) : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ((_currentTournament$ra = currentTournament.ranking.find(r => r.dupla.join('') === dados.dupla.join(''))) === null || _currentTournament$ra === void 0 ? void 0 : _currentTournament$ra.lugar) || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => {\n      return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n    }, estatisticasDuplas[0] || {\n      dupla: 'Nenhuma',\n      vitorias: 0,\n      jogos: 0,\n      saldoGames: 0\n    });\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n  const resetTournament = () => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  };\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    updateTournamentField('duplas', newDuplas);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: btConnectLogo,\n        alt: \"btConnect Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 830,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'menu' && /*#__PURE__*/_jsxDEV(MeusTorneios, {\n        onSelectTournament: loadTournament,\n        onCreateNew: createNewTournament\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 835,\n        columnNumber: 11\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 844,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.nome) || '',\n              onChange: e => updateTournamentField('nome', e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 845,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 855,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.dataInicio) || '',\n              onChange: e => updateTournamentField('dataInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 856,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 854,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 865,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.horaInicio) || '',\n              onChange: e => updateTournamentField('horaInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 866,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 876,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 875,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                try {\n                  const tournament = generateTournament(currentTournament.nome, currentTournament.duplas, currentTournament.dataInicio, currentTournament.horaInicio);\n                  setCurrentTournament(tournament);\n                  setFaseAtual('grupos');\n                } catch (error) {\n                  alert(error.message);\n                }\n              },\n              children: \"Gerar Chaveamento\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 880,\n              columnNumber: 17\n            }, this), (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.status) === 'rascunho' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: tournamentsIcon,\n                alt: \"Tournament Icon\",\n                className: \"button-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 900,\n                columnNumber: 21\n              }, this), \"Iniciar Torneio\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 899,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 908,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add27Duplas,\n              children: \"Adicionar 27 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 909,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setFaseAtual('menu'),\n              children: \"Voltar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: (currentTournament === null || currentTournament === void 0 ? void 0 : currentTournament.duplas) || [],\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 912,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: currentTournament.grupos,\n          onUpdateGroups: newGrupos => updateTournamentField('grupos', newGrupos)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 930,\n            columnNumber: 15\n          }, this), currentTournament.grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 939,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 952,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 961,\n          columnNumber: 13\n        }, this), currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 974,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 976,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 989,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 993,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"DUPLAS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 994,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 992,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 991,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: currentTournament.ranking.map((posição, index) => {\n              let medalha = '';\n              let color = '#000';\n              if (posição.lugar === 1) {\n                medalha = '🥇';\n                color = 'gold';\n              } else if (posição.lugar === 2) {\n                medalha = '🥈';\n                color = 'silver';\n              } else if (posição.lugar === 3) {\n                medalha = '🥉';\n                color = 'brown';\n              }\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color\n                  },\n                  children: [medalha, \" \", posição.lugar, \"\\xBA Colocado\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1013,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: posição.dupla.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1016,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1012,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 997,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 990,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relatorio-estatisticas\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Estat\\xEDsticas Gerais do Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1023,\n            columnNumber: 15\n          }, this), (() => {\n            const {\n              totalPartidas,\n              totalGames,\n              estatisticasDuplas,\n              melhorCampanha\n            } = gerarRelatorioEstatisticas();\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Partidas Disputadas:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1034,\n                  columnNumber: 23\n                }, this), ' ', totalPartidas]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1033,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Games Disputados:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1038,\n                  columnNumber: 23\n                }, this), \" \", totalGames]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1037,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Melhor Campanha:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1041,\n                  columnNumber: 23\n                }, this), \" \", melhorCampanha.dupla, \" ( Saldo de Games: \", melhorCampanha.saldoGames, \",\", ' ', melhorCampanha.vitorias, \" vit\\xF3rias em\", ' ', melhorCampanha.jogos, \" jogos)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1040,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Estat\\xEDsticas por Dupla\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1046,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"POSI\\xC7\\xC3O\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1050,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DUPLA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1051,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"PARTIDAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1052,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"VIT\\xD3RIAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1053,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"GAMES (V/P)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1054,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"SALDO GAMES\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1055,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"APROVEITAMENTO\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1056,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1049,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1048,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: estatisticasDuplas.map((dupla, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1062,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.dupla\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1067,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.jogos\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1068,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.vitorias\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1069,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.gamesVencidos, \"/\", dupla.gamesPerdidos]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1070,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.saldoGames\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1073,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.aproveitamento, \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1074,\n                      columnNumber: 29\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1061,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1059,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1047,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Torneio Finalizado em\", ' ', new Date().toLocaleString('pt-BR'), \"!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1079,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: resetTournament,\n                className: \"novo-torneio-btn\",\n                children: \"In\\xEDcio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1083,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true);\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 829,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bfTu3Ht/yK/OTsSN/UV+smd7jl0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","MeusTorneios","saveTournament","loadTournaments","deleteTournament","generateTournament","classificarDuplasPorDesempate","gameDay","btConnectLogo","tournamentsIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentTournament","setCurrentTournament","faseAtual","setFaseAtual","loadTournament","nome","tournaments","tournament","dataCriacao","dataInicio","horaInicio","duplas","grupos","jogosEliminatoria","finalConfigurada","terceiroLugarConfigurado","ranking","duplasBye","historicoDuplas","status","saveCurrentTournament","updateTournamentField","field","value","prev","updated","createNewTournament","addDupla","dupla","some","d","includes","alert","removeDupla","index","filter","_","i","startTournament","length","encerrarFaseGrupos","grupo","jogos","jogo","submetido","todosOsJogos","flatMap","novoHistorico","forEach","g1","g2","placar","split","map","Number","chave1","dupla1","join","chave2","dupla2","pontos","jogosVencidos","gamesVencidos","gamesPerdidos","classificados","rankingGrupo1","rankingGrupo2","semifinalMatches","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","dupla1Str","dupla2Str","rankingGeral","duplasByeLocal","duplasQuartas","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","j","iniciarFinal","semifinalGames","console","error","finalistas","set1","set2","perdedores","Math","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","Date","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","dia","String","getDate","padStart","mes","getMonth","hora","getHours","minuto","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","reduce","acc","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","sort","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","gerarRelatorioEstatisticas","totalPartidas","totalGames","estatisticasDuplas","Object","values","dados","_currentTournament$ra","aproveitamento","toFixed","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","resetTournament","add8Duplas","newDuplas","add27Duplas","src","alt","onSelectTournament","onCreateNew","type","onChange","e","target","toUpperCase","placeholder","onClick","message","onAddDupla","onRemoveDupla","onUpdateGroups","newGrupos","onAtualizarPlacar","onFinalizarTorneio","posição","medalha","color","style","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport {\n  saveTournament,\n  loadTournaments,\n  deleteTournament,\n  generateTournament,\n  classificarDuplasPorDesempate,\n} from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\n\nfunction App() {\n  const [currentTournament, setCurrentTournament] = useState(null); // Torneio atual\n  const [faseAtual, setFaseAtual] = useState('menu'); // Começa no menu \"Meus Torneios\"\n\n  // Carrega um torneio específico do localStorage\n  const loadTournament = (nome) => {\n    const tournaments = loadTournaments();\n    const tournament = tournaments[nome] || {\n      nome: '',\n      dataCriacao: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas',\n    };\n    setCurrentTournament(tournament);\n    setFaseAtual(tournament.faseAtual || 'duplas');\n  };\n\n  // Salva o torneio atual no localStorage\n  const saveCurrentTournament = () => {\n    if (currentTournament && currentTournament.nome) {\n      saveTournament({ ...currentTournament, faseAtual });\n    }\n  };\n\n  // Atualiza um campo específico do torneio atual e salva\n  const updateTournamentField = (field, value) => {\n    setCurrentTournament((prev) => {\n      const updated = { ...prev, [field]: value };\n      saveCurrentTournament(updated);\n      return updated;\n    });\n  };\n\n\n  \n  // Cria um novo torneio vazio\n  const createNewTournament = () => {\n    setCurrentTournament({\n      nome: '',\n      dataCriacao: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas',\n    });\n    setFaseAtual('duplas');\n  };\n\n  // Adiciona uma dupla ao torneio atual\n  const addDupla = (dupla) => {\n    if (\n      !currentTournament?.duplas.some(\n        (d) => d.includes(dupla[0]) || d.includes(dupla[1])\n      )\n    ) {\n      updateTournamentField('duplas', [\n        ...currentTournament.duplas,\n        dupla,\n      ]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  };\n\n  // Remove uma dupla do torneio atual\n  const removeDupla = (index) => {\n    updateTournamentField(\n      'duplas',\n      currentTournament.duplas.filter((_, i) => i !== index)\n    );\n  };\n\n  // Inicia o torneio (muda status para \"em andamento\")\n  const startTournament = () => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (\n      !currentTournament.nome ||\n      !currentTournament.dataInicio ||\n      !currentTournament.horaInicio\n    ) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    updateTournamentField('status', 'em andamento');\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  };\n\n  // Encerra a fase de grupos e avança para eliminatórias\n  const encerrarFaseGrupos = () => {\n    if (\n      currentTournament.grupos.some((grupo) =>\n        grupo.jogos.some((jogo) => !jogo.submetido)\n      )\n    ) {\n      alert(\n        'Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.'\n      );\n      return;\n    }\n\n    const todosOsJogos = currentTournament.grupos.flatMap(\n      (grupo) => grupo.jogos\n    );\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach((jogo) => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      return novoHistorico;\n    });\n\n    if (currentTournament.duplas.length <= 5) {\n      const classificados = classificarDuplasPorDesempate(\n        currentTournament.duplas,\n        todosOsJogos\n      );\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else if (currentTournament.duplas.length === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(\n        currentTournament.grupos[0].duplas,\n        currentTournament.grupos[0].jogos\n      );\n      const rankingGrupo2 = classificarDuplasPorDesempate(\n        currentTournament.grupos[1].duplas,\n        currentTournament.grupos[1].jogos\n      );\n      const semifinalMatches = [\n        {\n          dupla1: rankingGrupo1[0],\n          dupla2: rankingGrupo2[1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n        {\n          dupla1: rankingGrupo2[0],\n          dupla2: rankingGrupo1[1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      // Lógica existente para outros tamanhos de torneio\n      const classificadosPorGrupo = currentTournament.grupos\n        .map((grupo) => {\n          return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(\n            0,\n            2\n          );\n        })\n        .flat();\n      const duplasUnicas = classificadosPorGrupo.filter(\n        (dupla, index, self) =>\n          index === self.findIndex((d) => d.join('') === dupla.join(''))\n      );\n      const jogosClassificados = todosOsJogos.filter((jogo) => {\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return (\n          duplasUnicas.some((d) => d.join('') === dupla1Str) &&\n          duplasUnicas.some((d) => d.join('') === dupla2Str)\n        );\n      });\n      const rankingGeral = classificarDuplasPorDesempate(\n        duplasUnicas,\n        jogosClassificados\n      );\n\n      if (currentTournament.duplas.length <= 11) {\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n        const jogosQuartas = [\n          {\n            dupla1: [...duplasQuartas[0]],\n            dupla2: [...duplasQuartas[1]],\n            placar: '',\n            submetido: false,\n            fase: 'Quartas de Final',\n            rodada: 1,\n          },\n          {\n            dupla1: [...duplasQuartas[2]],\n            dupla2: [...duplasQuartas[3]],\n            placar: '',\n            submetido: false,\n            fase: 'Quartas de Final',\n            rodada: 1,\n          },\n        ];\n        updateTournamentField('jogosEliminatoria', jogosQuartas);\n        updateTournamentField('duplasBye', duplasByeLocal);\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1,\n          });\n        }\n        updateTournamentField('jogosEliminatoria', jogosOitavas);\n        updateTournamentField('duplasBye', []);\n      }\n      setFaseAtual('eliminatória');\n    }\n    saveCurrentTournament();\n  };\n\n  // Atualiza placar na fase eliminatória\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        ),\n      ]);\n      return;\n    }\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria.map((j) =>\n        j === jogo ? { ...j, placar, submetido: true } : j\n      ),\n    ]);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1])\n        novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      if (!novoHistorico[chave2])\n        novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n\n  // Inicia a fase final\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter((jogo) => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria,\n      {\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n      {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n    ]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  };\n\n  // Atualiza placar na fase final\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria.map((j) =>\n        j === jogo ? { ...j, placar, submetido: true } : j\n      ),\n    ]);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1])\n        novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      if (!novoHistorico[chave2])\n        novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n\n  // Encerra a fase eliminatória\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(\n      ...currentTournament.jogosEliminatoria.map((j) => j.rodada)\n    );\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(\n      (j) => j.rodada === rodadaAtual\n    );\n\n    if (!jogosRodadaAtual.every((j) => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    if (\n      jogosRodadaAtual.some((j) => j.fase === 'Semifinal') &&\n      !currentTournament.finalConfigurada\n    ) {\n      iniciarFinal(currentTournament.jogosEliminatoria);\n    } else if (\n      jogosRodadaAtual.some((j) => j.fase === 'Quartas de Final') &&\n      currentTournament.duplas.length <= 11\n    ) {\n      const vencedoresQuartas = jogosRodadaAtual.map((jogo) => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      const semifinalMatches = [\n        {\n          dupla1: [...currentTournament.duplasBye[0]],\n          dupla2: [...vencedoresQuartas[0]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n        {\n          dupla1: [...currentTournament.duplasBye[1]],\n          dupla2: [...vencedoresQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.filter((j) => j.rodada < rodadaAtual + 1),\n        ...semifinalMatches,\n      ]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n    saveCurrentTournament();\n  };\n\n  // Finaliza o torneio\n  const finalizarTorneio = () => {\n    const final = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Final'\n    );\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Disputa 3º Lugar'\n    );\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] =\n      finalSet1 > finalSet2\n        ? [final.dupla1, final.dupla2]\n        : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar\n      .split('-')\n      .map(Number);\n    const [terceiro, quarto] =\n      terceiroSet1 > terceiroSet2\n        ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n        : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    updateTournamentField('ranking', [\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto },\n    ]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  };\n\n  // Funções de renderização e relatórios (mantidas iguais, mas ajustadas para currentTournament)\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every((jogo) => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = [\n        'DOM',\n        'SEG',\n        'TER',\n        'QUA',\n        'QUI',\n        'SEX',\n        'SAB',\n      ];\n      const meses = [\n        'JAN',\n        'FEV',\n        'MAR',\n        'ABR',\n        'MAI',\n        'JUN',\n        'JUL',\n        'AGO',\n        'SET',\n        'OUT',\n        'NOV',\n        'DEZ',\n      ];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(\n                (j) =>\n                  j.dupla1.join('') === dupla.join('') ||\n                  j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('')\n                  ? g1 > g2\n                  : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('')\n                  ? g1 < g2\n                  : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar\n                ? jogo.placar.split('-').map(Number)\n                : [0, 0];\n              const vencedor = jogo.placar\n                ? g1 > g2\n                  ? jogo.dupla1.join(' & ')\n                  : g2 > g1\n                  ? jogo.dupla2.join(' & ')\n                  : 'Empate'\n                : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(\n                currentTournament.dataCriacao,\n                incrementoMinutos\n              );\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map((j) => j.rodada))].sort(\n      (a, b) => a - b\n    );\n    return rodadas.map((rodada) => {\n      const jogosDaRodada = jogos.filter((j) => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor =\n                  jogo.placar && jogo.submetido\n                    ? parseInt(jogo.placar.split('-')[0]) >\n                      parseInt(jogo.placar.split('-')[1])\n                      ? jogo.dupla1.join(' & ')\n                      : jogo.dupla2.join(' & ')\n                    : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [\n      ...currentTournament.grupos.flatMap((grupo) => grupo.jogos),\n      ...currentTournament.jogosEliminatoria.filter(\n        (jogo) => jogo.placar !== 'BYE'\n      ),\n    ].filter((jogo) => jogo.submetido);\n\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n\n    const estatisticasDuplas = Object.values(\n      currentTournament.historicoDuplas\n    ).map((dados) => {\n      const aproveitamento =\n        dados.jogos > 0\n          ? ((dados.jogosVencidos / dados.jogos) * 100).toFixed(2)\n          : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = currentTournament.ranking.find((r) =>\n        r.dupla.join('') === dados.dupla.join('')\n      )?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking,\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-')\n        return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n\n    const melhorCampanha = estatisticasDuplas.reduce(\n      (melhor, atual) => {\n        return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n      },\n      estatisticasDuplas[0] || {\n        dupla: 'Nenhuma',\n        vitorias: 0,\n        jogos: 0,\n        saldoGames: 0,\n      }\n    );\n\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha,\n    };\n  };\n\n  const resetTournament = () => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  };\n\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [\n      ...currentTournament.duplas,\n      ...newDuplas,\n    ]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    updateTournamentField('duplas', newDuplas);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'menu' && (\n          <MeusTorneios\n            onSelectTournament={loadTournament}\n            onCreateNew={createNewTournament}\n          />\n        )}\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={currentTournament?.nome || ''}\n                  onChange={(e) =>\n                    updateTournamentField('nome', e.target.value.toUpperCase())\n                  }\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={currentTournament?.dataInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('dataInicio', e.target.value)\n                  }\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={currentTournament?.horaInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('horaInicio', e.target.value)\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button\n                  onClick={() => {\n                    try {\n                      const tournament = generateTournament(\n                        currentTournament.nome,\n                        currentTournament.duplas,\n                        currentTournament.dataInicio,\n                        currentTournament.horaInicio\n                      );\n                      setCurrentTournament(tournament);\n                      setFaseAtual('grupos');\n                    } catch (error) {\n                      alert(error.message);\n                    }\n                  }}\n                >\n                  Gerar Chaveamento\n                </button>\n                {currentTournament?.status === 'rascunho' && (\n                  <button className=\"iniciar-torneio\" onClick={startTournament}>\n                    <img\n                      src={tournamentsIcon}\n                      alt=\"Tournament Icon\"\n                      className=\"button-icon\"\n                    />\n                    Iniciar Torneio\n                  </button>\n                )}\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n                <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n                <button onClick={() => setFaseAtual('menu')}>Voltar</button>\n              </div>\n              <DuplasList\n                duplas={currentTournament?.duplas || []}\n                onAddDupla={addDupla}\n                onRemoveDupla={removeDupla}\n              />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos\n              grupos={currentTournament.grupos}\n              onUpdateGroups={(newGrupos) =>\n                updateTournamentField('grupos', newGrupos)\n              }\n            />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {currentTournament.grupos.map((grupo) =>\n                renderClassificacaoGrupo(grupo)\n              )}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) =>\n                  !jogo.submetido ||\n                  jogo.rodada ===\n                    Math.max(\n                      ...currentTournament.jogosEliminatoria.map((j) => j.rodada)\n                    )\n              )}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) =>\n                  jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {currentTournament.jogosEliminatoria\n              .filter(\n                (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )\n              .every((jogo) => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(\n                currentTournament.jogosEliminatoria.filter(\n                  (jogo) =>\n                    jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n                )\n              )}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLAS</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentTournament.ranking.map((posição, index) => {\n                  let medalha = '';\n                  let color = '#000';\n                  if (posição.lugar === 1) {\n                    medalha = '🥇';\n                    color = 'gold';\n                  } else if (posição.lugar === 2) {\n                    medalha = '🥈';\n                    color = 'silver';\n                  } else if (posição.lugar === 3) {\n                    medalha = '🥉';\n                    color = 'brown';\n                  }\n                  return (\n                    <tr key={index}>\n                      <td style={{ color }}>\n                        {medalha} {posição.lugar}º Colocado\n                      </td>\n                      <td>{posição.dupla.join(' & ')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <div className=\"relatorio-estatisticas\">\n              <h3>Estatísticas Gerais do Torneio</h3>\n              {(() => {\n                const {\n                  totalPartidas,\n                  totalGames,\n                  estatisticasDuplas,\n                  melhorCampanha,\n                } = gerarRelatorioEstatisticas();\n                return (\n                  <>\n                    <p>\n                      <strong>Total de Partidas Disputadas:</strong>{' '}\n                      {totalPartidas}\n                    </p>\n                    <p>\n                      <strong>Total de Games Disputados:</strong> {totalGames}\n                    </p>\n                    <p>\n                      <strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (\n                      Saldo de Games: {melhorCampanha.saldoGames},{' '}\n                      {melhorCampanha.vitorias} vitórias em{' '}\n                      {melhorCampanha.jogos} jogos)\n                    </p>\n                    <h4>Estatísticas por Dupla</h4>\n                    <table>\n                      <thead>\n                        <tr>\n                          <th>POSIÇÃO</th>\n                          <th>DUPLA</th>\n                          <th>PARTIDAS</th>\n                          <th>VITÓRIAS</th>\n                          <th>GAMES (V/P)</th>\n                          <th>SALDO GAMES</th>\n                          <th>APROVEITAMENTO</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {estatisticasDuplas.map((dupla, index) => (\n                          <tr key={index}>\n                            <td>\n                              {dupla.posicaoRanking !== '-'\n                                ? `${dupla.posicaoRanking}º`\n                                : '-'}\n                            </td>\n                            <td>{dupla.dupla}</td>\n                            <td>{dupla.jogos}</td>\n                            <td>{dupla.vitorias}</td>\n                            <td>\n                              {dupla.gamesVencidos}/{dupla.gamesPerdidos}\n                            </td>\n                            <td>{dupla.saldoGames}</td>\n                            <td>{dupla.aproveitamento}%</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                    <p>\n                      Torneio Finalizado em{' '}\n                      {new Date().toLocaleString('pt-BR')}!\n                    </p>\n                    <button\n                      onClick={resetTournament}\n                      className=\"novo-torneio-btn\"\n                    >\n                      Início\n                    </button>\n                  </>\n                );\n              })()}\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}