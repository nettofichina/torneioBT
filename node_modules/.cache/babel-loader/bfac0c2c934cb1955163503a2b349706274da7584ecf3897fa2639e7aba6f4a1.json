{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    let jogos = [];\n    if (classificados.length <= 8) {\n      // Para 6 a 8 duplas, semifinal direta\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal'\n        });\n      }\n    } else {\n      // Para mais de 8, você precisaria de lógica para criar uma chave completa\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['BYE', ''],\n          placar: '',\n          submetido: false,\n          fase: 'Rodada 1'\n        });\n      }\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n\n    // Verifica se todos os jogos da fase eliminatória foram submetidos\n    if (jogosEliminatoria.every(j => j.submetido)) {\n      iniciarFinal(jogosEliminatoria);\n    }\n  };\n  const iniciarFinal = jogos => {\n    const finalistas = jogos.map(jogo => {\n      if (jogo.fase === 'Semifinal') {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      }\n      return []; // Se não for semifinal, retorna uma dupla vazia para ignorar\n    }).filter(dupla => dupla.length > 0);\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([{\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final'\n      },\n      // Disputa pelo terceiro lugar\n      {\n        dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n        dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true); // Usando o estado aqui\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n    if (jogosEliminatoria.every(j => j.submetido)) {\n      finalizarTorneio();\n    }\n  };\n  const encerrarFaseEliminatoria = () => {\n    if (finalConfigurada) {\n      setFaseAtual('final'); // Avança para a fase final\n    } else {\n      // Verifica se todos os jogos da semifinal foram submetidos antes de mostrar o alerta\n      const semifinais = jogosEliminatoria.filter(jogo => jogo.fase === 'Semifinal');\n      if (semifinais.every(jogo => jogo.submetido)) {\n        setFinalConfigurada(true); // Configura a final se ainda não foi configurada\n        setFaseAtual('final'); // Avança para a fase final\n      } else {\n        alert('Todos os jogos da Semifinal devem ser submetidos antes de avançar.');\n      }\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1] ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria,\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' & ')]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IcfBMVlPILYAbK+VDrAiYF7cjaA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","gruposCriados","forEach","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","iniciarFaseEliminatoria","push","dupla1","dupla2","placar","fase","atualizarPlacarNaEliminatoria","prevJogos","map","j","every","iniciarFinal","finalistas","set1","set2","split","Number","console","error","atualizarPlacarNaFinal","finalizarTorneio","encerrarFaseEliminatoria","semifinais","final","find","terceiroLugar","vencedorFinal","perdedorFinal","terceiro","quarto","lugar","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddDupla","onRemoveDupla","onClick","onUpdateGroups","onAtualizarPlacar","FaseFinal","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    \n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    let jogos = [];\n    if (classificados.length <= 8) { // Para 6 a 8 duplas, semifinal direta\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal'\n        });\n      }\n    } else {\n      // Para mais de 8, você precisaria de lógica para criar uma chave completa\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['BYE', ''],\n          placar: '',\n          submetido: false,\n          fase: 'Rodada 1'\n        });\n      }\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => \n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n    \n    // Verifica se todos os jogos da fase eliminatória foram submetidos\n    if (jogosEliminatoria.every(j => j.submetido)) {\n      iniciarFinal(jogosEliminatoria);\n    }\n  };\n\n  const iniciarFinal = (jogos) => {\n    const finalistas = jogos.map(jogo => {\n      if (jogo.fase === 'Semifinal') {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      }\n      return []; // Se não for semifinal, retorna uma dupla vazia para ignorar\n    }).filter(dupla => dupla.length > 0);\n\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([\n        {\n          dupla1: finalistas[0],\n          dupla2: finalistas[1],\n          placar: '',\n          submetido: false,\n          fase: 'Final'\n        },\n        // Disputa pelo terceiro lugar\n        {\n          dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n          dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n          placar: '',\n          submetido: false,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true); // Usando o estado aqui\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => \n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n\n    if (jogosEliminatoria.every(j => j.submetido)) {\n      finalizarTorneio();\n    }\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    if (finalConfigurada) {\n      setFaseAtual('final'); // Avança para a fase final\n    } else {\n      // Verifica se todos os jogos da semifinal foram submetidos antes de mostrar o alerta\n      const semifinais = jogosEliminatoria.filter(jogo => jogo.fase === 'Semifinal');\n      if (semifinais.every(jogo => jogo.submetido)) {\n        setFinalConfigurada(true); // Configura a final se ainda não foi configurada\n        setFaseAtual('final'); // Avança para a fase final\n      } else {\n        alert('Todos os jogos da Semifinal devem ser submetidos antes de avançar.');\n      }\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] \n      ? [final.dupla1, final.dupla2] \n      : [final.dupla2, final.dupla1];\n\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1] \n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2] \n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i*2-1}`, `Jogador${i*2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button> {/* Botão temporário */}\n          </>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <FaseEliminatoria \n              jogos={jogosEliminatoria} \n              onAtualizarPlacar={atualizarPlacarNaEliminatoria} \n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal \n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')} \n              onAtualizarPlacar={atualizarPlacarNaFinal} \n              onFinalizarTorneio={finalizarTorneio}\n            />\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <ul>\n              {ranking.map((posição, index) => (\n                <li key={index}>\n                  {posição.lugar}º Lugar: {posição.dupla.join(' & ')}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}