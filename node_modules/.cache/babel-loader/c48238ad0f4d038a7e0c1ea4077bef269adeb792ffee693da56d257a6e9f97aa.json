{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseDeGrupos.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseDeGrupos = ({\n  grupos,\n  onAtualizarEstatisticas,\n  onUpdateGroups,\n  historicoJogos\n}) => {\n  _s();\n  const [gruposState, setGruposState] = useState(grupos);\n  useEffect(() => {\n    setGruposState(grupos);\n  }, [grupos]);\n  useEffect(() => {\n    if (onUpdateGroups) {\n      onUpdateGroups(gruposState);\n    }\n  }, [gruposState, onUpdateGroups]);\n\n  // Adicionar este useEffect para sincronização\n  useEffect(() => {\n    if (Array.isArray(historicoJogos)) {\n      gruposState.forEach(grupo => {\n        grupo.jogos.forEach(jogo => {\n          if (jogo.submetido && !historicoJogos.some(hj => hj.jogoIndex === jogo.jogoIndex)) {\n            onAtualizarEstatisticas({\n              ...jogo,\n              grupo: grupo.id,\n              fase: 'Fase de Grupos',\n              jogoIndex: grupo.id * 100 + jogo.jogoIndex\n            });\n          }\n        });\n      });\n    } else {\n      console.warn('historicoJogos is not an array or is undefined');\n    }\n  }, [gruposState, historicoJogos, onAtualizarEstatisticas]);\n  const handleSubmitScore = (placar, jogoIndex, grupoIndex) => {\n    const [set1, set2] = placar.split('-').map(Number);\n    const diferencaSets = Math.abs(set1 - set2);\n    const vencedor = set1 > set2 ? 'dupla1' : 'dupla2';\n    const perdedor = vencedor === 'dupla1' ? 'dupla2' : 'dupla1';\n    setGruposState(prevGrupos => {\n      const updatedGroups = prevGrupos.map(grupo => grupo.id === grupoIndex ? {\n        ...grupo,\n        jogos: grupo.jogos.map(jogo => jogo.jogoIndex === jogoIndex && !jogo.submetido ? {\n          ...jogo,\n          placar: placar,\n          submetido: true,\n          resultado: `${jogo[vencedor].join(' e ')} vs ${jogo[perdedor].join(' e ')}: ${placar} (Vencedor: ${jogo[vencedor].join(' e ')} | +${diferencaSets} sets. Perdedor: ${jogo[perdedor].join(' e ')} | -${diferencaSets} sets)`\n        } : jogo)\n      } : grupo);\n      console.log('Grupos após atualização:', updatedGroups);\n      return updatedGroups;\n    });\n\n    // Aqui a variável 'jogo' deve ser encontrada dentro do grupo\n    const grupo = gruposState.find(g => g.id === grupoIndex);\n    if (grupo) {\n      const jogo = grupo.jogos.find(j => j.jogoIndex === jogoIndex);\n      if (jogo) {\n        onAtualizarEstatisticas({\n          ...jogo,\n          placar: placar,\n          grupo: grupoIndex,\n          fase: 'Fase de Grupos',\n          jogoIndex: grupoIndex * 100 + jogoIndex,\n          resultado: `${jogo[vencedor].join(' e ')} vs ${jogo[perdedor].join(' e ')}: ${placar} (Vencedor: ${jogo[vencedor].join(' e ')} | +${diferencaSets} sets. Perdedor: ${jogo[perdedor].join(' e ')} | -${diferencaSets} sets)`\n        });\n      }\n    }\n  };\n\n  // Função para preencher e submeter todos os placares automaticamente com 6-2\n  const preencherTodosOsPlacares = () => {\n    setGruposState(prevGrupos => {\n      const newGroups = prevGrupos.map(grupo => ({\n        ...grupo,\n        jogos: grupo.jogos.map(jogo => {\n          if (!jogo.submetido) {\n            handleSubmitScore('6-2', jogo.jogoIndex, grupo.id);\n            return {\n              ...jogo,\n              placar: '6-2',\n              submetido: true\n            };\n          }\n          return jogo;\n        })\n      }));\n      console.log('Novos grupos após preenchimento:', newGroups);\n      return newGroups;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Fase de Grupos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), gruposState.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), grupo.jogos.map(jogo => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Jogo, {\n          jogo: jogo,\n          onSubmitScore: placar => handleSubmitScore(placar, jogo.jogoIndex, grupo.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this), jogo.resultado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: jogo.resultado\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 34\n        }, this)]\n      }, grupo.id * 100 + jogo.jogoIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this))]\n    }, grupo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: preencherTodosOsPlacares,\n      children: \"Preencher e Submeter Todos os Placar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(FaseDeGrupos, \"8PPGMBkMszYb8opBJPGBKuvgxrc=\");\n_c = FaseDeGrupos;\nexport default FaseDeGrupos;\nvar _c;\n$RefreshReg$(_c, \"FaseDeGrupos\");","map":{"version":3,"names":["React","useState","useEffect","Jogo","jsxDEV","_jsxDEV","FaseDeGrupos","grupos","onAtualizarEstatisticas","onUpdateGroups","historicoJogos","_s","gruposState","setGruposState","Array","isArray","forEach","grupo","jogos","jogo","submetido","some","hj","jogoIndex","id","fase","console","warn","handleSubmitScore","placar","grupoIndex","set1","set2","split","map","Number","diferencaSets","Math","abs","vencedor","perdedor","prevGrupos","updatedGroups","resultado","join","log","find","g","j","preencherTodosOsPlacares","newGroups","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmitScore","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseDeGrupos.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseDeGrupos = ({ grupos, onAtualizarEstatisticas, onUpdateGroups, historicoJogos }) => {\r\n  const [gruposState, setGruposState] = useState(grupos);\r\n\r\n  useEffect(() => {\r\n    setGruposState(grupos);\r\n  }, [grupos]);\r\n\r\n  useEffect(() => {\r\n    if (onUpdateGroups) {\r\n      onUpdateGroups(gruposState);\r\n    }\r\n  }, [gruposState, onUpdateGroups]);\r\n\r\n  // Adicionar este useEffect para sincronização\r\n  useEffect(() => {\r\n    if (Array.isArray(historicoJogos)) {\r\n      gruposState.forEach(grupo => {\r\n        grupo.jogos.forEach(jogo => {\r\n          if (jogo.submetido && !historicoJogos.some(hj => hj.jogoIndex === jogo.jogoIndex)) {\r\n            onAtualizarEstatisticas({\r\n              ...jogo,\r\n              grupo: grupo.id,\r\n              fase: 'Fase de Grupos',\r\n              jogoIndex: grupo.id * 100 + jogo.jogoIndex\r\n            });\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      console.warn('historicoJogos is not an array or is undefined');\r\n    }\r\n  }, [gruposState, historicoJogos, onAtualizarEstatisticas]);\r\n\r\n  const handleSubmitScore = (placar, jogoIndex, grupoIndex) => {\r\n    const [set1, set2] = placar.split('-').map(Number);\r\n    const diferencaSets = Math.abs(set1 - set2);\r\n    const vencedor = set1 > set2 ? 'dupla1' : 'dupla2';\r\n    const perdedor = vencedor === 'dupla1' ? 'dupla2' : 'dupla1';\r\n\r\n    setGruposState(prevGrupos => {\r\n      const updatedGroups = prevGrupos.map(grupo =>\r\n        grupo.id === grupoIndex ? {\r\n          ...grupo,\r\n          jogos: grupo.jogos.map(jogo =>\r\n            jogo.jogoIndex === jogoIndex && !jogo.submetido ? \r\n              { \r\n                ...jogo, \r\n                placar: placar, \r\n                submetido: true,\r\n                resultado: `${jogo[vencedor].join(' e ')} vs ${jogo[perdedor].join(' e ')}: ${placar} (Vencedor: ${jogo[vencedor].join(' e ')} | +${diferencaSets} sets. Perdedor: ${jogo[perdedor].join(' e ')} | -${diferencaSets} sets)`\r\n              } : jogo\r\n          )\r\n        } : grupo\r\n      );\r\n      console.log('Grupos após atualização:', updatedGroups);\r\n      return updatedGroups;\r\n    });\r\n\r\n    // Aqui a variável 'jogo' deve ser encontrada dentro do grupo\r\n    const grupo = gruposState.find(g => g.id === grupoIndex);\r\n    if (grupo) {\r\n      const jogo = grupo.jogos.find(j => j.jogoIndex === jogoIndex);\r\n      if (jogo) {\r\n        onAtualizarEstatisticas({ \r\n          ...jogo, \r\n          placar: placar, \r\n          grupo: grupoIndex, \r\n          fase: 'Fase de Grupos', \r\n          jogoIndex: grupoIndex * 100 + jogoIndex,\r\n          resultado: `${jogo[vencedor].join(' e ')} vs ${jogo[perdedor].join(' e ')}: ${placar} (Vencedor: ${jogo[vencedor].join(' e ')} | +${diferencaSets} sets. Perdedor: ${jogo[perdedor].join(' e ')} | -${diferencaSets} sets)`\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Função para preencher e submeter todos os placares automaticamente com 6-2\r\n  const preencherTodosOsPlacares = () => {\r\n    setGruposState(prevGrupos => {\r\n      const newGroups = prevGrupos.map(grupo => ({\r\n        ...grupo,\r\n        jogos: grupo.jogos.map(jogo => {\r\n          if (!jogo.submetido) {\r\n            handleSubmitScore('6-2', jogo.jogoIndex, grupo.id);\r\n            return { ...jogo, placar: '6-2', submetido: true };\r\n          }\r\n          return jogo;\r\n        })\r\n      }));\r\n      console.log('Novos grupos após preenchimento:', newGroups);\r\n      return newGroups;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Fase de Grupos</h2>\r\n      {gruposState.map(grupo => (\r\n        <div key={grupo.id}>\r\n          <h3>Grupo {grupo.id + 1}</h3>\r\n          {grupo.jogos.map(jogo => (\r\n            <div key={grupo.id * 100 + jogo.jogoIndex}>\r\n              <Jogo\r\n                jogo={jogo}\r\n                onSubmitScore={(placar) => handleSubmitScore(placar, jogo.jogoIndex, grupo.id)}\r\n              />\r\n              {jogo.resultado && <p>{jogo.resultado}</p>}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      {/* Botão temporário para preencher todos os placares com 6-2 */}\r\n      <button onClick={preencherTodosOsPlacares}>Preencher e Submeter Todos os Placar</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseDeGrupos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}