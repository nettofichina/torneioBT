{"ast":null,"code":"import _objectSpread from\"C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/utils/torneioUtils.js\nexport const classificarDuplasPorDesempate=(duplas,jogos)=>{const resultados=duplas.reduce((acc,dupla)=>{if(!dupla||!Array.isArray(dupla)||dupla.length!==2){console.error('Dupla inválida:',dupla);return acc;}acc[dupla.join('')]={dupla,pontos:0,saldoGames:0};return acc;},{});jogos.forEach(jogo=>{if(jogo.placar&&typeof jogo.placar==='string'&&jogo.placar.includes('-')&&jogo.dupla1&&jogo.dupla2&&Array.isArray(jogo.dupla1)&&Array.isArray(jogo.dupla2)){const[games1,games2]=jogo.placar.split('-').map(Number);if(isNaN(games1)||isNaN(games2)){console.error('Placar inválido ignorado:',jogo);return;}const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(resultados[chave1]&&resultados[chave2]){if(games1>games2){resultados[chave1].pontos+=5;resultados[chave2].pontos+=2;}else{resultados[chave2].pontos+=5;resultados[chave1].pontos+=2;}resultados[chave1].saldoGames+=games1-games2;resultados[chave2].saldoGames+=games2-games1;}else{console.error('Dupla não encontrada em resultados:',{chave1,chave2,jogo});}}else{console.error('Jogo inválido ignorado (detalhes):',JSON.stringify(jogo));}});return Object.values(resultados).sort((a,b)=>b.pontos-a.pontos||b.saldoGames-a.saldoGames).map(r=>r.dupla);};// Demais funções permanecem iguais (criarJogosParaGrupo, dividirGrupos, etc.)\nexport const criarJogosParaGrupo=(duplas,grupoId)=>{const jogos=[];for(let i=0;i<duplas.length;i++){for(let j=i+1;j<duplas.length;j++){jogos.push({dupla1:duplas[i],dupla2:duplas[j],placar:'',submetido:false,grupoId});}}return jogos;};export const dividirGrupos=duplas=>{let numGrupos;let grupos;if(duplas.length===10){numGrupos=2;// Mantém padrão\n}else if(duplas.length===14){numGrupos=4;// 14 duplas: 2 grupos de 4, 2 grupos de 3\ngrupos=[{id:0,duplas:duplas.slice(0,4)},// 4 duplas\n{id:1,duplas:duplas.slice(4,8)},// 4 duplas\n{id:2,duplas:duplas.slice(8,11)},// 3 duplas\n{id:3,duplas:duplas.slice(11,14)}// 3 duplas\n];}else if(duplas.length<=5){numGrupos=1;}else if(duplas.length<=8){numGrupos=2;}else if(duplas.length<=11){numGrupos=3;}else if(duplas.length<=17){numGrupos=5;}else if(duplas.length<=20){numGrupos=6;}else{numGrupos=Math.ceil(duplas.length/3);}if(!grupos){grupos=Array(numGrupos).fill().map((_,i)=>({id:i,duplas:duplas.slice(i*Math.ceil(duplas.length/numGrupos),(i+1)*Math.ceil(duplas.length/numGrupos))}));}return grupos.filter(grupo=>grupo.duplas.length>0);};export const classificarDuplas=grupos=>{let classificados=[];grupos.forEach(grupo=>{const duplasClassificadas=classificarDuplasPorDesempate(grupo.duplas,grupo.jogos);classificados.push({dupla:duplasClassificadas[0],grupoId:grupo.id},// 1º do grupo\n{dupla:duplasClassificadas[1],grupoId:grupo.id}// 2º do grupo\n);});console.log('Duplas classificadas para a fase eliminatória:',classificados);return classificados;};export const iniciarFaseEliminatoria=classificados=>{let totalDuplas=classificados.length;// 8\nlet rodadas=Math.ceil(Math.log2(totalDuplas));// 3\nlet proximoMultiplo=Math.pow(2,rodadas);// 8\nlet byes=proximoMultiplo-totalDuplas;// 0\nlet classificadosAjustados=[...classificados];// Separar primeiros e segundos colocados\nconst primeiros=classificadosAjustados.filter((c,i)=>i%2===0);// 1º de cada grupo\nconst segundos=classificadosAjustados.filter((c,i)=>i%2===1);// 2º de cada grupo\n// Embaralhar para variar os cruzamentos\nconst shuffleArray=array=>array.sort(()=>Math.random()-0.5);const primeirosShuffled=shuffleArray([...primeiros]);const segundosShuffled=shuffleArray([...segundos]);// Criar jogos garantindo que duplas do mesmo grupo não se enfrentem\nlet jogosRodada=[];for(let i=0;i<primeirosShuffled.length;i++){const primeiro=primeirosShuffled[i];const segundo=segundosShuffled[i];if(primeiro.grupoId===segundo.grupoId){// Troca o segundo com o próximo disponível de grupo diferente\nconst swapIndex=(i+1)%segundosShuffled.length;segundosShuffled[i]=segundosShuffled[swapIndex];segundosShuffled[swapIndex]=segundo;}jogosRodada.push({dupla1:primeiro.dupla,dupla2:segundosShuffled[i].dupla,placar:'',submetido:false,fase:totalDuplas<=2?'Final':totalDuplas<=4?'Semifinal':totalDuplas<=8?'Quartas de Final':'Oitavas de Final',rodada:1});}// Adicionar BYEs, se necessário (não aplica para 8 duplas)\nfor(let i=0;i<byes;i++){jogosRodada.push({dupla1:classificadosAjustados[classificadosAjustados.length-byes+i].dupla,dupla2:['BYE',''],placar:'',submetido:false,fase:totalDuplas<=2?'Final':totalDuplas<=4?'Semifinal':totalDuplas<=8?'Quartas de Final':'Oitavas de Final',rodada:1});}return jogosRodada;};export const avancarRodadaEliminatoria=jogosRodadaAtual=>{let vencedores=jogosRodadaAtual.map(jogo=>{const[score1,score2]=jogo.placar.split('-').map(Number);if(jogo.dupla2[0]==='BYE')return jogo.dupla1;return score1>score2?jogo.dupla1:jogo.dupla2;});let rodadasTotal=Math.ceil(Math.log2(vencedores.length));let novaFaseNome=['Final','Semifinal','Quartas de Final'][rodadasTotal-1]||\"Rodada \".concat(jogosRodadaAtual[0].rodada+1);let novaRodada=[];for(let i=0;i<vencedores.length;i+=2){if(vencedores[i+1]){novaRodada.push({dupla1:vencedores[i],dupla2:vencedores[i+1],placar:'',submetido:false,fase:novaFaseNome,rodada:jogosRodadaAtual[0].rodada+1});}else{novaRodada.push({dupla1:vencedores[i],dupla2:['BYE',''],placar:'',submetido:false,fase:novaFaseNome,rodada:jogosRodadaAtual[0].rodada+1});}}return novaRodada;};export const generateTournament=(nome,duplas,dataInicio,horaInicio)=>{if(duplas.length<3){throw new Error('É necessário pelo menos 3 duplas para criar um torneio.');}if(!nome||!dataInicio||!horaInicio){throw new Error('Nome, data e hora de início são obrigatórios.');}const tournaments=loadTournaments();if(tournaments[nome]){throw new Error('Já existe um torneio com esse nome. Escolha outro nome.');}const duplasSorteadas=[...duplas].sort(()=>Math.random()-0.5);const gruposCriados=dividirGrupos(duplasSorteadas);const gruposComJogos=gruposCriados.map(grupo=>_objectSpread(_objectSpread({},grupo),{},{jogos:criarJogosParaGrupo(grupo.duplas,grupo.id)}));const[ano,mes,dia]=dataInicio.split('-').map(Number);const[hora,minuto]=horaInicio.split(':').map(Number);const dataTorneio=new Date(ano,mes-1,dia,hora,minuto).toISOString();const tournament={nome,dataCriacao:new Date().toISOString(),dataTorneio,dataInicio,horaInicio,duplas:duplasSorteadas,grupos:gruposComJogos,jogosEliminatoria:[],finalConfigurada:false,terceiroLugarConfigurado:false,ranking:[],duplasBye:[],historicoDuplas:duplasSorteadas.reduce((acc,dupla)=>{acc[dupla.join('')]={dupla,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};return acc;},{}),status:'rascunho',faseAtual:'duplas'};saveTournament(tournament);return tournament;};export const saveTournament=tournamentData=>{const tournaments=JSON.parse(localStorage.getItem('tournaments')||'{}');tournaments[tournamentData.nome]=tournamentData;localStorage.setItem('tournaments',JSON.stringify(tournaments));};export const loadTournaments=()=>{return JSON.parse(localStorage.getItem('tournaments')||'{}');};export const deleteTournament=nome=>{const tournaments=JSON.parse(localStorage.getItem('tournaments')||'{}');delete tournaments[nome];localStorage.setItem('tournaments',JSON.stringify(tournaments));};","map":{"version":3,"names":["classificarDuplasPorDesempate","duplas","jogos","resultados","reduce","acc","dupla","Array","isArray","length","console","error","join","pontos","saldoGames","forEach","jogo","placar","includes","dupla1","dupla2","games1","games2","split","map","Number","isNaN","chave1","chave2","JSON","stringify","Object","values","sort","a","b","r","criarJogosParaGrupo","grupoId","i","j","push","submetido","dividirGrupos","numGrupos","grupos","id","slice","Math","ceil","fill","_","filter","grupo","classificarDuplas","classificados","duplasClassificadas","log","iniciarFaseEliminatoria","totalDuplas","rodadas","log2","proximoMultiplo","pow","byes","classificadosAjustados","primeiros","c","segundos","shuffleArray","array","random","primeirosShuffled","segundosShuffled","jogosRodada","primeiro","segundo","swapIndex","fase","rodada","avancarRodadaEliminatoria","jogosRodadaAtual","vencedores","score1","score2","rodadasTotal","novaFaseNome","concat","novaRodada","generateTournament","nome","dataInicio","horaInicio","Error","tournaments","loadTournaments","duplasSorteadas","gruposCriados","gruposComJogos","_objectSpread","ano","mes","dia","hora","minuto","dataTorneio","Date","toISOString","tournament","dataCriacao","jogosEliminatoria","finalConfigurada","terceiroLugarConfigurado","ranking","duplasBye","historicoDuplas","jogosVencidos","gamesVencidos","gamesPerdidos","status","faseAtual","saveTournament","tournamentData","parse","localStorage","getItem","setItem","deleteTournament"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["// src/utils/torneioUtils.js\r\n\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  const resultados = duplas.reduce((acc, dupla) => {\r\n    if (!dupla || !Array.isArray(dupla) || dupla.length !== 2) {\r\n      console.error('Dupla inválida:', dupla);\r\n      return acc;\r\n    }\r\n    acc[dupla.join('')] = { dupla, pontos: 0, saldoGames: 0 };\r\n    return acc;\r\n  }, {});\r\n\r\n  jogos.forEach((jogo) => {\r\n    if (\r\n      jogo.placar &&\r\n      typeof jogo.placar === 'string' &&\r\n      jogo.placar.includes('-') &&\r\n      jogo.dupla1 &&\r\n      jogo.dupla2 &&\r\n      Array.isArray(jogo.dupla1) &&\r\n      Array.isArray(jogo.dupla2)\r\n    ) {\r\n      const [games1, games2] = jogo.placar.split('-').map(Number);\r\n      if (isNaN(games1) || isNaN(games2)) {\r\n        console.error('Placar inválido ignorado:', jogo);\r\n        return;\r\n      }\r\n      const chave1 = jogo.dupla1.join('');\r\n      const chave2 = jogo.dupla2.join('');\r\n\r\n      if (resultados[chave1] && resultados[chave2]) {\r\n        if (games1 > games2) {\r\n          resultados[chave1].pontos += 5;\r\n          resultados[chave2].pontos += 2;\r\n        } else {\r\n          resultados[chave2].pontos += 5;\r\n          resultados[chave1].pontos += 2;\r\n        }\r\n        resultados[chave1].saldoGames += games1 - games2;\r\n        resultados[chave2].saldoGames += games2 - games1;\r\n      } else {\r\n        console.error('Dupla não encontrada em resultados:', { chave1, chave2, jogo });\r\n      }\r\n    } else {\r\n      console.error('Jogo inválido ignorado (detalhes):', JSON.stringify(jogo));\r\n    }\r\n  });\r\n\r\n  return Object.values(resultados)\r\n    .sort((a, b) => b.pontos - a.pontos || b.saldoGames - a.saldoGames)\r\n    .map((r) => r.dupla);\r\n};\r\n\r\n// Demais funções permanecem iguais (criarJogosParaGrupo, dividirGrupos, etc.)\r\nexport const criarJogosParaGrupo = (duplas, grupoId) => {\r\n  const jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        grupoId,\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const dividirGrupos = (duplas) => {\r\n  let numGrupos;\r\n  let grupos;\r\n\r\n  if (duplas.length === 10) {\r\n    numGrupos = 2; // Mantém padrão\r\n  } else if (duplas.length === 14) {\r\n    numGrupos = 4; // 14 duplas: 2 grupos de 4, 2 grupos de 3\r\n    grupos = [\r\n      { id: 0, duplas: duplas.slice(0, 4) },   // 4 duplas\r\n      { id: 1, duplas: duplas.slice(4, 8) },   // 4 duplas\r\n      { id: 2, duplas: duplas.slice(8, 11) },  // 3 duplas\r\n      { id: 3, duplas: duplas.slice(11, 14) }, // 3 duplas\r\n    ];\r\n  } else if (duplas.length <= 5) {\r\n    numGrupos = 1;\r\n  } else if (duplas.length <= 8) {\r\n    numGrupos = 2;\r\n  } else if (duplas.length <= 11) {\r\n    numGrupos = 3;\r\n  } else if (duplas.length <= 17) {\r\n    numGrupos = 5;\r\n  } else if (duplas.length <= 20) {\r\n    numGrupos = 6;\r\n  } else {\r\n    numGrupos = Math.ceil(duplas.length / 3);\r\n  }\r\n\r\n  if (!grupos) {\r\n    grupos = Array(numGrupos)\r\n      .fill()\r\n      .map((_, i) => ({\r\n        id: i,\r\n        duplas: duplas.slice(\r\n          i * Math.ceil(duplas.length / numGrupos),\r\n          (i + 1) * Math.ceil(duplas.length / numGrupos)\r\n        ),\r\n      }));\r\n  }\r\n\r\n  return grupos.filter((grupo) => grupo.duplas.length > 0);\r\n};\r\n\r\nexport const classificarDuplas = (grupos) => {\r\n  let classificados = [];\r\n  grupos.forEach((grupo) => {\r\n    const duplasClassificadas = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\r\n    classificados.push(\r\n      { dupla: duplasClassificadas[0], grupoId: grupo.id }, // 1º do grupo\r\n      { dupla: duplasClassificadas[1], grupoId: grupo.id }  // 2º do grupo\r\n    );\r\n  });\r\n  console.log('Duplas classificadas para a fase eliminatória:', classificados);\r\n  return classificados;\r\n};\r\n\r\nexport const iniciarFaseEliminatoria = (classificados) => {\r\n  let totalDuplas = classificados.length; // 8\r\n  let rodadas = Math.ceil(Math.log2(totalDuplas)); // 3\r\n  let proximoMultiplo = Math.pow(2, rodadas); // 8\r\n  let byes = proximoMultiplo - totalDuplas; // 0\r\n  let classificadosAjustados = [...classificados];\r\n\r\n  // Separar primeiros e segundos colocados\r\n  const primeiros = classificadosAjustados.filter((c, i) => i % 2 === 0); // 1º de cada grupo\r\n  const segundos = classificadosAjustados.filter((c, i) => i % 2 === 1);  // 2º de cada grupo\r\n\r\n  // Embaralhar para variar os cruzamentos\r\n  const shuffleArray = (array) => array.sort(() => Math.random() - 0.5);\r\n  const primeirosShuffled = shuffleArray([...primeiros]);\r\n  const segundosShuffled = shuffleArray([...segundos]);\r\n\r\n  // Criar jogos garantindo que duplas do mesmo grupo não se enfrentem\r\n  let jogosRodada = [];\r\n  for (let i = 0; i < primeirosShuffled.length; i++) {\r\n    const primeiro = primeirosShuffled[i];\r\n    const segundo = segundosShuffled[i];\r\n    if (primeiro.grupoId === segundo.grupoId) {\r\n      // Troca o segundo com o próximo disponível de grupo diferente\r\n      const swapIndex = (i + 1) % segundosShuffled.length;\r\n      segundosShuffled[i] = segundosShuffled[swapIndex];\r\n      segundosShuffled[swapIndex] = segundo;\r\n    }\r\n    jogosRodada.push({\r\n      dupla1: primeiro.dupla,\r\n      dupla2: segundosShuffled[i].dupla,\r\n      placar: '',\r\n      submetido: false,\r\n      fase: totalDuplas <= 2 ? 'Final' : totalDuplas <= 4 ? 'Semifinal' : totalDuplas <= 8 ? 'Quartas de Final' : 'Oitavas de Final',\r\n      rodada: 1,\r\n    });\r\n  }\r\n\r\n  // Adicionar BYEs, se necessário (não aplica para 8 duplas)\r\n  for (let i = 0; i < byes; i++) {\r\n    jogosRodada.push({\r\n      dupla1: classificadosAjustados[classificadosAjustados.length - byes + i].dupla,\r\n      dupla2: ['BYE', ''],\r\n      placar: '',\r\n      submetido: false,\r\n      fase: totalDuplas <= 2 ? 'Final' : totalDuplas <= 4 ? 'Semifinal' : totalDuplas <= 8 ? 'Quartas de Final' : 'Oitavas de Final',\r\n      rodada: 1,\r\n    });\r\n  }\r\n\r\n  return jogosRodada;\r\n};\r\n\r\nexport const avancarRodadaEliminatoria = (jogosRodadaAtual) => {\r\n  let vencedores = jogosRodadaAtual.map((jogo) => {\r\n    const [score1, score2] = jogo.placar.split('-').map(Number);\r\n    if (jogo.dupla2[0] === 'BYE') return jogo.dupla1;\r\n    return score1 > score2 ? jogo.dupla1 : jogo.dupla2;\r\n  });\r\n\r\n  let rodadasTotal = Math.ceil(Math.log2(vencedores.length));\r\n  let novaFaseNome =\r\n    ['Final', 'Semifinal', 'Quartas de Final'][rodadasTotal - 1] ||\r\n    `Rodada ${jogosRodadaAtual[0].rodada + 1}`;\r\n\r\n  let novaRodada = [];\r\n  for (let i = 0; i < vencedores.length; i += 2) {\r\n    if (vencedores[i + 1]) {\r\n      novaRodada.push({\r\n        dupla1: vencedores[i],\r\n        dupla2: vencedores[i + 1],\r\n        placar: '',\r\n        submetido: false,\r\n        fase: novaFaseNome,\r\n        rodada: jogosRodadaAtual[0].rodada + 1,\r\n      });\r\n    } else {\r\n      novaRodada.push({\r\n        dupla1: vencedores[i],\r\n        dupla2: ['BYE', ''],\r\n        placar: '',\r\n        submetido: false,\r\n        fase: novaFaseNome,\r\n        rodada: jogosRodadaAtual[0].rodada + 1,\r\n      });\r\n    }\r\n  }\r\n  return novaRodada;\r\n};\r\n\r\nexport const generateTournament = (nome, duplas, dataInicio, horaInicio) => {\r\n  if (duplas.length < 3) {\r\n    throw new Error('É necessário pelo menos 3 duplas para criar um torneio.');\r\n  }\r\n  if (!nome || !dataInicio || !horaInicio) {\r\n    throw new Error('Nome, data e hora de início são obrigatórios.');\r\n  }\r\n\r\n  const tournaments = loadTournaments();\r\n  if (tournaments[nome]) {\r\n    throw new Error('Já existe um torneio com esse nome. Escolha outro nome.');\r\n  }\r\n\r\n  const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\r\n  const gruposCriados = dividirGrupos(duplasSorteadas);\r\n  const gruposComJogos = gruposCriados.map((grupo) => ({\r\n    ...grupo,\r\n    jogos: criarJogosParaGrupo(grupo.duplas, grupo.id),\r\n  }));\r\n\r\n  const [ano, mes, dia] = dataInicio.split('-').map(Number);\r\n  const [hora, minuto] = horaInicio.split(':').map(Number);\r\n  const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto).toISOString();\r\n\r\n  const tournament = {\r\n    nome,\r\n    dataCriacao: new Date().toISOString(),\r\n    dataTorneio,\r\n    dataInicio,\r\n    horaInicio,\r\n    duplas: duplasSorteadas,\r\n    grupos: gruposComJogos,\r\n    jogosEliminatoria: [],\r\n    finalConfigurada: false,\r\n    terceiroLugarConfigurado: false,\r\n    ranking: [],\r\n    duplasBye: [],\r\n    historicoDuplas: duplasSorteadas.reduce((acc, dupla) => {\r\n      acc[dupla.join('')] = {\r\n        dupla,\r\n        pontos: 0,\r\n        jogos: 0,\r\n        jogosVencidos: 0,\r\n        gamesVencidos: 0,\r\n        gamesPerdidos: 0,\r\n      };\r\n      return acc;\r\n    }, {}),\r\n    status: 'rascunho',\r\n    faseAtual: 'duplas',\r\n  };\r\n\r\n  saveTournament(tournament);\r\n  return tournament;\r\n};\r\n\r\nexport const saveTournament = (tournamentData) => {\r\n  const tournaments = JSON.parse(localStorage.getItem('tournaments') || '{}');\r\n  tournaments[tournamentData.nome] = tournamentData;\r\n  localStorage.setItem('tournaments', JSON.stringify(tournaments));\r\n};\r\n\r\nexport const loadTournaments = () => {\r\n  return JSON.parse(localStorage.getItem('tournaments') || '{}');\r\n};\r\n\r\nexport const deleteTournament = (nome) => {\r\n  const tournaments = JSON.parse(localStorage.getItem('tournaments') || '{}');\r\n  delete tournaments[nome];\r\n  localStorage.setItem('tournaments', JSON.stringify(tournaments));\r\n};"],"mappings":"4JAAA;AAEA,MAAO,MAAM,CAAAA,6BAA6B,CAAGA,CAACC,MAAM,CAAEC,KAAK,GAAK,CAC9D,KAAM,CAAAC,UAAU,CAAGF,MAAM,CAACG,MAAM,CAAC,CAACC,GAAG,CAAEC,KAAK,GAAK,CAC/C,GAAI,CAACA,KAAK,EAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAIA,KAAK,CAACG,MAAM,GAAK,CAAC,CAAE,CACzDC,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAEL,KAAK,CAAC,CACvC,MAAO,CAAAD,GAAG,CACZ,CACAA,GAAG,CAACC,KAAK,CAACM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAG,CAAEN,KAAK,CAAEO,MAAM,CAAE,CAAC,CAAEC,UAAU,CAAE,CAAE,CAAC,CACzD,MAAO,CAAAT,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CAENH,KAAK,CAACa,OAAO,CAAEC,IAAI,EAAK,CACtB,GACEA,IAAI,CAACC,MAAM,EACX,MAAO,CAAAD,IAAI,CAACC,MAAM,GAAK,QAAQ,EAC/BD,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,GAAG,CAAC,EACzBF,IAAI,CAACG,MAAM,EACXH,IAAI,CAACI,MAAM,EACXb,KAAK,CAACC,OAAO,CAACQ,IAAI,CAACG,MAAM,CAAC,EAC1BZ,KAAK,CAACC,OAAO,CAACQ,IAAI,CAACI,MAAM,CAAC,CAC1B,CACA,KAAM,CAACC,MAAM,CAAEC,MAAM,CAAC,CAAGN,IAAI,CAACC,MAAM,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC,CAC3D,GAAIC,KAAK,CAACL,MAAM,CAAC,EAAIK,KAAK,CAACJ,MAAM,CAAC,CAAE,CAClCZ,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAEK,IAAI,CAAC,CAChD,OACF,CACA,KAAM,CAAAW,MAAM,CAAGX,IAAI,CAACG,MAAM,CAACP,IAAI,CAAC,EAAE,CAAC,CACnC,KAAM,CAAAgB,MAAM,CAAGZ,IAAI,CAACI,MAAM,CAACR,IAAI,CAAC,EAAE,CAAC,CAEnC,GAAIT,UAAU,CAACwB,MAAM,CAAC,EAAIxB,UAAU,CAACyB,MAAM,CAAC,CAAE,CAC5C,GAAIP,MAAM,CAAGC,MAAM,CAAE,CACnBnB,UAAU,CAACwB,MAAM,CAAC,CAACd,MAAM,EAAI,CAAC,CAC9BV,UAAU,CAACyB,MAAM,CAAC,CAACf,MAAM,EAAI,CAAC,CAChC,CAAC,IAAM,CACLV,UAAU,CAACyB,MAAM,CAAC,CAACf,MAAM,EAAI,CAAC,CAC9BV,UAAU,CAACwB,MAAM,CAAC,CAACd,MAAM,EAAI,CAAC,CAChC,CACAV,UAAU,CAACwB,MAAM,CAAC,CAACb,UAAU,EAAIO,MAAM,CAAGC,MAAM,CAChDnB,UAAU,CAACyB,MAAM,CAAC,CAACd,UAAU,EAAIQ,MAAM,CAAGD,MAAM,CAClD,CAAC,IAAM,CACLX,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAE,CAAEgB,MAAM,CAAEC,MAAM,CAAEZ,IAAK,CAAC,CAAC,CAChF,CACF,CAAC,IAAM,CACLN,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAEkB,IAAI,CAACC,SAAS,CAACd,IAAI,CAAC,CAAC,CAC3E,CACF,CAAC,CAAC,CAEF,MAAO,CAAAe,MAAM,CAACC,MAAM,CAAC7B,UAAU,CAAC,CAC7B8B,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAACtB,MAAM,CAAGqB,CAAC,CAACrB,MAAM,EAAIsB,CAAC,CAACrB,UAAU,CAAGoB,CAAC,CAACpB,UAAU,CAAC,CAClEU,GAAG,CAAEY,CAAC,EAAKA,CAAC,CAAC9B,KAAK,CAAC,CACxB,CAAC,CAED;AACA,MAAO,MAAM,CAAA+B,mBAAmB,CAAGA,CAACpC,MAAM,CAAEqC,OAAO,GAAK,CACtD,KAAM,CAAApC,KAAK,CAAG,EAAE,CAChB,IAAK,GAAI,CAAAqC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGtC,MAAM,CAACQ,MAAM,CAAE8B,CAAC,EAAE,CAAE,CACtC,IAAK,GAAI,CAAAC,CAAC,CAAGD,CAAC,CAAG,CAAC,CAAEC,CAAC,CAAGvC,MAAM,CAACQ,MAAM,CAAE+B,CAAC,EAAE,CAAE,CAC1CtC,KAAK,CAACuC,IAAI,CAAC,CACTtB,MAAM,CAAElB,MAAM,CAACsC,CAAC,CAAC,CACjBnB,MAAM,CAAEnB,MAAM,CAACuC,CAAC,CAAC,CACjBvB,MAAM,CAAE,EAAE,CACVyB,SAAS,CAAE,KAAK,CAChBJ,OACF,CAAC,CAAC,CACJ,CACF,CACA,MAAO,CAAApC,KAAK,CACd,CAAC,CAED,MAAO,MAAM,CAAAyC,aAAa,CAAI1C,MAAM,EAAK,CACvC,GAAI,CAAA2C,SAAS,CACb,GAAI,CAAAC,MAAM,CAEV,GAAI5C,MAAM,CAACQ,MAAM,GAAK,EAAE,CAAE,CACxBmC,SAAS,CAAG,CAAC,CAAE;AACjB,CAAC,IAAM,IAAI3C,MAAM,CAACQ,MAAM,GAAK,EAAE,CAAE,CAC/BmC,SAAS,CAAG,CAAC,CAAE;AACfC,MAAM,CAAG,CACP,CAAEC,EAAE,CAAE,CAAC,CAAE7C,MAAM,CAAEA,MAAM,CAAC8C,KAAK,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAI;AACzC,CAAED,EAAE,CAAE,CAAC,CAAE7C,MAAM,CAAEA,MAAM,CAAC8C,KAAK,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAI;AACzC,CAAED,EAAE,CAAE,CAAC,CAAE7C,MAAM,CAAEA,MAAM,CAAC8C,KAAK,CAAC,CAAC,CAAE,EAAE,CAAE,CAAC,CAAG;AACzC,CAAED,EAAE,CAAE,CAAC,CAAE7C,MAAM,CAAEA,MAAM,CAAC8C,KAAK,CAAC,EAAE,CAAE,EAAE,CAAE,CAAG;AAAA,CAC1C,CACH,CAAC,IAAM,IAAI9C,MAAM,CAACQ,MAAM,EAAI,CAAC,CAAE,CAC7BmC,SAAS,CAAG,CAAC,CACf,CAAC,IAAM,IAAI3C,MAAM,CAACQ,MAAM,EAAI,CAAC,CAAE,CAC7BmC,SAAS,CAAG,CAAC,CACf,CAAC,IAAM,IAAI3C,MAAM,CAACQ,MAAM,EAAI,EAAE,CAAE,CAC9BmC,SAAS,CAAG,CAAC,CACf,CAAC,IAAM,IAAI3C,MAAM,CAACQ,MAAM,EAAI,EAAE,CAAE,CAC9BmC,SAAS,CAAG,CAAC,CACf,CAAC,IAAM,IAAI3C,MAAM,CAACQ,MAAM,EAAI,EAAE,CAAE,CAC9BmC,SAAS,CAAG,CAAC,CACf,CAAC,IAAM,CACLA,SAAS,CAAGI,IAAI,CAACC,IAAI,CAAChD,MAAM,CAACQ,MAAM,CAAG,CAAC,CAAC,CAC1C,CAEA,GAAI,CAACoC,MAAM,CAAE,CACXA,MAAM,CAAGtC,KAAK,CAACqC,SAAS,CAAC,CACtBM,IAAI,CAAC,CAAC,CACN1B,GAAG,CAAC,CAAC2B,CAAC,CAAEZ,CAAC,IAAM,CACdO,EAAE,CAAEP,CAAC,CACLtC,MAAM,CAAEA,MAAM,CAAC8C,KAAK,CAClBR,CAAC,CAAGS,IAAI,CAACC,IAAI,CAAChD,MAAM,CAACQ,MAAM,CAAGmC,SAAS,CAAC,CACxC,CAACL,CAAC,CAAG,CAAC,EAAIS,IAAI,CAACC,IAAI,CAAChD,MAAM,CAACQ,MAAM,CAAGmC,SAAS,CAC/C,CACF,CAAC,CAAC,CAAC,CACP,CAEA,MAAO,CAAAC,MAAM,CAACO,MAAM,CAAEC,KAAK,EAAKA,KAAK,CAACpD,MAAM,CAACQ,MAAM,CAAG,CAAC,CAAC,CAC1D,CAAC,CAED,MAAO,MAAM,CAAA6C,iBAAiB,CAAIT,MAAM,EAAK,CAC3C,GAAI,CAAAU,aAAa,CAAG,EAAE,CACtBV,MAAM,CAAC9B,OAAO,CAAEsC,KAAK,EAAK,CACxB,KAAM,CAAAG,mBAAmB,CAAGxD,6BAA6B,CAACqD,KAAK,CAACpD,MAAM,CAAEoD,KAAK,CAACnD,KAAK,CAAC,CACpFqD,aAAa,CAACd,IAAI,CAChB,CAAEnC,KAAK,CAAEkD,mBAAmB,CAAC,CAAC,CAAC,CAAElB,OAAO,CAAEe,KAAK,CAACP,EAAG,CAAC,CAAE;AACtD,CAAExC,KAAK,CAAEkD,mBAAmB,CAAC,CAAC,CAAC,CAAElB,OAAO,CAAEe,KAAK,CAACP,EAAG,CAAG;AACxD,CAAC,CACH,CAAC,CAAC,CACFpC,OAAO,CAAC+C,GAAG,CAAC,gDAAgD,CAAEF,aAAa,CAAC,CAC5E,MAAO,CAAAA,aAAa,CACtB,CAAC,CAED,MAAO,MAAM,CAAAG,uBAAuB,CAAIH,aAAa,EAAK,CACxD,GAAI,CAAAI,WAAW,CAAGJ,aAAa,CAAC9C,MAAM,CAAE;AACxC,GAAI,CAAAmD,OAAO,CAAGZ,IAAI,CAACC,IAAI,CAACD,IAAI,CAACa,IAAI,CAACF,WAAW,CAAC,CAAC,CAAE;AACjD,GAAI,CAAAG,eAAe,CAAGd,IAAI,CAACe,GAAG,CAAC,CAAC,CAAEH,OAAO,CAAC,CAAE;AAC5C,GAAI,CAAAI,IAAI,CAAGF,eAAe,CAAGH,WAAW,CAAE;AAC1C,GAAI,CAAAM,sBAAsB,CAAG,CAAC,GAAGV,aAAa,CAAC,CAE/C;AACA,KAAM,CAAAW,SAAS,CAAGD,sBAAsB,CAACb,MAAM,CAAC,CAACe,CAAC,CAAE5B,CAAC,GAAKA,CAAC,CAAG,CAAC,GAAK,CAAC,CAAC,CAAE;AACxE,KAAM,CAAA6B,QAAQ,CAAGH,sBAAsB,CAACb,MAAM,CAAC,CAACe,CAAC,CAAE5B,CAAC,GAAKA,CAAC,CAAG,CAAC,GAAK,CAAC,CAAC,CAAG;AAExE;AACA,KAAM,CAAA8B,YAAY,CAAIC,KAAK,EAAKA,KAAK,CAACrC,IAAI,CAAC,IAAMe,IAAI,CAACuB,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CACrE,KAAM,CAAAC,iBAAiB,CAAGH,YAAY,CAAC,CAAC,GAAGH,SAAS,CAAC,CAAC,CACtD,KAAM,CAAAO,gBAAgB,CAAGJ,YAAY,CAAC,CAAC,GAAGD,QAAQ,CAAC,CAAC,CAEpD;AACA,GAAI,CAAAM,WAAW,CAAG,EAAE,CACpB,IAAK,GAAI,CAAAnC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGiC,iBAAiB,CAAC/D,MAAM,CAAE8B,CAAC,EAAE,CAAE,CACjD,KAAM,CAAAoC,QAAQ,CAAGH,iBAAiB,CAACjC,CAAC,CAAC,CACrC,KAAM,CAAAqC,OAAO,CAAGH,gBAAgB,CAAClC,CAAC,CAAC,CACnC,GAAIoC,QAAQ,CAACrC,OAAO,GAAKsC,OAAO,CAACtC,OAAO,CAAE,CACxC;AACA,KAAM,CAAAuC,SAAS,CAAG,CAACtC,CAAC,CAAG,CAAC,EAAIkC,gBAAgB,CAAChE,MAAM,CACnDgE,gBAAgB,CAAClC,CAAC,CAAC,CAAGkC,gBAAgB,CAACI,SAAS,CAAC,CACjDJ,gBAAgB,CAACI,SAAS,CAAC,CAAGD,OAAO,CACvC,CACAF,WAAW,CAACjC,IAAI,CAAC,CACftB,MAAM,CAAEwD,QAAQ,CAACrE,KAAK,CACtBc,MAAM,CAAEqD,gBAAgB,CAAClC,CAAC,CAAC,CAACjC,KAAK,CACjCW,MAAM,CAAE,EAAE,CACVyB,SAAS,CAAE,KAAK,CAChBoC,IAAI,CAAEnB,WAAW,EAAI,CAAC,CAAG,OAAO,CAAGA,WAAW,EAAI,CAAC,CAAG,WAAW,CAAGA,WAAW,EAAI,CAAC,CAAG,kBAAkB,CAAG,kBAAkB,CAC9HoB,MAAM,CAAE,CACV,CAAC,CAAC,CACJ,CAEA;AACA,IAAK,GAAI,CAAAxC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGyB,IAAI,CAAEzB,CAAC,EAAE,CAAE,CAC7BmC,WAAW,CAACjC,IAAI,CAAC,CACftB,MAAM,CAAE8C,sBAAsB,CAACA,sBAAsB,CAACxD,MAAM,CAAGuD,IAAI,CAAGzB,CAAC,CAAC,CAACjC,KAAK,CAC9Ec,MAAM,CAAE,CAAC,KAAK,CAAE,EAAE,CAAC,CACnBH,MAAM,CAAE,EAAE,CACVyB,SAAS,CAAE,KAAK,CAChBoC,IAAI,CAAEnB,WAAW,EAAI,CAAC,CAAG,OAAO,CAAGA,WAAW,EAAI,CAAC,CAAG,WAAW,CAAGA,WAAW,EAAI,CAAC,CAAG,kBAAkB,CAAG,kBAAkB,CAC9HoB,MAAM,CAAE,CACV,CAAC,CAAC,CACJ,CAEA,MAAO,CAAAL,WAAW,CACpB,CAAC,CAED,MAAO,MAAM,CAAAM,yBAAyB,CAAIC,gBAAgB,EAAK,CAC7D,GAAI,CAAAC,UAAU,CAAGD,gBAAgB,CAACzD,GAAG,CAAER,IAAI,EAAK,CAC9C,KAAM,CAACmE,MAAM,CAAEC,MAAM,CAAC,CAAGpE,IAAI,CAACC,MAAM,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC,CAC3D,GAAIT,IAAI,CAACI,MAAM,CAAC,CAAC,CAAC,GAAK,KAAK,CAAE,MAAO,CAAAJ,IAAI,CAACG,MAAM,CAChD,MAAO,CAAAgE,MAAM,CAAGC,MAAM,CAAGpE,IAAI,CAACG,MAAM,CAAGH,IAAI,CAACI,MAAM,CACpD,CAAC,CAAC,CAEF,GAAI,CAAAiE,YAAY,CAAGrC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACa,IAAI,CAACqB,UAAU,CAACzE,MAAM,CAAC,CAAC,CAC1D,GAAI,CAAA6E,YAAY,CACd,CAAC,OAAO,CAAE,WAAW,CAAE,kBAAkB,CAAC,CAACD,YAAY,CAAG,CAAC,CAAC,YAAAE,MAAA,CAClDN,gBAAgB,CAAC,CAAC,CAAC,CAACF,MAAM,CAAG,CAAC,CAAE,CAE5C,GAAI,CAAAS,UAAU,CAAG,EAAE,CACnB,IAAK,GAAI,CAAAjD,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG2C,UAAU,CAACzE,MAAM,CAAE8B,CAAC,EAAI,CAAC,CAAE,CAC7C,GAAI2C,UAAU,CAAC3C,CAAC,CAAG,CAAC,CAAC,CAAE,CACrBiD,UAAU,CAAC/C,IAAI,CAAC,CACdtB,MAAM,CAAE+D,UAAU,CAAC3C,CAAC,CAAC,CACrBnB,MAAM,CAAE8D,UAAU,CAAC3C,CAAC,CAAG,CAAC,CAAC,CACzBtB,MAAM,CAAE,EAAE,CACVyB,SAAS,CAAE,KAAK,CAChBoC,IAAI,CAAEQ,YAAY,CAClBP,MAAM,CAAEE,gBAAgB,CAAC,CAAC,CAAC,CAACF,MAAM,CAAG,CACvC,CAAC,CAAC,CACJ,CAAC,IAAM,CACLS,UAAU,CAAC/C,IAAI,CAAC,CACdtB,MAAM,CAAE+D,UAAU,CAAC3C,CAAC,CAAC,CACrBnB,MAAM,CAAE,CAAC,KAAK,CAAE,EAAE,CAAC,CACnBH,MAAM,CAAE,EAAE,CACVyB,SAAS,CAAE,KAAK,CAChBoC,IAAI,CAAEQ,YAAY,CAClBP,MAAM,CAAEE,gBAAgB,CAAC,CAAC,CAAC,CAACF,MAAM,CAAG,CACvC,CAAC,CAAC,CACJ,CACF,CACA,MAAO,CAAAS,UAAU,CACnB,CAAC,CAED,MAAO,MAAM,CAAAC,kBAAkB,CAAGA,CAACC,IAAI,CAAEzF,MAAM,CAAE0F,UAAU,CAAEC,UAAU,GAAK,CAC1E,GAAI3F,MAAM,CAACQ,MAAM,CAAG,CAAC,CAAE,CACrB,KAAM,IAAI,CAAAoF,KAAK,CAAC,yDAAyD,CAAC,CAC5E,CACA,GAAI,CAACH,IAAI,EAAI,CAACC,UAAU,EAAI,CAACC,UAAU,CAAE,CACvC,KAAM,IAAI,CAAAC,KAAK,CAAC,+CAA+C,CAAC,CAClE,CAEA,KAAM,CAAAC,WAAW,CAAGC,eAAe,CAAC,CAAC,CACrC,GAAID,WAAW,CAACJ,IAAI,CAAC,CAAE,CACrB,KAAM,IAAI,CAAAG,KAAK,CAAC,yDAAyD,CAAC,CAC5E,CAEA,KAAM,CAAAG,eAAe,CAAG,CAAC,GAAG/F,MAAM,CAAC,CAACgC,IAAI,CAAC,IAAMe,IAAI,CAACuB,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CACnE,KAAM,CAAA0B,aAAa,CAAGtD,aAAa,CAACqD,eAAe,CAAC,CACpD,KAAM,CAAAE,cAAc,CAAGD,aAAa,CAACzE,GAAG,CAAE6B,KAAK,EAAA8C,aAAA,CAAAA,aAAA,IAC1C9C,KAAK,MACRnD,KAAK,CAAEmC,mBAAmB,CAACgB,KAAK,CAACpD,MAAM,CAAEoD,KAAK,CAACP,EAAE,CAAC,EAClD,CAAC,CAEH,KAAM,CAACsD,GAAG,CAAEC,GAAG,CAAEC,GAAG,CAAC,CAAGX,UAAU,CAACpE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC,CACzD,KAAM,CAAC8E,IAAI,CAAEC,MAAM,CAAC,CAAGZ,UAAU,CAACrE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC,CACxD,KAAM,CAAAgF,WAAW,CAAG,GAAI,CAAAC,IAAI,CAACN,GAAG,CAAEC,GAAG,CAAG,CAAC,CAAEC,GAAG,CAAEC,IAAI,CAAEC,MAAM,CAAC,CAACG,WAAW,CAAC,CAAC,CAE3E,KAAM,CAAAC,UAAU,CAAG,CACjBlB,IAAI,CACJmB,WAAW,CAAE,GAAI,CAAAH,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACrCF,WAAW,CACXd,UAAU,CACVC,UAAU,CACV3F,MAAM,CAAE+F,eAAe,CACvBnD,MAAM,CAAEqD,cAAc,CACtBY,iBAAiB,CAAE,EAAE,CACrBC,gBAAgB,CAAE,KAAK,CACvBC,wBAAwB,CAAE,KAAK,CAC/BC,OAAO,CAAE,EAAE,CACXC,SAAS,CAAE,EAAE,CACbC,eAAe,CAAEnB,eAAe,CAAC5F,MAAM,CAAC,CAACC,GAAG,CAAEC,KAAK,GAAK,CACtDD,GAAG,CAACC,KAAK,CAACM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAG,CACpBN,KAAK,CACLO,MAAM,CAAE,CAAC,CACTX,KAAK,CAAE,CAAC,CACRkH,aAAa,CAAE,CAAC,CAChBC,aAAa,CAAE,CAAC,CAChBC,aAAa,CAAE,CACjB,CAAC,CACD,MAAO,CAAAjH,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CACNkH,MAAM,CAAE,UAAU,CAClBC,SAAS,CAAE,QACb,CAAC,CAEDC,cAAc,CAACb,UAAU,CAAC,CAC1B,MAAO,CAAAA,UAAU,CACnB,CAAC,CAED,MAAO,MAAM,CAAAa,cAAc,CAAIC,cAAc,EAAK,CAChD,KAAM,CAAA5B,WAAW,CAAGjE,IAAI,CAAC8F,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAI,IAAI,CAAC,CAC3E/B,WAAW,CAAC4B,cAAc,CAAChC,IAAI,CAAC,CAAGgC,cAAc,CACjDE,YAAY,CAACE,OAAO,CAAC,aAAa,CAAEjG,IAAI,CAACC,SAAS,CAACgE,WAAW,CAAC,CAAC,CAClE,CAAC,CAED,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CACnC,MAAO,CAAAlE,IAAI,CAAC8F,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAI,IAAI,CAAC,CAChE,CAAC,CAED,MAAO,MAAM,CAAAE,gBAAgB,CAAIrC,IAAI,EAAK,CACxC,KAAM,CAAAI,WAAW,CAAGjE,IAAI,CAAC8F,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,EAAI,IAAI,CAAC,CAC3E,MAAO,CAAA/B,WAAW,CAACJ,IAAI,CAAC,CACxBkC,YAAY,CAACE,OAAO,CAAC,aAAa,CAAEjG,IAAI,CAACC,SAAS,CAACgE,WAAW,CAAC,CAAC,CAClE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}