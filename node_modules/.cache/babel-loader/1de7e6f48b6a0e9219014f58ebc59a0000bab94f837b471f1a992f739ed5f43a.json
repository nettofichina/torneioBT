{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseEliminatoria.js\";\nimport React from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseEliminatoria = ({\n  fase,\n  jogos,\n  onAtualizarEstatisticas\n}) => {\n  const handleSubmitScore = (placar, jogoIndex) => {\n    onAtualizarEstatisticas({\n      jogoIndex,\n      placar\n    });\n  };\n\n  // Agrupar jogos por rodada\n  const jogosPorRodada = {};\n  jogos.forEach(jogo => {\n    if (!jogosPorRodada[jogo.rodada]) {\n      jogosPorRodada[jogo.rodada] = [];\n    }\n    jogosPorRodada[jogo.rodada].push(jogo);\n  });\n\n  // Determinar a última rodada concluída\n  const ultimaRodadaConcluida = Object.keys(jogosPorRodada).reduce((maxRodada, rodada) => jogosPorRodada[rodada].every(jogo => jogo.submetido) ? Math.max(maxRodada, rodada) : maxRodada, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: fase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\n      if (parseInt(rodada) <= ultimaRodadaConcluida + 1) {\n        // Mostra a rodada atual e as anteriores\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: rodada === '1' ? 'Primeira Rodada' : rodada === Object.keys(jogosPorRodada).length.toString() ? 'Final' : rodada === (Object.keys(jogosPorRodada).length - 1).toString() ? 'Semifinal' : `Rodada ${rodada}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this), jogosPorRodada[rodada].map(jogo => {\n            console.log('Jogo index:', jogo.jogoIndex);\n            return /*#__PURE__*/_jsxDEV(Jogo, {\n              // Garanta que a chave seja única combinando com a rodada\n              jogo: jogo,\n              onSubmitScore: placar => handleSubmitScore(placar, jogo.jogoIndex)\n            }, jogo.jogoIndex.toString() + rodada, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 19\n            }, this);\n          })]\n        }, rodada, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this);\n      }\n      return null;\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = FaseEliminatoria;\nexport default FaseEliminatoria;\nvar _c;\n$RefreshReg$(_c, \"FaseEliminatoria\");","map":{"version":3,"names":["React","Jogo","jsxDEV","_jsxDEV","FaseEliminatoria","fase","jogos","onAtualizarEstatisticas","handleSubmitScore","placar","jogoIndex","jogosPorRodada","forEach","jogo","rodada","push","ultimaRodadaConcluida","Object","keys","reduce","maxRodada","every","submetido","Math","max","children","fileName","_jsxFileName","lineNumber","columnNumber","sort","a","b","map","parseInt","length","toString","console","log","onSubmitScore","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseEliminatoria.js"],"sourcesContent":["import React from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseEliminatoria = ({ fase, jogos, onAtualizarEstatisticas }) => {\r\n  const handleSubmitScore = (placar, jogoIndex) => {\r\n    onAtualizarEstatisticas({ jogoIndex, placar });\r\n  };\r\n\r\n  // Agrupar jogos por rodada\r\n  const jogosPorRodada = {};\r\n  jogos.forEach(jogo => {\r\n    if (!jogosPorRodada[jogo.rodada]) {\r\n      jogosPorRodada[jogo.rodada] = [];\r\n    }\r\n    jogosPorRodada[jogo.rodada].push(jogo);\r\n  });\r\n\r\n  // Determinar a última rodada concluída\r\n  const ultimaRodadaConcluida = Object.keys(jogosPorRodada).reduce((maxRodada, rodada) =>\r\n    jogosPorRodada[rodada].every(jogo => jogo.submetido) ? Math.max(maxRodada, rodada) : maxRodada, 0);\r\n\r\n  return (\r\n    <div>\r\n      <h2>{fase}</h2>\r\n      {Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\r\n        if (parseInt(rodada) <= ultimaRodadaConcluida + 1) { // Mostra a rodada atual e as anteriores\r\n          return (\r\n            <div key={rodada}>\r\n              <h3>{rodada === '1' ? 'Primeira Rodada' : rodada === (Object.keys(jogosPorRodada).length).toString() ? 'Final' : rodada === (Object.keys(jogosPorRodada).length - 1).toString() ? 'Semifinal' : `Rodada ${rodada}`}</h3>\r\n              {jogosPorRodada[rodada].map(jogo => {\r\n                console.log('Jogo index:', jogo.jogoIndex);\r\n                return (\r\n                  <Jogo\r\n                    key={jogo.jogoIndex.toString() + rodada} // Garanta que a chave seja única combinando com a rodada\r\n                    jogo={jogo}\r\n                    onSubmitScore={(placar) => handleSubmitScore(placar, jogo.jogoIndex)}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseEliminatoria;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}