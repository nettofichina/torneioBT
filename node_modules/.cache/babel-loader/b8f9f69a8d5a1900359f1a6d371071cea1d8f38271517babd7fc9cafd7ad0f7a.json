{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { iniciarFaseEliminatoria, avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const renderizarHistoricoEliminatoria = jogos => {\n    // Obter as rodadas únicas, ordenadas\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      // Pega o nome da fase a partir do primeiro jogo da rodada\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), jogosDaRodada.map((jogo, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jogo\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [jogo.dupla1.join(' & '), \" vs \", jogo.dupla2.join(' & ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Placar: \", jogo.placar, \" \", jogo.submetido ? \"(Submetido)\" : \"(Não submetido)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this))]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      const jogosRodada = iniciarFaseEliminatoria(classificados);\n      setJogosEliminatoria(jogosRodada);\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n\n      // Verifica se todos os jogos da rodada atual foram submetidos\n      const rodadaAtual = updatedJogos[0].rodada;\n      if (updatedJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n        // Se houver mais de 1 jogo, gera a próxima rodada\n        if (updatedJogos.filter(j => j.rodada === rodadaAtual).length > 1) {\n          const novaRodada = avancarRodadaEliminatoria(updatedJogos.filter(j => j.rodada === rodadaAtual));\n          setJogosEliminatoria([...updatedJogos, ...novaRodada]);\n        } else {\n          // Se restar apenas 1 jogo, podemos avançar para a fase final ou finalizar o torneio\n          // (dependendo da lógica desejada)\n        }\n      }\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([{\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final'\n      }, {\n        dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n        dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar'\n      }]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1] ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), renderizarHistoricoEliminatoria(jogosEliminatoria), finalConfigurada && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setFaseAtual('final'),\n          children: \"Avan\\xE7ar para a Final\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' & ')]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IcfBMVlPILYAbK+VDrAiYF7cjaA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","iniciarFaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","renderizarHistoricoEliminatoria","jogos","rodadas","Set","map","j","rodada","sort","a","b","_jogosDaRodada$","jogosDaRodada","filter","fase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","jogo","index","dupla1","join","dupla2","placar","submetido","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","_","i","startTournament","length","duplasSorteadas","Math","random","gruposCriados","forEach","grupo","id","encerrarFaseGrupos","todosOsJogos","flatMap","classificados","jogosRodada","atualizarPlacarNaEliminatoria","prevJogos","updatedJogos","rodadaAtual","every","novaRodada","iniciarFinal","finalistas","set1","set2","split","Number","console","error","atualizarPlacarNaFinal","encerrarFaseEliminatoria","max","finalizarTorneio","final","find","terceiroLugar","vencedorFinal","perdedorFinal","terceiro","quarto","lugar","add8Duplas","newDuplas","push","onAddDupla","onRemoveDupla","onClick","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\n\nimport { iniciarFaseEliminatoria, avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const renderizarHistoricoEliminatoria = (jogos) => {\n    // Obter as rodadas únicas, ordenadas\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      // Pega o nome da fase a partir do primeiro jogo da rodada\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          {jogosDaRodada.map((jogo, index) => (\n            <div key={index} className=\"jogo\">\n              <p>{jogo.dupla1.join(' & ')} vs {jogo.dupla2.join(' & ')}</p>\n              <p>Placar: {jogo.placar} {jogo.submetido ? \"(Submetido)\" : \"(Não submetido)\"}</p>\n            </div>\n          ))}\n        </div>\n      );\n    });\n  };\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    // Sortear aleatoriamente as duplas antes de dividir em grupos\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n\n    if (duplas.length <= 5) {\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      const jogosRodada = iniciarFaseEliminatoria(classificados);\n      setJogosEliminatoria(jogosRodada);\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n\n      // Verifica se todos os jogos da rodada atual foram submetidos\n      const rodadaAtual = updatedJogos[0].rodada;\n      if (updatedJogos.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n        // Se houver mais de 1 jogo, gera a próxima rodada\n        if (updatedJogos.filter(j => j.rodada === rodadaAtual).length > 1) {\n          const novaRodada = avancarRodadaEliminatoria(updatedJogos.filter(j => j.rodada === rodadaAtual));\n          setJogosEliminatoria([...updatedJogos, ...novaRodada]);\n        } else {\n          // Se restar apenas 1 jogo, podemos avançar para a fase final ou finalizar o torneio\n          // (dependendo da lógica desejada)\n        }\n      }\n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const finalistas = jogos.filter(jogo => jogo.fase === 'Semifinal').map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    if (finalistas.length === 2) {\n      setJogosEliminatoria([\n        {\n          dupla1: finalistas[0],\n          dupla2: finalistas[1],\n          placar: '',\n          submetido: false,\n          fase: 'Final'\n        },\n        {\n          dupla1: jogos[0].dupla1 === finalistas[0] ? jogos[0].dupla2 : jogos[0].dupla1,\n          dupla2: jogos[1].dupla1 === finalistas[1] ? jogos[1].dupla2 : jogos[1].dupla1,\n          placar: '',\n          submetido: false,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n      setFinalConfigurada(true);\n      setTerceiroLugarConfigurado(true);\n    } else {\n      console.error('Não foi possível determinar os finalistas.');\n    }\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    if (jogosEliminatoria.filter(j => j.rodada === rodadaAtual).every(j => j.submetido)) {\n      if (rodadaAtual === Math.max(...jogosEliminatoria.map(j => j.rodada))) {\n        // Se todos os jogos da última rodada foram submetidos, avança para a final\n        iniciarFinal(jogosEliminatoria);\n        setFaseAtual('final');\n      } else {\n        // Aqui você pode adicionar lógica para avançar para a próxima rodada se não for a última\n        alert('Avançando para a próxima rodada...');\n      }\n    } else {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    const [vencedorFinal, perdedorFinal] = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1]\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiro, quarto] = terceiroLugar.placar.split('-').map(Number)[0] > terceiroLugar.placar.split('-').map(Number)[1]\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button> {/* Botão temporário */}\n          </>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            {renderizarHistoricoEliminatoria(jogosEliminatoria)}\n            {finalConfigurada && (\n              <button onClick={() => setFaseAtual('final')}>Avançar para a Final</button>\n            )}\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado &&\n              <p>A disputa pelo 3º lugar está configurada!</p>\n            }\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <ul>\n              {ranking.map((posição, index) => (\n                <li key={index}>\n                  {posição.lugar}º Lugar: {posição.dupla.join(' & ')}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}