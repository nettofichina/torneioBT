{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils'; // Mantemos apenas o necessário\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({}); // Novo estado\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    // Gera os jogos apenas uma vez\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1]));\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        // Verifica se AMBAS as duplas do jogo estão em duplasUnicas\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      const duplasByeLocal = rankingGeral.slice(0, 2);\n      const duplasQuartas = rankingGeral.slice(2, 6);\n      if (duplasQuartas.length < 4) {\n        console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n        alert('Erro ao configurar as quartas de final. Verifique os dados.');\n        return;\n      }\n      const jogosQuartas = [{\n        dupla1: duplasQuartas[0],\n        dupla2: duplasQuartas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Quartas de Final',\n        rodada: 1\n      }, {\n        dupla1: duplasQuartas[2],\n        dupla2: duplasQuartas[3],\n        placar: '',\n        submetido: false,\n        fase: 'Quartas de Final',\n        rodada: 1\n      }];\n      setJogosEliminatoria(jogosQuartas);\n      setDuplasBye(duplasByeLocal);\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n\n      // Atualizar histórico\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          setsVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          setsVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].setsVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].setsVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n      const rodadaAtual = Math.max(...updatedJogos.map(j => j.rodada));\n      const jogosRodadaAtual = updatedJogos.filter(j => j.rodada === rodadaAtual);\n      if (jogosRodadaAtual.every(j => j.submetido) && jogosRodadaAtual.length > 1 && jogosRodadaAtual.some(j => j.fase !== 'Semifinal')) {\n        const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n        return [...updatedJogos, ...novaRodada];\n      }\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    setJogosEliminatoria(prev => [...prev, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final')) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n      const semifinalMatches = [{\n        dupla1: duplasBye[0],\n        dupla2: vencedoresQuartas[0],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: duplasBye[1],\n        dupla2: vencedoresQuartas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n      console.log('Semifinal Matches:', semifinalMatches);\n      // Mantém 'eliminatória' para permitir submissão de placares\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev, ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.length - jogosVencidos;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            const classificado = index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const dataHora = `DOM, 16FEV - ${12 + Math.floor(idx / 3)}:00`;\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? jogo.placar.split('-')[0] > jogo.placar.split('-')[1] ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: add27Duplas,\n    children: \"Adicionar 27 Duplas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"iniciar-torneio\",\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add27Duplas,\n          children: \"Adicionar 27 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 15\n          }, this), grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 42\n        }, this), jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [posição.lugar, \"\\xBA Lugar\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: posição.dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 444,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aDP/tP0w5cxhlJZ/iUv1MmqnOMo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","duplasBye","setDuplasBye","historicoDuplas","setHistoricoDuplas","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","gruposCriados","gruposComJogos","map","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","rankingGrupo1","rankingGrupo2","semifinalMatches","dupla1","dupla2","placar","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","Array","isArray","console","error","dupla1Str","dupla2Str","log","rankingGeral","duplasByeLocal","duplasQuartas","jogosQuartas","atualizarPlacarNaEliminatoria","prevJogos","j","updatedJogos","g1","g2","split","Number","chave1","chave2","prev","novoHistorico","pontos","jogosVencidos","setsVencidos","gamesVencidos","gamesPerdidos","rodadaAtual","max","jogosRodadaAtual","every","novaRodada","iniciarFinal","semifinalGames","finalistas","set1","set2","perdedores","atualizarPlacarNaFinal","encerrarFaseEliminatoria","vencedoresQuartas","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","renderClassificacaoGrupo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsPerdidos","reduce","acc","classificado","idx","vencedor","dataHora","floor","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","add8Duplas","newDuplas","push","add27Duplas","onClick","onAddDupla","onRemoveDupla","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils'; // Mantemos apenas o necessário\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({}); // Novo estado\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    // Gera os jogos apenas uma vez\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n  \n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) =>\n        index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1])\n      );\n  \n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        // Verifica se AMBAS as duplas do jogo estão em duplasUnicas\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && \n               duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n  \n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n  \n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      const duplasByeLocal = rankingGeral.slice(0, 2);\n      const duplasQuartas = rankingGeral.slice(2, 6);\n  \n      if (duplasQuartas.length < 4) {\n        console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n        alert('Erro ao configurar as quartas de final. Verifique os dados.');\n        return;\n      }\n  \n      const jogosQuartas = [\n        { dupla1: duplasQuartas[0], dupla2: duplasQuartas[1], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 },\n        { dupla1: duplasQuartas[2], dupla2: duplasQuartas[3], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 }\n      ];\n  \n      setJogosEliminatoria(jogosQuartas);\n      setDuplasBye(duplasByeLocal);\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos =>\n        prevJogos.map(j =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        )\n      );\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      // Atualizar histórico\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, setsVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].setsVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].setsVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n  \n      const rodadaAtual = Math.max(...updatedJogos.map(j => j.rodada));\n      const jogosRodadaAtual = updatedJogos.filter(j => j.rodada === rodadaAtual);\n  \n      if (jogosRodadaAtual.every(j => j.submetido) && jogosRodadaAtual.length > 1 && jogosRodadaAtual.some(j => j.fase !== 'Semifinal')) {\n        const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n        return [...updatedJogos, ...novaRodada];\n      }\n      return updatedJogos;\n    });\n  };\n\nconst iniciarFinal = (jogos) => {\n  const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n  if (semifinalGames.length !== 2) {\n    console.error('Erro: Esperados 2 jogos de semifinal.');\n    return;\n  }\n\n  const finalistas = semifinalGames.map(jogo => {\n    const [set1, set2] = jogo.placar.split('-').map(Number);\n    return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n  });\n\n  const perdedores = semifinalGames.map(jogo => {\n    const [set1, set2] = jogo.placar.split('-').map(Number);\n    return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n  });\n\n  setJogosEliminatoria(prev => [\n    ...prev,\n    {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n    },\n    {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }\n  ]);\n  setFinalConfigurada(true);\n  setTerceiroLugarConfigurado(true);\n};\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n  \n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n  \n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n  \n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final')) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n  \n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n  \n      const semifinalMatches = [\n        { dupla1: duplasBye[0], dupla2: vencedoresQuartas[0], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n        { dupla1: duplasBye[1], dupla2: vencedoresQuartas[1], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n      ];\n      setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n      console.log('Semifinal Matches:', semifinalMatches);\n      // Mantém 'eliminatória' para permitir submissão de placares\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev, ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n    setFaseAtual('finalizado');\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(j => \n                j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.length - jogosVencidos;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = index < 2 ? '✓' : '';\n  \n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar ? (g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate') : 'A definir';\n              const dataHora = `DOM, 16FEV - ${12 + Math.floor(idx / 3)}:00`;\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor = jogo.placar && jogo.submetido \n                  ? (jogo.placar.split('-')[0] > jogo.placar.split('-')[1] ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & '))\n                  : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button className=\"iniciar-torneio\" onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n            <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n          </>\n        )}\n  \n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {grupos.map(grupo => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n  \n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria)}\n            </div>\n          </>\n        )}\n  \n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado && <p>A disputa pelo 3º lugar está configurada!</p>}\n            {jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))}\n            </div>\n          </>\n        )}\n  \n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>JOGADORES</th>\n                </tr>\n              </thead>\n              <tbody>\n                {ranking.map((posição, index) => (\n                  <tr key={index}>\n                    <td>{posição.lugar}º Lugar</td>\n                    <td>{posição.dupla.join(' & ')}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n      </main>\n    </div>\n  );\n\n\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}