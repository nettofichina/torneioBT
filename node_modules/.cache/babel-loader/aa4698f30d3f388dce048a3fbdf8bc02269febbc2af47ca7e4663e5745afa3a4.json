{"ast":null,"code":"import _objectSpread from\"C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import DuplasList from'./components/Duplas/DuplasList';import FaseDeGrupos from'./components/Torneio/FaseDeGrupos';import FaseEliminatoria from'./components/Torneio/FaseEliminatoria';import FaseFinal from'./components/Torneio/FaseFinal';import MeusTorneios from'./components/Torneio/MeusTorneios';import{saveTournament,loadTournaments,deleteTournament,generateTournament,classificarDuplasPorDesempate}from'./utils/torneioUtils';import'./App.css';import gameDay from'./assets/img/game-day.svg';import btConnectLogo from'./assets/img/btConnect.png';import tournamentsIcon from'./assets/icons/tournaments.svg';import shuffleIcon from'./assets/icons/shuffle.svg';import folderIcon from'./assets/icons/folder.svg';import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){const[currentTournament,setCurrentTournament]=useState(null);const[faseAtual,setFaseAtual]=useState('menu');const[tournaments,setTournaments]=useState(loadTournaments());useEffect(()=>{const updatedTournaments=loadTournaments();setTournaments(updatedTournaments);},[]);const loadTournament=nome=>{const tournament=tournaments[nome];if(tournament){console.log('Carregando torneio do localStorage:',tournament);setCurrentTournament(tournament);setFaseAtual(tournament.status==='finalizado'?'finalizado':tournament.faseAtual||'duplas');}else{createNewTournament();}};const saveCurrentTournament=()=>{if(currentTournament&&currentTournament.nome&&currentTournament.dataInicio&&currentTournament.horaInicio){const tournamentToSave=_objectSpread(_objectSpread({},currentTournament),{},{faseAtual});console.log('Salvando torneio no localStorage:',tournamentToSave);saveTournament(tournamentToSave);setTournaments(loadTournaments());}};const updateTournamentField=(field,value)=>{setCurrentTournament(prev=>{const updated=_objectSpread(_objectSpread({},prev),{},{[field]:value});console.log(\"Atualizando \".concat(field,\":\"),value);if(updated.nome&&updated.dataInicio&&updated.horaInicio){saveCurrentTournament();}return updated;});};const createNewTournament=()=>{const newTournament={nome:'',dataCriacao:null,dataTorneio:null,dataInicio:'',horaInicio:'',duplas:[],grupos:[],jogosEliminatoria:[],finalConfigurada:false,terceiroLugarConfigurado:false,ranking:[],duplasBye:[],historicoDuplas:{},status:'rascunho',faseAtual:'duplas'};setCurrentTournament(newTournament);setFaseAtual('duplas');};const handleDeleteTournament=nome=>{deleteTournament(nome);setTournaments(prev=>{const updated=_objectSpread({},prev);delete updated[nome];return updated;});if(currentTournament&&currentTournament.nome===nome){setCurrentTournament(null);setFaseAtual('menu');}};// Função para importar torneios\nconst handleImportTournaments=importedTournaments=>{setTournaments(prev=>{const updatedTournaments=_objectSpread(_objectSpread({},prev),importedTournaments);Object.entries(updatedTournaments).forEach(_ref=>{let[nome,tournament]=_ref;saveTournament(tournament);});return updatedTournaments;});};const addDupla=dupla=>{if(!(currentTournament!==null&&currentTournament!==void 0&&currentTournament.duplas.some(d=>d.includes(dupla[0])||d.includes(dupla[1])))){updateTournamentField('duplas',[...currentTournament.duplas,dupla]);}else{alert('Os nomes dos jogadores devem ser únicos.');}};const removeDupla=index=>{updateTournamentField('duplas',currentTournament.duplas.filter((_,i)=>i!==index));};const startTournament=()=>{if(currentTournament.duplas.length<3){alert('É necessário pelo menos 3 duplas para começar o torneio.');return;}if(!currentTournament.nome||!currentTournament.dataInicio||!currentTournament.horaInicio){alert('Preencha o nome, data e hora de início do torneio.');return;}const duplasSorteadas=[...currentTournament.duplas].sort(()=>Math.random()-0.5);const historicoInicial=duplasSorteadas.reduce((acc,dupla)=>{acc[dupla.join('')]={dupla,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};return acc;},{});setCurrentTournament(prev=>_objectSpread(_objectSpread({},prev),{},{historicoDuplas:historicoInicial,status:'em andamento',dataCriacao:new Date().toISOString(),duplas:duplasSorteadas}));setFaseAtual('grupos');saveCurrentTournament();};const encerrarFaseGrupos=()=>{if(currentTournament.grupos.some(grupo=>grupo.jogos.some(jogo=>!jogo.submetido))){alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');return;}const todosOsJogos=currentTournament.grupos.flatMap(grupo=>grupo.jogos);console.log('Jogos da fase de grupos:',todosOsJogos);updateTournamentField('historicoDuplas',prev=>{const novoHistorico=_objectSpread({},prev);todosOsJogos.forEach(jogo=>{if(!jogo.placar||!jogo.placar.includes('-'))return;const[g1,g2]=jogo.placar.split('-').map(Number);if(isNaN(g1)||isNaN(g2))return;const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!novoHistorico[chave1])novoHistorico[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};if(!novoHistorico[chave2])novoHistorico[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};novoHistorico[chave1].jogos+=1;novoHistorico[chave2].jogos+=1;if(g1>g2){novoHistorico[chave1].pontos+=5;novoHistorico[chave1].jogosVencidos+=1;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;novoHistorico[chave2].pontos+=2;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;}else{novoHistorico[chave2].pontos+=5;novoHistorico[chave2].jogosVencidos+=1;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;novoHistorico[chave1].pontos+=2;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;}});console.log('Histórico após fase de grupos:',novoHistorico);return novoHistorico;});const numDuplas=currentTournament.duplas.length;if(numDuplas<=5){const classificados=classificarDuplasPorDesempate(currentTournament.duplas,todosOsJogos);updateTournamentField('ranking',[{lugar:1,dupla:classificados[0]},{lugar:2,dupla:classificados[1]},{lugar:3,dupla:classificados[2]||['N/A','N/A']}]);updateTournamentField('status','finalizado');setFaseAtual('finalizado');}else if(numDuplas===9||numDuplas===10){const rankingGrupo1=classificarDuplasPorDesempate(currentTournament.grupos[0].duplas,currentTournament.grupos[0].jogos);const rankingGrupo2=classificarDuplasPorDesempate(currentTournament.grupos[1].duplas,currentTournament.grupos[1].jogos);const semifinalMatches=[{dupla1:[...rankingGrupo1[0]],dupla2:[...rankingGrupo2[1]],placar:'',submetido:false,fase:'Semifinal',rodada:1},{dupla1:[...rankingGrupo2[0]],dupla2:[...rankingGrupo1[1]],placar:'',submetido:false,fase:'Semifinal',rodada:1}];updateTournamentField('jogosEliminatoria',semifinalMatches);setFaseAtual('eliminatória');}else{const classificadosPorGrupo=currentTournament.grupos.map(grupo=>classificarDuplasPorDesempate(grupo.duplas,grupo.jogos).slice(0,2)).flat();const duplasUnicas=classificadosPorGrupo.filter((dupla,index,self)=>index===self.findIndex(d=>d.join('')===dupla.join('')));const jogosClassificados=todosOsJogos.filter(jogo=>{const dupla1Str=jogo.dupla1.join('');const dupla2Str=jogo.dupla2.join('');return duplasUnicas.some(d=>d.join('')===dupla1Str)&&duplasUnicas.some(d=>d.join('')===dupla2Str);});const rankingGeral=classificarDuplasPorDesempate(duplasUnicas,jogosClassificados);if(numDuplas<=11){if(rankingGeral.length<6){if(rankingGeral.length===2){updateTournamentField('jogosEliminatoria',[{dupla1:[...rankingGeral[0]],dupla2:[...rankingGeral[1]],placar:'',submetido:false,fase:'Final',rodada:1}]);setFaseAtual('final');}else if(rankingGeral.length<=4){updateTournamentField('jogosEliminatoria',[{dupla1:[...rankingGeral[0]],dupla2:[...rankingGeral[1]],placar:'',submetido:false,fase:'Semifinal',rodada:1},{dupla1:[...rankingGeral[2]],dupla2:rankingGeral[3]?[...rankingGeral[3]]:['BYE',''],placar:'',submetido:false,fase:'Semifinal',rodada:1}]);setFaseAtual('eliminatória');}else{const duplasByeLocal=rankingGeral.slice(0,2);const duplasSemifinais=rankingGeral.slice(2,4);updateTournamentField('jogosEliminatoria',[{dupla1:[...duplasSemifinais[0]],dupla2:duplasSemifinais[1]?[...duplasSemifinais[1]]:['BYE',''],placar:'',submetido:false,fase:'Semifinal',rodada:1}]);updateTournamentField('duplasBye',duplasByeLocal);setFaseAtual('eliminatória');}}else{const duplasByeLocal=rankingGeral.slice(0,2);const duplasQuartas=rankingGeral.slice(2,6);const jogosQuartas=[{dupla1:[...duplasQuartas[0]],dupla2:[...duplasQuartas[1]],placar:'',submetido:false,fase:'Quartas de Final',rodada:1},{dupla1:[...duplasQuartas[2]],dupla2:[...duplasQuartas[3]],placar:'',submetido:false,fase:'Quartas de Final',rodada:1}];updateTournamentField('jogosEliminatoria',jogosQuartas);updateTournamentField('duplasBye',duplasByeLocal);setFaseAtual('eliminatória');}}else{const top16=rankingGeral.slice(0,16);const jogosOitavas=[];for(let i=0;i<top16.length;i+=2){jogosOitavas.push({dupla1:[...top16[i]],dupla2:top16[i+1]?[...top16[i+1]]:['BYE',''],placar:'',submetido:false,fase:'Oitavas de Final',rodada:1});}updateTournamentField('jogosEliminatoria',jogosOitavas);updateTournamentField('duplasBye',[]);setFaseAtual('eliminatória');}}saveCurrentTournament();};const atualizarPlacarNaEliminatoria=(jogo,placar)=>{console.log('Atualizando placar na eliminatória:',{jogo,placar});if(jogo.dupla1[0]==='BYE'||jogo.dupla2[0]==='BYE'){updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria.map(j=>j===jogo?_objectSpread(_objectSpread({},j),{},{placar:'BYE',submetido:true}):j)]);const vencedora=jogo.dupla1[0]==='BYE'?jogo.dupla2:jogo.dupla1;const chaveVencedora=vencedora.join('');updateTournamentField('historicoDuplas',prev=>{var _novoHistorico$chaveV,_novoHistorico$chaveV2,_novoHistorico$chaveV3,_novoHistorico$chaveV4,_novoHistorico$chaveV5;const novoHistorico=_objectSpread({},prev);novoHistorico[chaveVencedora]={dupla:vencedora,jogos:(((_novoHistorico$chaveV=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV===void 0?void 0:_novoHistorico$chaveV.jogos)||0)+1,jogosVencidos:(((_novoHistorico$chaveV2=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV2===void 0?void 0:_novoHistorico$chaveV2.jogosVencidos)||0)+1,pontos:(((_novoHistorico$chaveV3=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV3===void 0?void 0:_novoHistorico$chaveV3.pontos)||0)+5,gamesVencidos:((_novoHistorico$chaveV4=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV4===void 0?void 0:_novoHistorico$chaveV4.gamesVencidos)||0,gamesPerdidos:((_novoHistorico$chaveV5=novoHistorico[chaveVencedora])===null||_novoHistorico$chaveV5===void 0?void 0:_novoHistorico$chaveV5.gamesPerdidos)||0};console.log('Histórico após eliminatória (BYE):',novoHistorico);return novoHistorico;});}else{updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria.map(j=>j===jogo?_objectSpread(_objectSpread({},j),{},{placar,submetido:true}):j)]);updateTournamentField('historicoDuplas',prev=>{const novoHistorico=_objectSpread({},prev);const[g1,g2]=placar.split('-').map(Number);const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!novoHistorico[chave1])novoHistorico[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};if(!novoHistorico[chave2])novoHistorico[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};novoHistorico[chave1].jogos+=1;novoHistorico[chave2].jogos+=1;if(g1>g2){novoHistorico[chave1].pontos+=5;novoHistorico[chave1].jogosVencidos+=1;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;novoHistorico[chave2].pontos+=2;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;}else{novoHistorico[chave2].pontos+=5;novoHistorico[chave2].jogosVencidos+=1;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;novoHistorico[chave1].pontos+=2;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;}console.log('Histórico após eliminatória:',novoHistorico);return novoHistorico;});}saveCurrentTournament();};const iniciarFinal=jogos=>{const semifinalGames=jogos.filter(jogo=>jogo.fase==='Semifinal');if(semifinalGames.length!==2){console.error('Erro: Esperados 2 jogos de semifinal.');return;}const finalistas=semifinalGames.map(jogo=>{const[set1,set2]=jogo.placar.split('-').map(Number);return set1>set2?jogo.dupla1:jogo.dupla2;});const perdedores=semifinalGames.map(jogo=>{const[set1,set2]=jogo.placar.split('-').map(Number);return set1>set2?jogo.dupla2:jogo.dupla1;});updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria,{dupla1:[...finalistas[0]],dupla2:[...finalistas[1]],placar:'',submetido:false,fase:'Final',rodada:Math.max(...jogos.map(j=>j.rodada))+1},{dupla1:[...perdedores[0]],dupla2:[...perdedores[1]],placar:'',submetido:false,fase:'Disputa 3º Lugar',rodada:Math.max(...jogos.map(j=>j.rodada))+1}]);updateTournamentField('finalConfigurada',true);updateTournamentField('terceiroLugarConfigurado',true);setFaseAtual('final');saveCurrentTournament();};const atualizarPlacarNaFinal=(jogo,placar)=>{console.log('Atualizando placar na final:',{jogo,placar});updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria.map(j=>j===jogo?_objectSpread(_objectSpread({},j),{},{placar,submetido:true}):j)]);updateTournamentField('historicoDuplas',prev=>{const novoHistorico=_objectSpread({},prev);const[g1,g2]=placar.split('-').map(Number);const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');if(!novoHistorico[chave1])novoHistorico[chave1]={dupla:jogo.dupla1,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};if(!novoHistorico[chave2])novoHistorico[chave2]={dupla:jogo.dupla2,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};novoHistorico[chave1].jogos+=1;novoHistorico[chave2].jogos+=1;if(g1>g2){novoHistorico[chave1].pontos+=5;novoHistorico[chave1].jogosVencidos+=1;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;novoHistorico[chave2].pontos+=2;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;}else{novoHistorico[chave2].pontos+=5;novoHistorico[chave2].jogosVencidos+=1;novoHistorico[chave2].gamesVencidos+=g2;novoHistorico[chave2].gamesPerdidos+=g1;novoHistorico[chave1].pontos+=2;novoHistorico[chave1].gamesVencidos+=g1;novoHistorico[chave1].gamesPerdidos+=g2;}console.log('Histórico após final:',novoHistorico);return novoHistorico;});saveCurrentTournament();};const encerrarFaseEliminatoria=()=>{const rodadaAtual=Math.max(...currentTournament.jogosEliminatoria.map(j=>j.rodada));const jogosRodadaAtual=currentTournament.jogosEliminatoria.filter(j=>j.rodada===rodadaAtual);if(!jogosRodadaAtual.every(j=>j.submetido)){alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');return;}if(jogosRodadaAtual.some(j=>j.fase==='Semifinal')&&!currentTournament.finalConfigurada){iniciarFinal(currentTournament.jogosEliminatoria);}else if(jogosRodadaAtual.some(j=>j.fase==='Quartas de Final')&&currentTournament.duplas.length<=11){const vencedoresQuartas=jogosRodadaAtual.map(jogo=>{const[set1,set2]=jogo.placar.split('-').map(Number);return set1>set2?jogo.dupla1:jogo.dupla2;});const semifinalMatches=[{dupla1:[...currentTournament.duplasBye[0]],dupla2:[...vencedoresQuartas[0]],placar:'',submetido:false,fase:'Semifinal',rodada:rodadaAtual+1},{dupla1:[...currentTournament.duplasBye[1]],dupla2:[...vencedoresQuartas[1]],placar:'',submetido:false,fase:'Semifinal',rodada:rodadaAtual+1}];updateTournamentField('jogosEliminatoria',[...currentTournament.jogosEliminatoria.filter(j=>j.rodada<rodadaAtual+1),...semifinalMatches]);}else{alert('Não há mais rodadas para avançar.');}saveCurrentTournament();};const finalizarTorneio=()=>{const final=currentTournament.jogosEliminatoria.find(jogo=>jogo.fase==='Final');const terceiroLugar=currentTournament.jogosEliminatoria.find(jogo=>jogo.fase==='Disputa 3º Lugar');if(!final||!terceiroLugar||!final.placar||!terceiroLugar.placar){alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');return;}const[finalSet1,finalSet2]=final.placar.split('-').map(Number);const[vencedorFinal,perdedorFinal]=finalSet1>finalSet2?[final.dupla1,final.dupla2]:[final.dupla2,final.dupla1];const[terceiroSet1,terceiroSet2]=terceiroLugar.placar.split('-').map(Number);const[terceiro,quarto]=terceiroSet1>terceiroSet2?[terceiroLugar.dupla1,terceiroLugar.dupla2]:[terceiroLugar.dupla2,terceiroLugar.dupla1];updateTournamentField('ranking',[{lugar:1,dupla:vencedorFinal},{lugar:2,dupla:perdedorFinal},{lugar:3,dupla:terceiro},{lugar:4,dupla:quarto}]);updateTournamentField('status','finalizado');setFaseAtual('finalizado');saveCurrentTournament();};const renderClassificacaoGrupo=grupo=>{const ranking=classificarDuplasPorDesempate(grupo.duplas,grupo.jogos);const todosSubmetidos=grupo.jogos.every(jogo=>jogo.submetido);const formatarDataHora=(dataBase,incrementoMinutos)=>{if(!dataBase)return'Pendente';const data=new Date(dataBase);data.setMinutes(data.getMinutes()+incrementoMinutos);const diasSemana=['DOM','SEG','TER','QUA','QUI','SEX','SAB'];const meses=['JAN','FEV','MAR','ABR','MAI','JUN','JUL','AGO','SET','OUT','NOV','DEZ'];const diaSemana=diasSemana[data.getDay()];const dia=String(data.getDate()).padStart(2,'0');const mes=meses[data.getMonth()];const hora=String(data.getHours()).padStart(2,'0');const minuto=String(data.getMinutes()).padStart(2,'0');return\"\".concat(diaSemana,\", \").concat(dia).concat(mes,\" - \").concat(hora,\":\").concat(minuto);};return/*#__PURE__*/_jsxs(\"div\",{className:\"grupo\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Grupo \",grupo.id+1]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"#\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGOS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"SETS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"GAMES\"}),/*#__PURE__*/_jsx(\"th\",{children:\"CLASSIF.\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:ranking.map((dupla,index)=>{const jogosDupla=grupo.jogos.filter(j=>j.dupla1.join('')===dupla.join('')||j.dupla2.join('')===dupla.join(''));const jogosVencidos=jogosDupla.filter(j=>{if(!j.placar)return false;const[g1,g2]=j.placar.split('-').map(Number);return j.dupla1.join('')===dupla.join('')?g1>g2:g2>g1;}).length;const jogosPerdidos=jogosDupla.filter(j=>{if(!j.placar)return false;const[g1,g2]=j.placar.split('-').map(Number);return j.dupla1.join('')===dupla.join('')?g1<g2:g2<g1;}).length;const setsVencidos=jogosVencidos;const setsPerdidos=jogosPerdidos;const gamesVencidos=jogosDupla.reduce((acc,j)=>{if(!j.placar)return acc;const[g1,g2]=j.placar.split('-').map(Number);return acc+(j.dupla1.join('')===dupla.join('')?g1:g2);},0);const gamesPerdidos=jogosDupla.reduce((acc,j)=>{if(!j.placar)return acc;const[g1,g2]=j.placar.split('-').map(Number);return acc+(j.dupla1.join('')===dupla.join('')?g2:g1);},0);const classificado=todosSubmetidos&&index<2?'✓':'';return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:dupla.join(' & ')}),/*#__PURE__*/_jsxs(\"td\",{children:[jogosVencidos,\"/\",jogosPerdidos]}),/*#__PURE__*/_jsxs(\"td\",{children:[setsVencidos,\"/\",setsPerdidos]}),/*#__PURE__*/_jsxs(\"td\",{children:[gamesVencidos,\"/\",gamesPerdidos]}),/*#__PURE__*/_jsx(\"td\",{children:classificado})]},index);})})]}),/*#__PURE__*/_jsx(\"h4\",{children:\"Jogos\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"#\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DATA/HORA\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 01\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PLACAR\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 02\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VENCEDOR\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:grupo.jogos.map((jogo,idx)=>{const[g1,g2]=jogo.placar?jogo.placar.split('-').map(Number):[0,0];const vencedor=jogo.placar?g1>g2?jogo.dupla1.join(' & '):g2>g1?jogo.dupla2.join(' & '):'Empate':'A definir';const incrementoMinutos=idx*30;const dataHora=formatarDataHora(currentTournament.dataTorneio,incrementoMinutos);return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:idx+1}),/*#__PURE__*/_jsx(\"td\",{children:dataHora}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla1.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar||'Pendente'}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla2.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:vencedor})]},idx);})})]})]},\"grupo-\".concat(grupo.id));};const renderizarFaseEliminatoria=jogos=>{const rodadas=[...new Set(jogos.map(j=>j.rodada))].sort((a,b)=>a-b);return rodadas.map(rodada=>{var _jogosDaRodada$;const jogosDaRodada=jogos.filter(j=>j.rodada===rodada);const fase=((_jogosDaRodada$=jogosDaRodada[0])===null||_jogosDaRodada$===void 0?void 0:_jogosDaRodada$.fase)||'';return/*#__PURE__*/_jsxs(\"div\",{className:\"rodada\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[fase,\" - Rodada \",rodada]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 01\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PLACAR\"}),/*#__PURE__*/_jsx(\"th\",{children:\"JOGADORES 02\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VENCEDOR\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:jogosDaRodada.map((jogo,index)=>{const vencedor=jogo.placar&&jogo.submetido?parseInt(jogo.placar.split('-')[0])>parseInt(jogo.placar.split('-')[1])?jogo.dupla1.join(' & '):jogo.dupla2.join(' & '):'A definir';return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla1.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar||'Pendente'}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla2.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:vencedor})]},index);})})]})]},rodada);});};const gerarRelatorioEstatisticas=()=>{const todosOsJogos=[...currentTournament.grupos.flatMap(grupo=>grupo.jogos),...currentTournament.jogosEliminatoria.filter(jogo=>jogo.placar!=='BYE')].filter(jogo=>jogo.submetido);console.log('Todos os jogos para relatório:',todosOsJogos);const totalPartidas=todosOsJogos.length;const totalGames=todosOsJogos.reduce((acc,jogo)=>{const[g1,g2]=jogo.placar.split('-').map(Number);return acc+(isNaN(g1)||isNaN(g2)?0:g1+g2);},0);let historicoDuplas=currentTournament.historicoDuplas||{};if(Object.keys(historicoDuplas).length===0){console.warn('historicoDuplas está vazio ou undefined, reconstruindo a partir dos jogos.');historicoDuplas=currentTournament.duplas.reduce((acc,dupla)=>{acc[dupla.join('')]={dupla,pontos:0,jogos:0,jogosVencidos:0,gamesVencidos:0,gamesPerdidos:0};return acc;},{});todosOsJogos.forEach(jogo=>{const[g1,g2]=jogo.placar.split('-').map(Number);if(isNaN(g1)||isNaN(g2))return;const chave1=jogo.dupla1.join('');const chave2=jogo.dupla2.join('');historicoDuplas[chave1].jogos+=1;historicoDuplas[chave2].jogos+=1;if(g1>g2){historicoDuplas[chave1].pontos+=5;historicoDuplas[chave1].jogosVencidos+=1;historicoDuplas[chave1].gamesVencidos+=g1;historicoDuplas[chave1].gamesPerdidos+=g2;historicoDuplas[chave2].pontos+=2;historicoDuplas[chave2].gamesVencidos+=g2;historicoDuplas[chave2].gamesPerdidos+=g1;}else{historicoDuplas[chave2].pontos+=5;historicoDuplas[chave2].jogosVencidos+=1;historicoDuplas[chave2].gamesVencidos+=g2;historicoDuplas[chave2].gamesPerdidos+=g1;historicoDuplas[chave1].pontos+=2;historicoDuplas[chave1].gamesVencidos+=g1;historicoDuplas[chave1].gamesPerdidos+=g2;}});updateTournamentField('historicoDuplas',historicoDuplas);}const estatisticasDuplas=Object.values(historicoDuplas).map(dados=>{var _currentTournament$ra;const derrotas=dados.jogos-dados.jogosVencidos;const saldoGames=dados.gamesVencidos-dados.gamesPerdidos;const posicaoRanking=((_currentTournament$ra=currentTournament.ranking.find(r=>r.dupla.join('')===dados.dupla.join('')))===null||_currentTournament$ra===void 0?void 0:_currentTournament$ra.lugar)||'-';return{dupla:dados.dupla.join(' & '),jogos:dados.jogos,vitorias:dados.jogosVencidos,derrotas,gamesVencidos:dados.gamesVencidos,gamesPerdidos:dados.gamesPerdidos,saldoGames,posicaoRanking};}).sort((a,b)=>{if(a.posicaoRanking==='-'&&b.posicaoRanking!=='-')return 1;if(b.posicaoRanking==='-'&&a.posicaoRanking!=='-')return-1;if(a.posicaoRanking!=='-'&&b.posicaoRanking!=='-')return a.posicaoRanking-b.posicaoRanking;return b.saldoGames-a.saldoGames;});const melhorCampanha=estatisticasDuplas.reduce((melhor,atual)=>atual.saldoGames>melhor.saldoGames?atual:melhor,estatisticasDuplas[0]||{dupla:'Nenhuma',vitorias:0,jogos:0,saldoGames:0});console.log('Estatísticas finais:',estatisticasDuplas);return{totalPartidas,totalGames,estatisticasDuplas,melhorCampanha};};const resetTournament=()=>{setCurrentTournament(null);setFaseAtual('menu');};const add8Duplas=()=>{const newDuplas=[];for(let i=1;i<=8;i++){newDuplas.push([\"JOGADOR\".concat(i*2-1),\"JOGADOR\".concat(i*2)]);}updateTournamentField('duplas',[...currentTournament.duplas,...newDuplas]);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"header\",{children:/*#__PURE__*/_jsx(\"img\",{src:btConnectLogo,alt:\"btConnect Logo\",className:\"header-logo\"})}),/*#__PURE__*/_jsxs(\"main\",{children:[faseAtual==='menu'&&/*#__PURE__*/_jsx(MeusTorneios,{tournaments:tournaments,onSelectTournament:loadTournament,onCreateNew:createNewTournament,onDeleteTournament:handleDeleteTournament,onImportTournaments:handleImportTournaments// Passa a função para importar\n}),faseAtual==='duplas'&&/*#__PURE__*/_jsxs(\"div\",{className:\"tournament-setup\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Nome do Torneio:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:(currentTournament===null||currentTournament===void 0?void 0:currentTournament.nome)||'',onChange:e=>updateTournamentField('nome',e.target.value.toUpperCase()),placeholder:\"Nome do torneio\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Data de In\\xEDcio:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:(currentTournament===null||currentTournament===void 0?void 0:currentTournament.dataInicio)||'',onChange:e=>updateTournamentField('dataInicio',e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Hora de In\\xEDcio:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:(currentTournament===null||currentTournament===void 0?void 0:currentTournament.horaInicio)||'',onChange:e=>updateTournamentField('horaInicio',e.target.value)})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"image-section\",children:/*#__PURE__*/_jsx(\"img\",{src:gameDay,alt:\"Game Day\",className:\"tournament-image\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"duplas-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"GerarChaves\",onClick:()=>{try{const tournament=generateTournament(currentTournament.nome,currentTournament.duplas,currentTournament.dataInicio,currentTournament.horaInicio);setCurrentTournament(tournament);setTournaments(loadTournaments());setFaseAtual('grupos');}catch(error){alert(error.message);}},children:[/*#__PURE__*/_jsx(\"img\",{src:shuffleIcon,alt:\"Shuffle Icon\",className:\"shuffle-icon\"}),\"Gerar Chaveamento\"]}),(currentTournament===null||currentTournament===void 0?void 0:currentTournament.status)==='rascunho'&&/*#__PURE__*/_jsxs(\"button\",{className:\"iniciar-torneio\",onClick:startTournament,children:[/*#__PURE__*/_jsx(\"img\",{src:tournamentsIcon,alt:\"Tournament Icon\",className:\"button-icon\"}),\"Iniciar Torneio\"]}),/*#__PURE__*/_jsxs(\"button\",{className:\"homePage\",onClick:()=>setFaseAtual('menu'),children:[/*#__PURE__*/_jsx(\"img\",{src:folderIcon,alt:\"Folder Icon\",className:\"folder-icon\"}),\"Meus Torneios\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:add8Duplas,children:\"Adicionar 8 Duplas\"})]}),/*#__PURE__*/_jsx(DuplasList,{duplas:(currentTournament===null||currentTournament===void 0?void 0:currentTournament.duplas)||[],onAddDupla:addDupla,onRemoveDupla:removeDupla})]})]}),faseAtual==='grupos'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FaseDeGrupos,{grupos:currentTournament.grupos,onUpdateGroups:newGrupos=>updateTournamentField('grupos',newGrupos)}),/*#__PURE__*/_jsx(\"button\",{onClick:encerrarFaseGrupos,children:\"Encerrar Fase de Grupos\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"acompanhamento\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Acompanhamento - Fase de Grupos\"}),currentTournament.grupos.map(grupo=>renderClassificacaoGrupo(grupo))]})]}),faseAtual==='eliminatória'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Fase Eliminat\\xF3ria\"}),/*#__PURE__*/_jsx(FaseEliminatoria,{jogos:currentTournament.jogosEliminatoria.filter(jogo=>!jogo.submetido||jogo.rodada===Math.max(...currentTournament.jogosEliminatoria.map(j=>j.rodada))),onAtualizarPlacar:atualizarPlacarNaEliminatoria}),/*#__PURE__*/_jsx(\"button\",{onClick:encerrarFaseEliminatoria,children:\"Encerrar Etapa\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"acompanhamento\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Acompanhamento - Fase Eliminat\\xF3ria\"}),renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)]})]}),faseAtual==='final'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Final do Torneio\"}),/*#__PURE__*/_jsx(FaseFinal,{jogos:currentTournament.jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar'),onAtualizarPlacar:atualizarPlacarNaFinal,onFinalizarTorneio:finalizarTorneio}),currentTournament.jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar').every(jogo=>jogo.submetido)&&/*#__PURE__*/_jsx(\"button\",{onClick:finalizarTorneio,children:\"Encerrar Campeonato\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"acompanhamento\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Acompanhamento - Fase Final\"}),renderizarFaseEliminatoria(currentTournament.jogosEliminatoria.filter(jogo=>jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar'))]})]}),faseAtual==='finalizado'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Ranking Final:\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"POSI\\xC7\\xC3O\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DUPLAS\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:currentTournament.ranking.map((posição,index)=>{let medalha='';let color='#000';if(posição.lugar===1){medalha='🥇';color='gold';}else if(posição.lugar===2){medalha='🥈';color='silver';}else if(posição.lugar===3){medalha='🥉';color='brown';}return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{style:{color},children:[medalha,\" \",posição.lugar,\"\\xBA Colocado\"]}),/*#__PURE__*/_jsx(\"td\",{children:posição.dupla.join(' & ')})]},index);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"relatorio-estatisticas\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Estat\\xEDsticas Gerais do Torneio\"}),(()=>{const{totalPartidas,totalGames,estatisticasDuplas,melhorCampanha}=gerarRelatorioEstatisticas();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Total de Partidas Disputadas:\"}),\" \",totalPartidas]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Total de Games Disputados:\"}),\" \",totalGames]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Melhor Campanha:\"}),\" \",melhorCampanha.dupla,\" ( Saldo de Games: \",melhorCampanha.saldoGames,\", \",melhorCampanha.vitorias,\" vit\\xF3rias em\",' ',melhorCampanha.jogos,\" jogos)\"]}),/*#__PURE__*/_jsx(\"h4\",{children:\"Estat\\xEDsticas por Dupla\"}),estatisticasDuplas.length>0?/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"POSI\\xC7\\xC3O\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DUPLA\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PARTIDAS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"VIT\\xD3RIAS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"DERROTAS\"}),/*#__PURE__*/_jsx(\"th\",{children:\"GAMES (V/P)\"}),/*#__PURE__*/_jsx(\"th\",{children:\"SALDO GAMES\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:estatisticasDuplas.map((dupla,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:dupla.posicaoRanking!=='-'?\"\".concat(dupla.posicaoRanking,\"\\xBA\"):'-'}),/*#__PURE__*/_jsx(\"td\",{children:dupla.dupla}),/*#__PURE__*/_jsx(\"td\",{children:dupla.jogos}),/*#__PURE__*/_jsx(\"td\",{children:dupla.vitorias}),/*#__PURE__*/_jsx(\"td\",{children:dupla.derrotas}),/*#__PURE__*/_jsxs(\"td\",{children:[dupla.gamesVencidos,\"/\",dupla.gamesPerdidos]}),/*#__PURE__*/_jsx(\"td\",{children:dupla.saldoGames})]},index))})]}):/*#__PURE__*/_jsx(\"p\",{children:\"Nenhuma estat\\xEDstica dispon\\xEDvel para as duplas.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"historico-jogos\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Hist\\xF3rico de Jogos\"}),/*#__PURE__*/_jsx(\"h5\",{children:\"Fase de Grupos\"}),currentTournament.grupos.map(grupo=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h6\",{children:[\"Grupo \",grupo.id+1]}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Jogo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 1\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Placar\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 2\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:grupo.jogos.filter(jogo=>jogo.submetido).map((jogo,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla1.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla2.join(' & ')})]},index))})]})]},\"grupo-\".concat(grupo.id))),/*#__PURE__*/_jsx(\"h5\",{children:\"Fase Eliminat\\xF3ria\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Jogo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 1\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Placar\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 2\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Fase\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:currentTournament.jogosEliminatoria.filter(jogo=>jogo.submetido&&jogo.fase!=='Final'&&jogo.fase!=='Disputa 3º Lugar').map((jogo,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla1.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla2.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.fase})]},index))})]}),/*#__PURE__*/_jsx(\"h5\",{children:\"Fase Final\"}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Jogo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 1\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Placar\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Dupla 2\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Fase\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:currentTournament.jogosEliminatoria.filter(jogo=>jogo.submetido&&(jogo.fase==='Final'||jogo.fase==='Disputa 3º Lugar')).map((jogo,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla1.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.placar}),/*#__PURE__*/_jsx(\"td\",{children:jogo.dupla2.join(' & ')}),/*#__PURE__*/_jsx(\"td\",{children:jogo.fase})]},index))})]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Torneio Finalizado em \",new Date().toLocaleString('pt-BR'),\"!\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:resetTournament,className:\"novo-torneio-btn\",children:\"In\\xEDcio\"})]});})()]})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","MeusTorneios","saveTournament","loadTournaments","deleteTournament","generateTournament","classificarDuplasPorDesempate","gameDay","btConnectLogo","tournamentsIcon","shuffleIcon","folderIcon","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","App","currentTournament","setCurrentTournament","faseAtual","setFaseAtual","tournaments","setTournaments","updatedTournaments","loadTournament","nome","tournament","console","log","status","createNewTournament","saveCurrentTournament","dataInicio","horaInicio","tournamentToSave","_objectSpread","updateTournamentField","field","value","prev","updated","concat","newTournament","dataCriacao","dataTorneio","duplas","grupos","jogosEliminatoria","finalConfigurada","terceiroLugarConfigurado","ranking","duplasBye","historicoDuplas","handleDeleteTournament","handleImportTournaments","importedTournaments","Object","entries","forEach","_ref","addDupla","dupla","some","d","includes","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","historicoInicial","reduce","acc","join","pontos","jogos","jogosVencidos","gamesVencidos","gamesPerdidos","Date","toISOString","encerrarFaseGrupos","grupo","jogo","submetido","todosOsJogos","flatMap","novoHistorico","placar","g1","g2","split","map","Number","isNaN","chave1","dupla1","chave2","dupla2","numDuplas","classificados","lugar","rankingGrupo1","rankingGrupo2","semifinalMatches","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","dupla1Str","dupla2Str","rankingGeral","duplasByeLocal","duplasSemifinais","duplasQuartas","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","j","vencedora","chaveVencedora","_novoHistorico$chaveV","_novoHistorico$chaveV2","_novoHistorico$chaveV3","_novoHistorico$chaveV4","_novoHistorico$chaveV5","iniciarFinal","semifinalGames","error","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","dia","String","getDate","padStart","mes","getMonth","hora","getHours","minuto","className","children","id","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","gerarRelatorioEstatisticas","totalPartidas","totalGames","keys","warn","estatisticasDuplas","values","dados","_currentTournament$ra","derrotas","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","resetTournament","add8Duplas","newDuplas","src","alt","onSelectTournament","onCreateNew","onDeleteTournament","onImportTournaments","type","onChange","e","target","toUpperCase","placeholder","onClick","message","onAddDupla","onRemoveDupla","onUpdateGroups","newGrupos","onAtualizarPlacar","onFinalizarTorneio","posição","medalha","color","style","toLocaleString"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport {\n  saveTournament,\n  loadTournaments,\n  deleteTournament,\n  generateTournament,\n  classificarDuplasPorDesempate,\n} from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport shuffleIcon from './assets/icons/shuffle.svg';\nimport folderIcon from './assets/icons/folder.svg';\n\nfunction App() {\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n\n  useEffect(() => {\n    const updatedTournaments = loadTournaments();\n    setTournaments(updatedTournaments);\n  }, []);\n\n  const loadTournament = (nome) => {\n    const tournament = tournaments[nome];\n    if (tournament) {\n      console.log('Carregando torneio do localStorage:', tournament);\n      setCurrentTournament(tournament);\n      setFaseAtual(tournament.status === 'finalizado' ? 'finalizado' : tournament.faseAtual || 'duplas');\n    } else {\n      createNewTournament();\n    }\n  };\n\n  const saveCurrentTournament = () => {\n    if (currentTournament && currentTournament.nome && currentTournament.dataInicio && currentTournament.horaInicio) {\n      const tournamentToSave = { ...currentTournament, faseAtual };\n      console.log('Salvando torneio no localStorage:', tournamentToSave);\n      saveTournament(tournamentToSave);\n      setTournaments(loadTournaments());\n    }\n  };\n\n  const updateTournamentField = (field, value) => {\n    setCurrentTournament((prev) => {\n      const updated = { ...prev, [field]: value };\n      console.log(`Atualizando ${field}:`, value);\n      if (updated.nome && updated.dataInicio && updated.horaInicio) {\n        saveCurrentTournament();\n      }\n      return updated;\n    });\n  };\n\n  const createNewTournament = () => {\n    const newTournament = {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas',\n    };\n    setCurrentTournament(newTournament);\n    setFaseAtual('duplas');\n  };\n\n  const handleDeleteTournament = (nome) => {\n    deleteTournament(nome);\n    setTournaments((prev) => {\n      const updated = { ...prev };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n    }\n  };\n\n  // Função para importar torneios\n  const handleImportTournaments = (importedTournaments) => {\n    setTournaments((prev) => {\n      const updatedTournaments = { ...prev, ...importedTournaments };\n      Object.entries(updatedTournaments).forEach(([nome, tournament]) => {\n        saveTournament(tournament);\n      });\n      return updatedTournaments;\n    });\n  };\n\n  const addDupla = (dupla) => {\n    if (\n      !currentTournament?.duplas.some(\n        (d) => d.includes(dupla[0]) || d.includes(dupla[1])\n      )\n    ) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    updateTournamentField(\n      'duplas',\n      currentTournament.duplas.filter((_, i) => i !== index)\n    );\n  };\n\n  const startTournament = () => {\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (\n      !currentTournament.nome ||\n      !currentTournament.dataInicio ||\n      !currentTournament.horaInicio\n    ) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const duplasSorteadas = [...currentTournament.duplas].sort(() => Math.random() - 0.5);\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n    setCurrentTournament((prev) => ({\n      ...prev,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString(),\n      duplas: duplasSorteadas,\n    }));\n    setFaseAtual('grupos');\n    saveCurrentTournament();\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (\n      currentTournament.grupos.some((grupo) =>\n        grupo.jogos.some((jogo) => !jogo.submetido)\n      )\n    ) {\n      alert(\n        'Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.'\n      );\n      return;\n    }\n\n    const todosOsJogos = currentTournament.grupos.flatMap((grupo) => grupo.jogos);\n    console.log('Jogos da fase de grupos:', todosOsJogos);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach((jogo) => {\n        if (!jogo.placar || !jogo.placar.includes('-')) return;\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      console.log('Histórico após fase de grupos:', novoHistorico);\n      return novoHistorico;\n    });\n\n    const numDuplas = currentTournament.duplas.length;\n\n    if (numDuplas <= 5) {\n      const classificados = classificarDuplasPorDesempate(\n        currentTournament.duplas,\n        todosOsJogos\n      );\n      updateTournamentField('ranking', [\n        { lugar: 1, dupla: classificados[0] },\n        { lugar: 2, dupla: classificados[1] },\n        { lugar: 3, dupla: classificados[2] || ['N/A', 'N/A'] },\n      ]);\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else if (numDuplas === 9 || numDuplas === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(\n        currentTournament.grupos[0].duplas,\n        currentTournament.grupos[0].jogos\n      );\n      const rankingGrupo2 = classificarDuplasPorDesempate(\n        currentTournament.grupos[1].duplas,\n        currentTournament.grupos[1].jogos\n      );\n      const semifinalMatches = [\n        {\n          dupla1: [...rankingGrupo1[0]],\n          dupla2: [...rankingGrupo2[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n        {\n          dupla1: [...rankingGrupo2[0]],\n          dupla2: [...rankingGrupo1[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = currentTournament.grupos\n        .map((grupo) => classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2))\n        .flat();\n      const duplasUnicas = classificadosPorGrupo.filter(\n        (dupla, index, self) =>\n          index === self.findIndex((d) => d.join('') === dupla.join(''))\n      );\n      const jogosClassificados = todosOsJogos.filter((jogo) => {\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return (\n          duplasUnicas.some((d) => d.join('') === dupla1Str) &&\n          duplasUnicas.some((d) => d.join('') === dupla2Str)\n        );\n      });\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n\n      if (numDuplas <= 11) {\n        if (rankingGeral.length < 6) {\n          if (rankingGeral.length === 2) {\n            updateTournamentField('jogosEliminatoria', [\n              {\n                dupla1: [...rankingGeral[0]],\n                dupla2: [...rankingGeral[1]],\n                placar: '',\n                submetido: false,\n                fase: 'Final',\n                rodada: 1,\n              },\n            ]);\n            setFaseAtual('final');\n          } else if (rankingGeral.length <= 4) {\n            updateTournamentField('jogosEliminatoria', [\n              {\n                dupla1: [...rankingGeral[0]],\n                dupla2: [...rankingGeral[1]],\n                placar: '',\n                submetido: false,\n                fase: 'Semifinal',\n                rodada: 1,\n              },\n              {\n                dupla1: [...rankingGeral[2]],\n                dupla2: rankingGeral[3] ? [...rankingGeral[3]] : ['BYE', ''],\n                placar: '',\n                submetido: false,\n                fase: 'Semifinal',\n                rodada: 1,\n              },\n            ]);\n            setFaseAtual('eliminatória');\n          } else {\n            const duplasByeLocal = rankingGeral.slice(0, 2);\n            const duplasSemifinais = rankingGeral.slice(2, 4);\n            updateTournamentField('jogosEliminatoria', [\n              {\n                dupla1: [...duplasSemifinais[0]],\n                dupla2: duplasSemifinais[1] ? [...duplasSemifinais[1]] : ['BYE', ''],\n                placar: '',\n                submetido: false,\n                fase: 'Semifinal',\n                rodada: 1,\n              },\n            ]);\n            updateTournamentField('duplasBye', duplasByeLocal);\n            setFaseAtual('eliminatória');\n          }\n        } else {\n          const duplasByeLocal = rankingGeral.slice(0, 2);\n          const duplasQuartas = rankingGeral.slice(2, 6);\n          const jogosQuartas = [\n            {\n              dupla1: [...duplasQuartas[0]],\n              dupla2: [...duplasQuartas[1]],\n              placar: '',\n              submetido: false,\n              fase: 'Quartas de Final',\n              rodada: 1,\n            },\n            {\n              dupla1: [...duplasQuartas[2]],\n              dupla2: [...duplasQuartas[3]],\n              placar: '',\n              submetido: false,\n              fase: 'Quartas de Final',\n              rodada: 1,\n            },\n          ];\n          updateTournamentField('jogosEliminatoria', jogosQuartas);\n          updateTournamentField('duplasBye', duplasByeLocal);\n          setFaseAtual('eliminatória');\n        }\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: top16[i + 1] ? [...top16[i + 1]] : ['BYE', ''],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1,\n          });\n        }\n        updateTournamentField('jogosEliminatoria', jogosOitavas);\n        updateTournamentField('duplasBye', []);\n        setFaseAtual('eliminatória');\n      }\n    }\n    saveCurrentTournament();\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    console.log('Atualizando placar na eliminatória:', { jogo, placar });\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        ),\n      ]);\n      const vencedora = jogo.dupla1[0] === 'BYE' ? jogo.dupla2 : jogo.dupla1;\n      const chaveVencedora = vencedora.join('');\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        novoHistorico[chaveVencedora] = {\n          dupla: vencedora,\n          jogos: (novoHistorico[chaveVencedora]?.jogos || 0) + 1,\n          jogosVencidos: (novoHistorico[chaveVencedora]?.jogosVencidos || 0) + 1,\n          pontos: (novoHistorico[chaveVencedora]?.pontos || 0) + 5,\n          gamesVencidos: novoHistorico[chaveVencedora]?.gamesVencidos || 0,\n          gamesPerdidos: novoHistorico[chaveVencedora]?.gamesPerdidos || 0,\n        };\n        console.log('Histórico após eliminatória (BYE):', novoHistorico);\n        return novoHistorico;\n      });\n    } else {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar, submetido: true } : j\n        ),\n      ]);\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após eliminatória:', novoHistorico);\n        return novoHistorico;\n      });\n    }\n    saveCurrentTournament();\n  };\n\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter((jogo) => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria,\n      {\n        dupla1: [...finalistas[0]],\n        dupla2: [...finalistas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n      {\n        dupla1: [...perdedores[0]],\n        dupla2: [...perdedores[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n    ]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    console.log('Atualizando placar na final:', { jogo, placar });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria.map((j) =>\n        j === jogo ? { ...j, placar, submetido: true } : j\n      ),\n    ]);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1])\n        novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      if (!novoHistorico[chave2])\n        novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      console.log('Histórico após final:', novoHistorico);\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(\n      ...currentTournament.jogosEliminatoria.map((j) => j.rodada)\n    );\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(\n      (j) => j.rodada === rodadaAtual\n    );\n\n    if (!jogosRodadaAtual.every((j) => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    if (\n      jogosRodadaAtual.some((j) => j.fase === 'Semifinal') &&\n      !currentTournament.finalConfigurada\n    ) {\n      iniciarFinal(currentTournament.jogosEliminatoria);\n    } else if (\n      jogosRodadaAtual.some((j) => j.fase === 'Quartas de Final') &&\n      currentTournament.duplas.length <= 11\n    ) {\n      const vencedoresQuartas = jogosRodadaAtual.map((jogo) => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      const semifinalMatches = [\n        {\n          dupla1: [...currentTournament.duplasBye[0]],\n          dupla2: [...vencedoresQuartas[0]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n        {\n          dupla1: [...currentTournament.duplasBye[1]],\n          dupla2: [...vencedoresQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.filter((j) => j.rodada < rodadaAtual + 1),\n        ...semifinalMatches,\n      ]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n    saveCurrentTournament();\n  };\n\n  const finalizarTorneio = () => {\n    const final = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Final'\n    );\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Disputa 3º Lugar'\n    );\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] =\n      finalSet1 > finalSet2\n        ? [final.dupla1, final.dupla2]\n        : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] =\n      terceiroSet1 > terceiroSet2\n        ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n        : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    updateTournamentField('ranking', [\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto },\n    ]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every((jogo) => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(\n                (j) =>\n                  j.dupla1.join('') === dupla.join('') ||\n                  j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar\n                ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate'\n                : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(currentTournament.dataTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map((j) => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map((rodada) => {\n      const jogosDaRodada = jogos.filter((j) => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor =\n                  jogo.placar && jogo.submetido\n                    ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1])\n                      ? jogo.dupla1.join(' & ')\n                      : jogo.dupla2.join(' & ')\n                    : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [\n      ...currentTournament.grupos.flatMap((grupo) => grupo.jogos),\n      ...currentTournament.jogosEliminatoria.filter((jogo) => jogo.placar !== 'BYE'),\n    ].filter((jogo) => jogo.submetido);\n\n    console.log('Todos os jogos para relatório:', todosOsJogos);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + (isNaN(g1) || isNaN(g2) ? 0 : g1 + g2);\n    }, 0);\n\n    let historicoDuplas = currentTournament.historicoDuplas || {};\n    if (Object.keys(historicoDuplas).length === 0) {\n      console.warn('historicoDuplas está vazio ou undefined, reconstruindo a partir dos jogos.');\n      historicoDuplas = currentTournament.duplas.reduce((acc, dupla) => {\n        acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        return acc;\n      }, {});\n\n      todosOsJogos.forEach((jogo) => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        historicoDuplas[chave1].jogos += 1;\n        historicoDuplas[chave2].jogos += 1;\n        if (g1 > g2) {\n          historicoDuplas[chave1].pontos += 5;\n          historicoDuplas[chave1].jogosVencidos += 1;\n          historicoDuplas[chave1].gamesVencidos += g1;\n          historicoDuplas[chave1].gamesPerdidos += g2;\n          historicoDuplas[chave2].pontos += 2;\n          historicoDuplas[chave2].gamesVencidos += g2;\n          historicoDuplas[chave2].gamesPerdidos += g1;\n        } else {\n          historicoDuplas[chave2].pontos += 5;\n          historicoDuplas[chave2].jogosVencidos += 1;\n          historicoDuplas[chave2].gamesVencidos += g2;\n          historicoDuplas[chave2].gamesPerdidos += g1;\n          historicoDuplas[chave1].pontos += 2;\n          historicoDuplas[chave1].gamesVencidos += g1;\n          historicoDuplas[chave1].gamesPerdidos += g2;\n        }\n      });\n      updateTournamentField('historicoDuplas', historicoDuplas);\n    }\n\n    const estatisticasDuplas = Object.values(historicoDuplas).map((dados) => {\n      const derrotas = dados.jogos - dados.jogosVencidos;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking =\n        currentTournament.ranking.find((r) => r.dupla.join('') === dados.dupla.join(''))?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        derrotas,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        posicaoRanking,\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n\n    const melhorCampanha = estatisticasDuplas.reduce(\n      (melhor, atual) => (atual.saldoGames > melhor.saldoGames ? atual : melhor),\n      estatisticasDuplas[0] || { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 }\n    );\n\n    console.log('Estatísticas finais:', estatisticasDuplas);\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha,\n    };\n  };\n\n  const resetTournament = () => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n  };\n\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'menu' && (\n          <MeusTorneios\n            tournaments={tournaments}\n            onSelectTournament={loadTournament}\n            onCreateNew={createNewTournament}\n            onDeleteTournament={handleDeleteTournament}\n            onImportTournaments={handleImportTournaments} // Passa a função para importar\n          />\n        )}\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={currentTournament?.nome || ''}\n                  onChange={(e) =>\n                    updateTournamentField('nome', e.target.value.toUpperCase())\n                  }\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={currentTournament?.dataInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('dataInicio', e.target.value)\n                  }\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={currentTournament?.horaInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('horaInicio', e.target.value)\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button\n                  className=\"GerarChaves\"\n                  onClick={() => {\n                    try {\n                      const tournament = generateTournament(\n                        currentTournament.nome,\n                        currentTournament.duplas,\n                        currentTournament.dataInicio,\n                        currentTournament.horaInicio\n                      );\n                      setCurrentTournament(tournament);\n                      setTournaments(loadTournaments());\n                      setFaseAtual('grupos');\n                    } catch (error) {\n                      alert(error.message);\n                    }\n                  }}\n                >\n                  <img\n                    src={shuffleIcon}\n                    alt=\"Shuffle Icon\"\n                    className=\"shuffle-icon\"\n                  />\n                  Gerar Chaveamento\n                </button>\n                {currentTournament?.status === 'rascunho' && (\n                  <button className=\"iniciar-torneio\" onClick={startTournament}>\n                    <img\n                      src={tournamentsIcon}\n                      alt=\"Tournament Icon\"\n                      className=\"button-icon\"\n                    />\n                    Iniciar Torneio\n                  </button>\n                )}\n                <button className=\"homePage\" onClick={() => setFaseAtual('menu')}>\n                  <img\n                    src={folderIcon}\n                    alt=\"Folder Icon\"\n                    className=\"folder-icon\"\n                  />\n                  Meus Torneios\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n              </div>\n              <DuplasList\n                duplas={currentTournament?.duplas || []}\n                onAddDupla={addDupla}\n                onRemoveDupla={removeDupla}\n              />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos\n              grupos={currentTournament.grupos}\n              onUpdateGroups={(newGrupos) =>\n                updateTournamentField('grupos', newGrupos)\n              }\n            />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {currentTournament.grupos.map((grupo) => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) =>\n                  !jogo.submetido ||\n                  jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map((j) => j.rodada))\n              )}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {currentTournament.jogosEliminatoria\n              .filter((jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')\n              .every((jogo) => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(\n                currentTournament.jogosEliminatoria.filter(\n                  (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n                )\n              )}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLAS</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentTournament.ranking.map((posição, index) => {\n                  let medalha = '';\n                  let color = '#000';\n                  if (posição.lugar === 1) {\n                    medalha = '🥇';\n                    color = 'gold';\n                  } else if (posição.lugar === 2) {\n                    medalha = '🥈';\n                    color = 'silver';\n                  } else if (posição.lugar === 3) {\n                    medalha = '🥉';\n                    color = 'brown';\n                  }\n                  return (\n                    <tr key={index}>\n                      <td style={{ color }}>{medalha} {posição.lugar}º Colocado</td>\n                      <td>{posição.dupla.join(' & ')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <div className=\"relatorio-estatisticas\">\n              <h3>Estatísticas Gerais do Torneio</h3>\n              {(() => {\n                const { totalPartidas, totalGames, estatisticasDuplas, melhorCampanha } =\n                  gerarRelatorioEstatisticas();\n                return (\n                  <>\n                    <p><strong>Total de Partidas Disputadas:</strong> {totalPartidas}</p>\n                    <p><strong>Total de Games Disputados:</strong> {totalGames}</p>\n                    <p>\n                      <strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (\n                      Saldo de Games: {melhorCampanha.saldoGames}, {melhorCampanha.vitorias} vitórias em{' '}\n                      {melhorCampanha.jogos} jogos)\n                    </p>\n                    <h4>Estatísticas por Dupla</h4>\n                    {estatisticasDuplas.length > 0 ? (\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>POSIÇÃO</th>\n                            <th>DUPLA</th>\n                            <th>PARTIDAS</th>\n                            <th>VITÓRIAS</th>\n                            <th>DERROTAS</th>\n                            <th>GAMES (V/P)</th>\n                            <th>SALDO GAMES</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {estatisticasDuplas.map((dupla, index) => (\n                            <tr key={index}>\n                              <td>{dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'}</td>\n                              <td>{dupla.dupla}</td>\n                              <td>{dupla.jogos}</td>\n                              <td>{dupla.vitorias}</td>\n                              <td>{dupla.derrotas}</td>\n                              <td>{dupla.gamesVencidos}/{dupla.gamesPerdidos}</td>\n                              <td>{dupla.saldoGames}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    ) : (\n                      <p>Nenhuma estatística disponível para as duplas.</p>\n                    )}\n\n                    <div className=\"historico-jogos\">\n                      <h4>Histórico de Jogos</h4>\n                      <h5>Fase de Grupos</h5>\n                      {currentTournament.grupos.map((grupo) => (\n                        <div key={`grupo-${grupo.id}`}>\n                          <h6>Grupo {grupo.id + 1}</h6>\n                          <table>\n                            <thead>\n                              <tr>\n                                <th>Jogo</th>\n                                <th>Dupla 1</th>\n                                <th>Placar</th>\n                                <th>Dupla 2</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {grupo.jogos\n                                .filter((jogo) => jogo.submetido)\n                                .map((jogo, index) => (\n                                  <tr key={index}>\n                                    <td>{index + 1}</td>\n                                    <td>{jogo.dupla1.join(' & ')}</td>\n                                    <td>{jogo.placar}</td>\n                                    <td>{jogo.dupla2.join(' & ')}</td>\n                                  </tr>\n                                ))}\n                            </tbody>\n                          </table>\n                        </div>\n                      ))}\n\n                      <h5>Fase Eliminatória</h5>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Jogo</th>\n                            <th>Dupla 1</th>\n                            <th>Placar</th>\n                            <th>Dupla 2</th>\n                            <th>Fase</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {currentTournament.jogosEliminatoria\n                            .filter((jogo) => jogo.submetido && jogo.fase !== 'Final' && jogo.fase !== 'Disputa 3º Lugar')\n                            .map((jogo, index) => (\n                              <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{jogo.dupla1.join(' & ')}</td>\n                                <td>{jogo.placar}</td>\n                                <td>{jogo.dupla2.join(' & ')}</td>\n                                <td>{jogo.fase}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n\n                      <h5>Fase Final</h5>\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>Jogo</th>\n                            <th>Dupla 1</th>\n                            <th>Placar</th>\n                            <th>Dupla 2</th>\n                            <th>Fase</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {currentTournament.jogosEliminatoria\n                            .filter((jogo) => jogo.submetido && (jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))\n                            .map((jogo, index) => (\n                              <tr key={index}>\n                                <td>{index + 1}</td>\n                                <td>{jogo.dupla1.join(' & ')}</td>\n                                <td>{jogo.placar}</td>\n                                <td>{jogo.dupla2.join(' & ')}</td>\n                                <td>{jogo.fase}</td>\n                              </tr>\n                            ))}\n                        </tbody>\n                      </table>\n                    </div>\n\n                    <p>Torneio Finalizado em {new Date().toLocaleString('pt-BR')}!</p>\n                    <button onClick={resetTournament} className=\"novo-torneio-btn\">\n                      Início\n                    </button>\n                  </>\n                );\n              })()}\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}