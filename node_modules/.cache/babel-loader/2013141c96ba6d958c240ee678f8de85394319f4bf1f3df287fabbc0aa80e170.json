{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport { saveTournament, loadTournaments, deleteTournament, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport shuffleIcon from './assets/icons/shuffle.svg';\nimport folderIcon from './assets/icons/folder.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n  useEffect(() => {\n    const updatedTournaments = loadTournaments();\n    setTournaments(updatedTournaments);\n    const activeTournamentName = localStorage.getItem('activeTournament');\n    if (activeTournamentName && updatedTournaments[activeTournamentName]) {\n      const activeTournament = updatedTournaments[activeTournamentName];\n      setCurrentTournament(activeTournament);\n      setFaseAtual(activeTournament.status === 'finalizado' ? 'finalizado' : activeTournament.faseAtual || 'duplas');\n    }\n  }, []);\n  const loadTournament = nome => {\n    const tournament = tournaments[nome];\n    if (tournament) {\n      console.log('Carregando torneio do localStorage:', tournament);\n      setCurrentTournament(tournament);\n      setFaseAtual(tournament.status === 'finalizado' ? 'finalizado' : tournament.faseAtual || 'duplas');\n      localStorage.setItem('activeTournament', nome);\n    } else {\n      createNewTournament();\n    }\n  };\n  const saveCurrentTournament = () => {\n    if (currentTournament && currentTournament.nome) {\n      const tournamentToSave = {\n        ...currentTournament,\n        faseAtual\n      };\n      console.log('Salvando torneio no localStorage:', tournamentToSave);\n      saveTournament(tournamentToSave);\n      setTournaments(loadTournaments());\n    }\n  };\n  const updateTournamentField = (field, value) => {\n    setCurrentTournament(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const createNewTournament = () => {\n    const newTournament = {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas'\n    };\n    setCurrentTournament(newTournament);\n    setFaseAtual('duplas');\n    localStorage.removeItem('activeTournament');\n  };\n  const handleDeleteTournament = nome => {\n    deleteTournament(nome);\n    setTournaments(prev => {\n      const updated = {\n        ...prev\n      };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n      localStorage.removeItem('activeTournament');\n    }\n  };\n  const handleImportTournaments = importedTournaments => {\n    setTournaments(prev => {\n      const updatedTournaments = {\n        ...prev,\n        ...importedTournaments\n      };\n      Object.entries(updatedTournaments).forEach(([nome, tournament]) => {\n        saveTournament(tournament);\n      });\n      return updatedTournaments;\n    });\n  };\n  const addDupla = dupla => {\n    if (!(currentTournament !== null && currentTournament !== void 0 && currentTournament.duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1])))) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  };\n  const removeDupla = index => {\n    updateTournamentField('duplas', currentTournament.duplas.filter((_, i) => i !== index));\n  };\n  const generateGroups = () => {\n    if (!currentTournament) {\n      alert('Nenhum torneio ativo para gerar chaveamento.');\n      return;\n    }\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para gerar o chaveamento.');\n      return;\n    }\n    if (!currentTournament.nome || !currentTournament.dataInicio || !currentTournament.horaInicio) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const duplasSorteadas = [...currentTournament.duplas].sort(() => Math.random() - 0.5);\n    const numDuplas = duplasSorteadas.length;\n    let grupos = [];\n    if (numDuplas <= 5) {\n      grupos = [{\n        id: 0,\n        duplas: duplasSorteadas,\n        jogos: []\n      }];\n    } else if (numDuplas <= 10) {\n      const meio = Math.ceil(numDuplas / 2);\n      grupos = [{\n        id: 0,\n        duplas: duplasSorteadas.slice(0, meio),\n        jogos: []\n      }, {\n        id: 1,\n        duplas: duplasSorteadas.slice(meio),\n        jogos: []\n      }];\n    } else {\n      const duplasPorGrupo = Math.floor(numDuplas / 4);\n      for (let i = 0; i < 4; i++) {\n        const inicio = i * duplasPorGrupo;\n        const fim = (i + 1) * duplasPorGrupo;\n        grupos.push({\n          id: i,\n          duplas: duplasSorteadas.slice(inicio, fim),\n          jogos: []\n        });\n      }\n      const restantes = duplasSorteadas.slice(duplasPorGrupo * 4);\n      for (let i = 0; i < restantes.length; i++) {\n        grupos[i % 4].duplas.push(restantes[i]);\n      }\n    }\n    grupos.forEach(grupo => {\n      grupo.jogos = [];\n      for (let i = 0; i < grupo.duplas.length; i++) {\n        for (let j = i + 1; j < grupo.duplas.length; j++) {\n          grupo.jogos.push({\n            dupla1: grupo.duplas[i],\n            dupla2: grupo.duplas[j],\n            placar: '',\n            submetido: false\n          });\n        }\n      }\n    });\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = {\n        dupla,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      return acc;\n    }, {});\n    setCurrentTournament(prev => ({\n      ...prev,\n      duplas: duplasSorteadas,\n      grupos,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString()\n    }));\n    setFaseAtual('grupos');\n    localStorage.setItem('activeTournament', currentTournament.nome);\n    saveCurrentTournament();\n  };\n  const startTournament = () => {\n    if (!currentTournament) {\n      alert('Nenhum torneio ativo para iniciar.');\n      return;\n    }\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!currentTournament.nome || !currentTournament.dataInicio || !currentTournament.horaInicio) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    if (currentTournament.grupos.length === 0) {\n      alert('Gere o chaveamento antes de iniciar o torneio.');\n      return;\n    }\n    setCurrentTournament(prev => ({\n      ...prev,\n      status: 'em andamento',\n      dataCriacao: prev.dataCriacao || new Date().toISOString()\n    }));\n    setFaseAtual('grupos');\n    localStorage.setItem('activeTournament', currentTournament.nome);\n    saveCurrentTournament();\n  };\n  const encerrarFaseGrupos = () => {\n    if (!currentTournament) {\n      alert('Nenhum torneio ativo para encerrar a fase de grupos.');\n      return;\n    }\n    if (currentTournament.grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = currentTournament.grupos.flatMap(grupo => grupo.jogos);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      todosOsJogos.forEach(jogo => {\n        if (!jogo.placar || !jogo.placar.includes('-')) return;\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      return novoHistorico;\n    });\n    const numDuplas = currentTournament.duplas.length;\n    if (numDuplas <= 5) {\n      const classificados = classificarDuplasPorDesempate(currentTournament.duplas, todosOsJogos);\n      updateTournamentField('ranking', [{\n        lugar: 1,\n        dupla: classificados[0]\n      }, {\n        lugar: 2,\n        dupla: classificados[1]\n      }, {\n        lugar: 3,\n        dupla: classificados[2] || ['N/A', 'N/A']\n      }]);\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else if (numDuplas === 9 || numDuplas === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(currentTournament.grupos[0].duplas, currentTournament.grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(currentTournament.grupos[1].duplas, currentTournament.grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: [...rankingGrupo1[0]],\n        dupla2: [...rankingGrupo2[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: [...rankingGrupo2[0]],\n        dupla2: [...rankingGrupo1[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      updateTournamentField('jogosEliminatoria', semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = currentTournament.grupos.map(grupo => classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2)).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d.join('') === dupla.join('')));\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      if (numDuplas <= 11) {\n        if (rankingGeral.length < 6) {\n          if (rankingGeral.length === 2) {\n            updateTournamentField('jogosEliminatoria', [{\n              dupla1: [...rankingGeral[0]],\n              dupla2: [...rankingGeral[1]],\n              placar: '',\n              submetido: false,\n              fase: 'Final',\n              rodada: 1\n            }]);\n            setFaseAtual('final');\n          } else if (rankingGeral.length <= 4) {\n            updateTournamentField('jogosEliminatoria', [{\n              dupla1: [...rankingGeral[0]],\n              dupla2: [...rankingGeral[1]],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1\n            }, {\n              dupla1: [...rankingGeral[2]],\n              dupla2: rankingGeral[3] ? [...rankingGeral[3]] : ['BYE', ''],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1\n            }]);\n            setFaseAtual('eliminatória');\n          } else {\n            const duplasByeLocal = rankingGeral.slice(0, 2);\n            const duplasSemifinais = rankingGeral.slice(2, 4);\n            updateTournamentField('jogosEliminatoria', [{\n              dupla1: [...duplasSemifinais[0]],\n              dupla2: duplasSemifinais[1] ? [...duplasSemifinais[1]] : ['BYE', ''],\n              placar: '',\n              submetido: false,\n              fase: 'Semifinal',\n              rodada: 1\n            }]);\n            updateTournamentField('duplasBye', duplasByeLocal);\n            setFaseAtual('eliminatória');\n          }\n        } else {\n          const duplasByeLocal = rankingGeral.slice(0, 2);\n          const duplasQuartas = rankingGeral.slice(2, 6);\n          const jogosQuartas = [{\n            dupla1: [...duplasQuartas[0]],\n            dupla2: [...duplasQuartas[1]],\n            placar: '',\n            submetido: false,\n            fase: 'Quartas de Final',\n            rodada: 1\n          }, {\n            dupla1: [...duplasQuartas[2]],\n            dupla2: [...duplasQuartas[3]],\n            placar: '',\n            submetido: false,\n            fase: 'Quartas de Final',\n            rodada: 1\n          }];\n          updateTournamentField('jogosEliminatoria', jogosQuartas);\n          updateTournamentField('duplasBye', duplasByeLocal);\n          setFaseAtual('eliminatória');\n        }\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: top16[i + 1] ? [...top16[i + 1]] : ['BYE', ''],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n        updateTournamentField('jogosEliminatoria', jogosOitavas);\n        updateTournamentField('duplasBye', []);\n        setFaseAtual('eliminatória');\n      }\n    }\n    saveCurrentTournament();\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (!currentTournament) return;\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j)]);\n      const vencedora = jogo.dupla1[0] === 'BYE' ? jogo.dupla2 : jogo.dupla1;\n      const chaveVencedora = vencedora.join('');\n      updateTournamentField('historicoDuplas', prev => {\n        var _novoHistorico$chaveV, _novoHistorico$chaveV2, _novoHistorico$chaveV3, _novoHistorico$chaveV4, _novoHistorico$chaveV5;\n        const novoHistorico = {\n          ...prev\n        };\n        novoHistorico[chaveVencedora] = {\n          dupla: vencedora,\n          jogos: (((_novoHistorico$chaveV = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV === void 0 ? void 0 : _novoHistorico$chaveV.jogos) || 0) + 1,\n          jogosVencidos: (((_novoHistorico$chaveV2 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV2 === void 0 ? void 0 : _novoHistorico$chaveV2.jogosVencidos) || 0) + 1,\n          pontos: (((_novoHistorico$chaveV3 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV3 === void 0 ? void 0 : _novoHistorico$chaveV3.pontos) || 0) + 5,\n          gamesVencidos: ((_novoHistorico$chaveV4 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV4 === void 0 ? void 0 : _novoHistorico$chaveV4.gamesVencidos) || 0,\n          gamesPerdidos: ((_novoHistorico$chaveV5 = novoHistorico[chaveVencedora]) === null || _novoHistorico$chaveV5 === void 0 ? void 0 : _novoHistorico$chaveV5.gamesPerdidos) || 0\n        };\n        return novoHistorico;\n      });\n    } else {\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n        ...j,\n        placar,\n        submetido: true\n      } : j)]);\n      updateTournamentField('historicoDuplas', prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n    }\n    saveCurrentTournament();\n  };\n  const iniciarFinal = jogos => {\n    if (!currentTournament) return;\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria, {\n      dupla1: [...finalistas[0]],\n      dupla2: [...finalistas[1]],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }, {\n      dupla1: [...perdedores[0]],\n      dupla2: [...perdedores[1]],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...jogos.map(j => j.rodada)) + 1\n    }]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    if (!currentTournament) return;\n    updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.map(j => j === jogo ? {\n      ...j,\n      placar,\n      submetido: true\n    } : j)]);\n    updateTournamentField('historicoDuplas', prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n        dupla: jogo.dupla1,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n        dupla: jogo.dupla2,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n  const encerrarFaseEliminatoria = () => {\n    if (!currentTournament) return;\n    const rodadaAtual = Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !currentTournament.finalConfigurada) {\n      iniciarFinal(currentTournament.jogosEliminatoria);\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && currentTournament.duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      const semifinalMatches = [{\n        dupla1: [...currentTournament.duplasBye[0]],\n        dupla2: [...vencedoresQuartas[0]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: [...currentTournament.duplasBye[1]],\n        dupla2: [...vencedoresQuartas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      updateTournamentField('jogosEliminatoria', [...currentTournament.jogosEliminatoria.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n    saveCurrentTournament();\n  };\n  const finalizarTorneio = () => {\n    if (!currentTournament) return;\n    const final = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    updateTournamentField('ranking', [{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  };\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 764,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 767,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 768,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n            }).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 804,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 805,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 806,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 807,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 808,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 809,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 803,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 771,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 815,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 819,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 820,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 821,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 822,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 818,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const incrementoMinutos = idx * 30;\n            const dataHora = formatarDataHora(currentTournament.dataTorneio, incrementoMinutos);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 837,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 838,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 839,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 841,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 842,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 836,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 758,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 863,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 864,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 865,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 866,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 862,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 879,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 880,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 881,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 882,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 878,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const gerarRelatorioEstatisticas = () => {\n    if (!currentTournament) return {\n      totalPartidas: 0,\n      totalGames: 0,\n      estatisticasDuplas: [],\n      melhorCampanha: {\n        dupla: 'Nenhuma',\n        vitorias: 0,\n        jogos: 0,\n        saldoGames: 0\n      }\n    };\n    const todosOsJogos = [...currentTournament.grupos.flatMap(grupo => grupo.jogos), ...currentTournament.jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')].filter(jogo => jogo.submetido);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + (isNaN(g1) || isNaN(g2) ? 0 : g1 + g2);\n    }, 0);\n    let historicoDuplas = currentTournament.historicoDuplas || {};\n    if (Object.keys(historicoDuplas).length === 0) {\n      historicoDuplas = currentTournament.duplas.reduce((acc, dupla) => {\n        acc[dupla.join('')] = {\n          dupla,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        return acc;\n      }, {});\n      todosOsJogos.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        historicoDuplas[chave1].jogos += 1;\n        historicoDuplas[chave2].jogos += 1;\n        if (g1 > g2) {\n          historicoDuplas[chave1].pontos += 5;\n          historicoDuplas[chave1].jogosVencidos += 1;\n          historicoDuplas[chave1].gamesVencidos += g1;\n          historicoDuplas[chave1].gamesPerdidos += g2;\n          historicoDuplas[chave2].pontos += 2;\n          historicoDuplas[chave2].gamesVencidos += g2;\n          historicoDuplas[chave2].gamesPerdidos += g1;\n        } else {\n          historicoDuplas[chave2].pontos += 5;\n          historicoDuplas[chave2].jogosVencidos += 1;\n          historicoDuplas[chave2].gamesVencidos += g2;\n          historicoDuplas[chave2].gamesPerdidos += g1;\n          historicoDuplas[chave1].pontos += 2;\n          historicoDuplas[chave1].gamesVencidos += g1;\n          historicoDuplas[chave1].gamesPerdidos += g2;\n        }\n      });\n      updateTournamentField('historicoDuplas', historicoDuplas);\n    }\n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      var _currentTournament$ra;\n      const derrotas = dados.jogos - dados.jogosVencidos;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ((_currentTournament$ra = currentTournament.ranking.find(r => r.dupla.join('') === dados.dupla.join(''))) === null || _currentTournament$ra === void 0 ? void 0 : _currentTournament$ra.lugar) || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        derrotas,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => atual.saldoGames > melhor.saldoGames ? atual : melhor, estatisticasDuplas[0] || {\n      dupla: 'Nenhuma',\n      vitorias: 0,\n      jogos: 0,\n      saldoGames: 0\n    });\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n  const resetTournament = () => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n    localStorage.removeItem('activeTournament');\n  };\n  const add8Duplas = () => {\n    if (!currentTournament) return;\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  };\n  const handleBackToMenu = () => {\n    if (currentTournament && currentTournament.status !== 'rascunho') {\n      saveCurrentTournament();\n    }\n    setFaseAtual('menu');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: btConnectLogo,\n        alt: \"btConnect Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1000,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'menu' && /*#__PURE__*/_jsxDEV(MeusTorneios, {\n        tournaments: tournaments,\n        onSelectTournament: loadTournament,\n        onCreateNew: createNewTournament,\n        onDeleteTournament: handleDeleteTournament,\n        onImportTournaments: handleImportTournaments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1005,\n        columnNumber: 11\n      }, this), faseAtual === 'duplas' && currentTournament && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1017,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: currentTournament.nome || '',\n              onChange: e => updateTournamentField('nome', e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1018,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1016,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1028,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: currentTournament.dataInicio || '',\n              onChange: e => updateTournamentField('dataInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1029,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1027,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1038,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: currentTournament.horaInicio || '',\n              onChange: e => updateTournamentField('horaInicio', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1039,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1037,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1049,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"GerarChaves\",\n              onClick: generateGroups,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: shuffleIcon,\n                alt: \"Shuffle Icon\",\n                className: \"shuffle-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1054,\n                columnNumber: 19\n              }, this), \"Gerar Chaveamento\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1053,\n              columnNumber: 17\n            }, this), currentTournament.status === 'rascunho' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: tournamentsIcon,\n                alt: \"Tournament Icon\",\n                className: \"button-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1059,\n                columnNumber: 21\n              }, this), \"Iniciar Torneio\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1058,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"homePage\",\n              onClick: handleBackToMenu,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: folderIcon,\n                alt: \"Folder Icon\",\n                className: \"folder-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1064,\n                columnNumber: 19\n              }, this), \"Meus Torneios\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1063,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1067,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1052,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: currentTournament.duplas || [],\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1069,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && currentTournament && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: currentTournament.grupos,\n          onUpdateGroups: newGrupos => {\n            updateTournamentField('grupos', newGrupos);\n            saveCurrentTournament();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1079,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1088,\n            columnNumber: 15\n          }, this), currentTournament.grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1087,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && currentTournament && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1095,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1096,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1106,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && currentTournament && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1114,\n          columnNumber: 13\n        }, this), currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1124,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1127,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(currentTournament.jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && currentTournament && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1142,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"DUPLAS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1143,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1141,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: currentTournament.ranking.map((posição, index) => {\n              let medalha = '';\n              let color = '#000';\n              if (posição.lugar === 1) {\n                medalha = '🥇';\n                color = 'gold';\n              } else if (posição.lugar === 2) {\n                medalha = '🥈';\n                color = 'silver';\n              } else if (posição.lugar === 3) {\n                medalha = '🥉';\n                color = 'brown';\n              }\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color\n                  },\n                  children: [medalha, \" \", posição.lugar, \"\\xBA Colocado\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1162,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: posição.dupla.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1163,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1161,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1146,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relatorio-estatisticas\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Estat\\xEDsticas Gerais do Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1170,\n            columnNumber: 15\n          }, this), (() => {\n            const {\n              totalPartidas,\n              totalGames,\n              estatisticasDuplas,\n              melhorCampanha\n            } = gerarRelatorioEstatisticas();\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Partidas Disputadas:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1176,\n                  columnNumber: 24\n                }, this), \" \", totalPartidas]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1176,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Games Disputados:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1177,\n                  columnNumber: 24\n                }, this), \" \", totalGames]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1177,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Melhor Campanha:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1179,\n                  columnNumber: 23\n                }, this), \" \", melhorCampanha.dupla, \" ( Saldo de Games: \", melhorCampanha.saldoGames, \", \", melhorCampanha.vitorias, \" vit\\xF3rias em\", ' ', melhorCampanha.jogos, \" jogos)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1178,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Estat\\xEDsticas por Dupla\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1183,\n                columnNumber: 21\n              }, this), estatisticasDuplas.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"POSI\\xC7\\xC3O\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1188,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DUPLA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1189,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"PARTIDAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1190,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"VIT\\xD3RIAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1191,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DERROTAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1192,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"GAMES (V/P)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1193,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"SALDO GAMES\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1194,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1187,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1186,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: estatisticasDuplas.map((dupla, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1200,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.dupla\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1201,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.jogos\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1202,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.vitorias\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1203,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.derrotas\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1204,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.gamesVencidos, \"/\", dupla.gamesPerdidos]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1205,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.saldoGames\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1206,\n                      columnNumber: 31\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1199,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1197,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1185,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Nenhuma estat\\xEDstica dispon\\xEDvel para as duplas.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1212,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Torneio Finalizado em \", new Date().toLocaleString('pt-BR'), \"!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1214,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: resetTournament,\n                className: \"novo-torneio-btn\",\n                children: \"In\\xEDcio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1215,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true);\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1169,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 999,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"h8Dj3+Ck4OgxxzTSC981KciK/qs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","MeusTorneios","saveTournament","loadTournaments","deleteTournament","classificarDuplasPorDesempate","gameDay","btConnectLogo","tournamentsIcon","shuffleIcon","folderIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentTournament","setCurrentTournament","faseAtual","setFaseAtual","tournaments","setTournaments","updatedTournaments","activeTournamentName","localStorage","getItem","activeTournament","status","loadTournament","nome","tournament","console","log","setItem","createNewTournament","saveCurrentTournament","tournamentToSave","updateTournamentField","field","value","prev","newTournament","dataCriacao","dataTorneio","dataInicio","horaInicio","duplas","grupos","jogosEliminatoria","finalConfigurada","terceiroLugarConfigurado","ranking","duplasBye","historicoDuplas","removeItem","handleDeleteTournament","updated","handleImportTournaments","importedTournaments","Object","entries","forEach","addDupla","dupla","some","d","includes","alert","removeDupla","index","filter","_","i","generateGroups","length","duplasSorteadas","sort","Math","random","numDuplas","id","jogos","meio","ceil","slice","duplasPorGrupo","floor","inicio","fim","push","restantes","grupo","j","dupla1","dupla2","placar","submetido","historicoInicial","reduce","acc","join","pontos","jogosVencidos","gamesVencidos","gamesPerdidos","Date","toISOString","startTournament","encerrarFaseGrupos","jogo","todosOsJogos","flatMap","novoHistorico","g1","g2","split","map","Number","isNaN","chave1","chave2","classificados","lugar","rankingGrupo1","rankingGrupo2","semifinalMatches","fase","rodada","classificadosPorGrupo","flat","duplasUnicas","self","findIndex","jogosClassificados","dupla1Str","dupla2Str","rankingGeral","duplasByeLocal","duplasSemifinais","duplasQuartas","jogosQuartas","top16","jogosOitavas","atualizarPlacarNaEliminatoria","vencedora","chaveVencedora","_novoHistorico$chaveV","_novoHistorico$chaveV2","_novoHistorico$chaveV3","_novoHistorico$chaveV4","_novoHistorico$chaveV5","iniciarFinal","semifinalGames","error","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","dia","String","getDate","padStart","mes","getMonth","hora","getHours","minuto","className","children","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","gerarRelatorioEstatisticas","totalPartidas","totalGames","estatisticasDuplas","melhorCampanha","vitorias","saldoGames","keys","values","dados","_currentTournament$ra","derrotas","posicaoRanking","r","melhor","atual","resetTournament","add8Duplas","newDuplas","handleBackToMenu","src","alt","onSelectTournament","onCreateNew","onDeleteTournament","onImportTournaments","type","onChange","e","target","toUpperCase","placeholder","onClick","onAddDupla","onRemoveDupla","onUpdateGroups","newGrupos","onAtualizarPlacar","onFinalizarTorneio","posição","medalha","color","style","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport MeusTorneios from './components/Torneio/MeusTorneios';\nimport {\n  saveTournament,\n  loadTournaments,\n  deleteTournament,\n  classificarDuplasPorDesempate,\n} from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport shuffleIcon from './assets/icons/shuffle.svg';\nimport folderIcon from './assets/icons/folder.svg';\n\nfunction App() {\n  const [currentTournament, setCurrentTournament] = useState(null);\n  const [faseAtual, setFaseAtual] = useState('menu');\n  const [tournaments, setTournaments] = useState(loadTournaments());\n\n  useEffect(() => {\n    const updatedTournaments = loadTournaments();\n    setTournaments(updatedTournaments);\n\n    const activeTournamentName = localStorage.getItem('activeTournament');\n    if (activeTournamentName && updatedTournaments[activeTournamentName]) {\n      const activeTournament = updatedTournaments[activeTournamentName];\n      setCurrentTournament(activeTournament);\n      setFaseAtual(activeTournament.status === 'finalizado' ? 'finalizado' : activeTournament.faseAtual || 'duplas');\n    }\n  }, []);\n\n  const loadTournament = (nome) => {\n    const tournament = tournaments[nome];\n    if (tournament) {\n      console.log('Carregando torneio do localStorage:', tournament);\n      setCurrentTournament(tournament);\n      setFaseAtual(tournament.status === 'finalizado' ? 'finalizado' : tournament.faseAtual || 'duplas');\n      localStorage.setItem('activeTournament', nome);\n    } else {\n      createNewTournament();\n    }\n  };\n\n  const saveCurrentTournament = () => {\n    if (currentTournament && currentTournament.nome) {\n      const tournamentToSave = { ...currentTournament, faseAtual };\n      console.log('Salvando torneio no localStorage:', tournamentToSave);\n      saveTournament(tournamentToSave);\n      setTournaments(loadTournaments());\n    }\n  };\n\n  const updateTournamentField = (field, value) => {\n    setCurrentTournament((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  const createNewTournament = () => {\n    const newTournament = {\n      nome: '',\n      dataCriacao: null,\n      dataTorneio: null,\n      dataInicio: '',\n      horaInicio: '',\n      duplas: [],\n      grupos: [],\n      jogosEliminatoria: [],\n      finalConfigurada: false,\n      terceiroLugarConfigurado: false,\n      ranking: [],\n      duplasBye: [],\n      historicoDuplas: {},\n      status: 'rascunho',\n      faseAtual: 'duplas',\n    };\n    setCurrentTournament(newTournament);\n    setFaseAtual('duplas');\n    localStorage.removeItem('activeTournament');\n  };\n\n  const handleDeleteTournament = (nome) => {\n    deleteTournament(nome);\n    setTournaments((prev) => {\n      const updated = { ...prev };\n      delete updated[nome];\n      return updated;\n    });\n    if (currentTournament && currentTournament.nome === nome) {\n      setCurrentTournament(null);\n      setFaseAtual('menu');\n      localStorage.removeItem('activeTournament');\n    }\n  };\n\n  const handleImportTournaments = (importedTournaments) => {\n    setTournaments((prev) => {\n      const updatedTournaments = { ...prev, ...importedTournaments };\n      Object.entries(updatedTournaments).forEach(([nome, tournament]) => {\n        saveTournament(tournament);\n      });\n      return updatedTournaments;\n    });\n  };\n\n  const addDupla = (dupla) => {\n    if (\n      !currentTournament?.duplas.some(\n        (d) => d.includes(dupla[0]) || d.includes(dupla[1])\n      )\n    ) {\n      updateTournamentField('duplas', [...currentTournament.duplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    updateTournamentField(\n      'duplas',\n      currentTournament.duplas.filter((_, i) => i !== index)\n    );\n  };\n\n  const generateGroups = () => {\n    if (!currentTournament) {\n      alert('Nenhum torneio ativo para gerar chaveamento.');\n      return;\n    }\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para gerar o chaveamento.');\n      return;\n    }\n    if (\n      !currentTournament.nome ||\n      !currentTournament.dataInicio ||\n      !currentTournament.horaInicio\n    ) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n\n    const duplasSorteadas = [...currentTournament.duplas].sort(() => Math.random() - 0.5);\n    const numDuplas = duplasSorteadas.length;\n    let grupos = [];\n\n    if (numDuplas <= 5) {\n      grupos = [\n        {\n          id: 0,\n          duplas: duplasSorteadas,\n          jogos: [],\n        },\n      ];\n    } else if (numDuplas <= 10) {\n      const meio = Math.ceil(numDuplas / 2);\n      grupos = [\n        {\n          id: 0,\n          duplas: duplasSorteadas.slice(0, meio),\n          jogos: [],\n        },\n        {\n          id: 1,\n          duplas: duplasSorteadas.slice(meio),\n          jogos: [],\n        },\n      ];\n    } else {\n      const duplasPorGrupo = Math.floor(numDuplas / 4);\n      for (let i = 0; i < 4; i++) {\n        const inicio = i * duplasPorGrupo;\n        const fim = (i + 1) * duplasPorGrupo;\n        grupos.push({\n          id: i,\n          duplas: duplasSorteadas.slice(inicio, fim),\n          jogos: [],\n        });\n      }\n      const restantes = duplasSorteadas.slice(duplasPorGrupo * 4);\n      for (let i = 0; i < restantes.length; i++) {\n        grupos[i % 4].duplas.push(restantes[i]);\n      }\n    }\n\n    grupos.forEach((grupo) => {\n      grupo.jogos = [];\n      for (let i = 0; i < grupo.duplas.length; i++) {\n        for (let j = i + 1; j < grupo.duplas.length; j++) {\n          grupo.jogos.push({\n            dupla1: grupo.duplas[i],\n            dupla2: grupo.duplas[j],\n            placar: '',\n            submetido: false,\n          });\n        }\n      }\n    });\n\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n\n    setCurrentTournament((prev) => ({\n      ...prev,\n      duplas: duplasSorteadas,\n      grupos,\n      historicoDuplas: historicoInicial,\n      status: 'em andamento',\n      dataCriacao: new Date().toISOString(),\n    }));\n    setFaseAtual('grupos');\n    localStorage.setItem('activeTournament', currentTournament.nome);\n    saveCurrentTournament();\n  };\n\n  const startTournament = () => {\n    if (!currentTournament) {\n      alert('Nenhum torneio ativo para iniciar.');\n      return;\n    }\n    if (currentTournament.duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (\n      !currentTournament.nome ||\n      !currentTournament.dataInicio ||\n      !currentTournament.horaInicio\n    ) {\n      alert('Preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    if (currentTournament.grupos.length === 0) {\n      alert('Gere o chaveamento antes de iniciar o torneio.');\n      return;\n    }\n    setCurrentTournament((prev) => ({\n      ...prev,\n      status: 'em andamento',\n      dataCriacao: prev.dataCriacao || new Date().toISOString(),\n    }));\n    setFaseAtual('grupos');\n    localStorage.setItem('activeTournament', currentTournament.nome);\n    saveCurrentTournament();\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (!currentTournament) {\n      alert('Nenhum torneio ativo para encerrar a fase de grupos.');\n      return;\n    }\n\n    if (\n      currentTournament.grupos.some((grupo) =>\n        grupo.jogos.some((jogo) => !jogo.submetido)\n      )\n    ) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    const todosOsJogos = currentTournament.grupos.flatMap((grupo) => grupo.jogos);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach((jogo) => {\n        if (!jogo.placar || !jogo.placar.includes('-')) return;\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      return novoHistorico;\n    });\n\n    const numDuplas = currentTournament.duplas.length;\n\n    if (numDuplas <= 5) {\n      const classificados = classificarDuplasPorDesempate(\n        currentTournament.duplas,\n        todosOsJogos\n      );\n      updateTournamentField('ranking', [\n        { lugar: 1, dupla: classificados[0] },\n        { lugar: 2, dupla: classificados[1] },\n        { lugar: 3, dupla: classificados[2] || ['N/A', 'N/A'] },\n      ]);\n      updateTournamentField('status', 'finalizado');\n      setFaseAtual('finalizado');\n    } else if (numDuplas === 9 || numDuplas === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(\n        currentTournament.grupos[0].duplas,\n        currentTournament.grupos[0].jogos\n      );\n      const rankingGrupo2 = classificarDuplasPorDesempate(\n        currentTournament.grupos[1].duplas,\n        currentTournament.grupos[1].jogos\n      );\n      const semifinalMatches = [\n        {\n          dupla1: [...rankingGrupo1[0]],\n          dupla2: [...rankingGrupo2[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n        {\n          dupla1: [...rankingGrupo2[0]],\n          dupla2: [...rankingGrupo1[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = currentTournament.grupos\n        .map((grupo) => classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2))\n        .flat();\n      const duplasUnicas = classificadosPorGrupo.filter(\n        (dupla, index, self) =>\n          index === self.findIndex((d) => d.join('') === dupla.join(''))\n      );\n      const jogosClassificados = todosOsJogos.filter((jogo) => {\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return (\n          duplasUnicas.some((d) => d.join('') === dupla1Str) &&\n          duplasUnicas.some((d) => d.join('') === dupla2Str)\n        );\n      });\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n\n      if (numDuplas <= 11) {\n        if (rankingGeral.length < 6) {\n          if (rankingGeral.length === 2) {\n            updateTournamentField('jogosEliminatoria', [\n              {\n                dupla1: [...rankingGeral[0]],\n                dupla2: [...rankingGeral[1]],\n                placar: '',\n                submetido: false,\n                fase: 'Final',\n                rodada: 1,\n              },\n            ]);\n            setFaseAtual('final');\n          } else if (rankingGeral.length <= 4) {\n            updateTournamentField('jogosEliminatoria', [\n              {\n                dupla1: [...rankingGeral[0]],\n                dupla2: [...rankingGeral[1]],\n                placar: '',\n                submetido: false,\n                fase: 'Semifinal',\n                rodada: 1,\n              },\n              {\n                dupla1: [...rankingGeral[2]],\n                dupla2: rankingGeral[3] ? [...rankingGeral[3]] : ['BYE', ''],\n                placar: '',\n                submetido: false,\n                fase: 'Semifinal',\n                rodada: 1,\n              },\n            ]);\n            setFaseAtual('eliminatória');\n          } else {\n            const duplasByeLocal = rankingGeral.slice(0, 2);\n            const duplasSemifinais = rankingGeral.slice(2, 4);\n            updateTournamentField('jogosEliminatoria', [\n              {\n                dupla1: [...duplasSemifinais[0]],\n                dupla2: duplasSemifinais[1] ? [...duplasSemifinais[1]] : ['BYE', ''],\n                placar: '',\n                submetido: false,\n                fase: 'Semifinal',\n                rodada: 1,\n              },\n            ]);\n            updateTournamentField('duplasBye', duplasByeLocal);\n            setFaseAtual('eliminatória');\n          }\n        } else {\n          const duplasByeLocal = rankingGeral.slice(0, 2);\n          const duplasQuartas = rankingGeral.slice(2, 6);\n          const jogosQuartas = [\n            {\n              dupla1: [...duplasQuartas[0]],\n              dupla2: [...duplasQuartas[1]],\n              placar: '',\n              submetido: false,\n              fase: 'Quartas de Final',\n              rodada: 1,\n            },\n            {\n              dupla1: [...duplasQuartas[2]],\n              dupla2: [...duplasQuartas[3]],\n              placar: '',\n              submetido: false,\n              fase: 'Quartas de Final',\n              rodada: 1,\n            },\n          ];\n          updateTournamentField('jogosEliminatoria', jogosQuartas);\n          updateTournamentField('duplasBye', duplasByeLocal);\n          setFaseAtual('eliminatória');\n        }\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: top16[i + 1] ? [...top16[i + 1]] : ['BYE', ''],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1,\n          });\n        }\n        updateTournamentField('jogosEliminatoria', jogosOitavas);\n        updateTournamentField('duplasBye', []);\n        setFaseAtual('eliminatória');\n      }\n    }\n    saveCurrentTournament();\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (!currentTournament) return;\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        ),\n      ]);\n      const vencedora = jogo.dupla1[0] === 'BYE' ? jogo.dupla2 : jogo.dupla1;\n      const chaveVencedora = vencedora.join('');\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        novoHistorico[chaveVencedora] = {\n          dupla: vencedora,\n          jogos: (novoHistorico[chaveVencedora]?.jogos || 0) + 1,\n          jogosVencidos: (novoHistorico[chaveVencedora]?.jogosVencidos || 0) + 1,\n          pontos: (novoHistorico[chaveVencedora]?.pontos || 0) + 5,\n          gamesVencidos: novoHistorico[chaveVencedora]?.gamesVencidos || 0,\n          gamesPerdidos: novoHistorico[chaveVencedora]?.gamesPerdidos || 0,\n        };\n        return novoHistorico;\n      });\n    } else {\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.map((j) =>\n          j === jogo ? { ...j, placar, submetido: true } : j\n        ),\n      ]);\n      updateTournamentField('historicoDuplas', (prev) => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1])\n          novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        if (!novoHistorico[chave2])\n          novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0,\n          };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        return novoHistorico;\n      });\n    }\n    saveCurrentTournament();\n  };\n\n  const iniciarFinal = (jogos) => {\n    if (!currentTournament) return;\n    const semifinalGames = jogos.filter((jogo) => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map((jogo) => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria,\n      {\n        dupla1: [...finalistas[0]],\n        dupla2: [...finalistas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n      {\n        dupla1: [...perdedores[0]],\n        dupla2: [...perdedores[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...jogos.map((j) => j.rodada)) + 1,\n      },\n    ]);\n    updateTournamentField('finalConfigurada', true);\n    updateTournamentField('terceiroLugarConfigurado', true);\n    setFaseAtual('final');\n    saveCurrentTournament();\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    if (!currentTournament) return;\n    updateTournamentField('jogosEliminatoria', [\n      ...currentTournament.jogosEliminatoria.map((j) =>\n        j === jogo ? { ...j, placar, submetido: true } : j\n      ),\n    ]);\n    updateTournamentField('historicoDuplas', (prev) => {\n      const novoHistorico = { ...prev };\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      if (!novoHistorico[chave1])\n        novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      if (!novoHistorico[chave2])\n        novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0,\n        };\n      novoHistorico[chave1].jogos += 1;\n      novoHistorico[chave2].jogos += 1;\n      if (g1 > g2) {\n        novoHistorico[chave1].pontos += 5;\n        novoHistorico[chave1].jogosVencidos += 1;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n        novoHistorico[chave2].pontos += 2;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n      } else {\n        novoHistorico[chave2].pontos += 5;\n        novoHistorico[chave2].jogosVencidos += 1;\n        novoHistorico[chave2].gamesVencidos += g2;\n        novoHistorico[chave2].gamesPerdidos += g1;\n        novoHistorico[chave1].pontos += 2;\n        novoHistorico[chave1].gamesVencidos += g1;\n        novoHistorico[chave1].gamesPerdidos += g2;\n      }\n      return novoHistorico;\n    });\n    saveCurrentTournament();\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    if (!currentTournament) return;\n    const rodadaAtual = Math.max(\n      ...currentTournament.jogosEliminatoria.map((j) => j.rodada)\n    );\n    const jogosRodadaAtual = currentTournament.jogosEliminatoria.filter(\n      (j) => j.rodada === rodadaAtual\n    );\n\n    if (!jogosRodadaAtual.every((j) => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    if (\n      jogosRodadaAtual.some((j) => j.fase === 'Semifinal') &&\n      !currentTournament.finalConfigurada\n    ) {\n      iniciarFinal(currentTournament.jogosEliminatoria);\n    } else if (\n      jogosRodadaAtual.some((j) => j.fase === 'Quartas de Final') &&\n      currentTournament.duplas.length <= 11\n    ) {\n      const vencedoresQuartas = jogosRodadaAtual.map((jogo) => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      const semifinalMatches = [\n        {\n          dupla1: [...currentTournament.duplasBye[0]],\n          dupla2: [...vencedoresQuartas[0]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n        {\n          dupla1: [...currentTournament.duplasBye[1]],\n          dupla2: [...vencedoresQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal',\n          rodada: rodadaAtual + 1,\n        },\n      ];\n      updateTournamentField('jogosEliminatoria', [\n        ...currentTournament.jogosEliminatoria.filter((j) => j.rodada < rodadaAtual + 1),\n        ...semifinalMatches,\n      ]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n    saveCurrentTournament();\n  };\n\n  const finalizarTorneio = () => {\n    if (!currentTournament) return;\n    const final = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Final'\n    );\n    const terceiroLugar = currentTournament.jogosEliminatoria.find(\n      (jogo) => jogo.fase === 'Disputa 3º Lugar'\n    );\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] =\n      finalSet1 > finalSet2\n        ? [final.dupla1, final.dupla2]\n        : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] =\n      terceiroSet1 > terceiroSet2\n        ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n        : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    updateTournamentField('ranking', [\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto },\n    ]);\n    updateTournamentField('status', 'finalizado');\n    setFaseAtual('finalizado');\n    saveCurrentTournament();\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every((jogo) => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(\n                (j) =>\n                  j.dupla1.join('') === dupla.join('') ||\n                  j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter((j) => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar\n                ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate'\n                : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(currentTournament.dataTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map((j) => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map((rodada) => {\n      const jogosDaRodada = jogos.filter((j) => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor =\n                  jogo.placar && jogo.submetido\n                    ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1])\n                      ? jogo.dupla1.join(' & ')\n                      : jogo.dupla2.join(' & ')\n                    : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  const gerarRelatorioEstatisticas = () => {\n    if (!currentTournament) return { totalPartidas: 0, totalGames: 0, estatisticasDuplas: [], melhorCampanha: { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 } };\n    const todosOsJogos = [\n      ...currentTournament.grupos.flatMap((grupo) => grupo.jogos),\n      ...currentTournament.jogosEliminatoria.filter((jogo) => jogo.placar !== 'BYE'),\n    ].filter((jogo) => jogo.submetido);\n\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + (isNaN(g1) || isNaN(g2) ? 0 : g1 + g2);\n    }, 0);\n\n    let historicoDuplas = currentTournament.historicoDuplas || {};\n    if (Object.keys(historicoDuplas).length === 0) {\n      historicoDuplas = currentTournament.duplas.reduce((acc, dupla) => {\n        acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        return acc;\n      }, {});\n\n      todosOsJogos.forEach((jogo) => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        if (isNaN(g1) || isNaN(g2)) return;\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        historicoDuplas[chave1].jogos += 1;\n        historicoDuplas[chave2].jogos += 1;\n        if (g1 > g2) {\n          historicoDuplas[chave1].pontos += 5;\n          historicoDuplas[chave1].jogosVencidos += 1;\n          historicoDuplas[chave1].gamesVencidos += g1;\n          historicoDuplas[chave1].gamesPerdidos += g2;\n          historicoDuplas[chave2].pontos += 2;\n          historicoDuplas[chave2].gamesVencidos += g2;\n          historicoDuplas[chave2].gamesPerdidos += g1;\n        } else {\n          historicoDuplas[chave2].pontos += 5;\n          historicoDuplas[chave2].jogosVencidos += 1;\n          historicoDuplas[chave2].gamesVencidos += g2;\n          historicoDuplas[chave2].gamesPerdidos += g1;\n          historicoDuplas[chave1].pontos += 2;\n          historicoDuplas[chave1].gamesVencidos += g1;\n          historicoDuplas[chave1].gamesPerdidos += g2;\n        }\n      });\n      updateTournamentField('historicoDuplas', historicoDuplas);\n    }\n\n    const estatisticasDuplas = Object.values(historicoDuplas).map((dados) => {\n      const derrotas = dados.jogos - dados.jogosVencidos;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking =\n        currentTournament.ranking.find((r) => r.dupla.join('') === dados.dupla.join(''))?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        derrotas,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        posicaoRanking,\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n\n    const melhorCampanha = estatisticasDuplas.reduce(\n      (melhor, atual) => (atual.saldoGames > melhor.saldoGames ? atual : melhor),\n      estatisticasDuplas[0] || { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 }\n    );\n\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha,\n    };\n  };\n\n  const resetTournament = () => {\n    setCurrentTournament(null);\n    setFaseAtual('menu');\n    localStorage.removeItem('activeTournament');\n  };\n\n  const add8Duplas = () => {\n    if (!currentTournament) return;\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    updateTournamentField('duplas', [...currentTournament.duplas, ...newDuplas]);\n  };\n\n  const handleBackToMenu = () => {\n    if (currentTournament && currentTournament.status !== 'rascunho') {\n      saveCurrentTournament();\n    }\n    setFaseAtual('menu');\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'menu' && (\n          <MeusTorneios\n            tournaments={tournaments}\n            onSelectTournament={loadTournament}\n            onCreateNew={createNewTournament}\n            onDeleteTournament={handleDeleteTournament}\n            onImportTournaments={handleImportTournaments}\n          />\n        )}\n        {faseAtual === 'duplas' && currentTournament && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={currentTournament.nome || ''}\n                  onChange={(e) =>\n                    updateTournamentField('nome', e.target.value.toUpperCase())\n                  }\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={currentTournament.dataInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('dataInicio', e.target.value)\n                  }\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={currentTournament.horaInicio || ''}\n                  onChange={(e) =>\n                    updateTournamentField('horaInicio', e.target.value)\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button className=\"GerarChaves\" onClick={generateGroups}>\n                  <img src={shuffleIcon} alt=\"Shuffle Icon\" className=\"shuffle-icon\" />\n                  Gerar Chaveamento\n                </button>\n                {currentTournament.status === 'rascunho' && (\n                  <button className=\"iniciar-torneio\" onClick={startTournament}>\n                    <img src={tournamentsIcon} alt=\"Tournament Icon\" className=\"button-icon\" />\n                    Iniciar Torneio\n                  </button>\n                )}\n                <button className=\"homePage\" onClick={handleBackToMenu}>\n                  <img src={folderIcon} alt=\"Folder Icon\" className=\"folder-icon\" />\n                  Meus Torneios\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n              </div>\n              <DuplasList\n                duplas={currentTournament.duplas || []}\n                onAddDupla={addDupla}\n                onRemoveDupla={removeDupla}\n              />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && currentTournament && (\n          <>\n            <FaseDeGrupos\n              grupos={currentTournament.grupos}\n              onUpdateGroups={(newGrupos) => {\n                updateTournamentField('grupos', newGrupos);\n                saveCurrentTournament();\n              }}\n            />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {currentTournament.grupos.map((grupo) => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && currentTournament && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) =>\n                  !jogo.submetido ||\n                  jogo.rodada === Math.max(...currentTournament.jogosEliminatoria.map((j) => j.rodada))\n              )}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(currentTournament.jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && currentTournament && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={currentTournament.jogosEliminatoria.filter(\n                (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {currentTournament.jogosEliminatoria\n              .filter((jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')\n              .every((jogo) => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(\n                currentTournament.jogosEliminatoria.filter(\n                  (jogo) => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n                )\n              )}\n            </div>\n          </>\n        )}\n        {faseAtual === 'finalizado' && currentTournament && (\n          <>\n            <h3>Ranking Final:</h3>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLAS</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentTournament.ranking.map((posição, index) => {\n                  let medalha = '';\n                  let color = '#000';\n                  if (posição.lugar === 1) {\n                    medalha = '🥇';\n                    color = 'gold';\n                  } else if (posição.lugar === 2) {\n                    medalha = '🥈';\n                    color = 'silver';\n                  } else if (posição.lugar === 3) {\n                    medalha = '🥉';\n                    color = 'brown';\n                  }\n                  return (\n                    <tr key={index}>\n                      <td style={{ color }}>{medalha} {posição.lugar}º Colocado</td>\n                      <td>{posição.dupla.join(' & ')}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <div className=\"relatorio-estatisticas\">\n              <h3>Estatísticas Gerais do Torneio</h3>\n              {(() => {\n                const { totalPartidas, totalGames, estatisticasDuplas, melhorCampanha } =\n                  gerarRelatorioEstatisticas();\n                return (\n                  <>\n                    <p><strong>Total de Partidas Disputadas:</strong> {totalPartidas}</p>\n                    <p><strong>Total de Games Disputados:</strong> {totalGames}</p>\n                    <p>\n                      <strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (\n                      Saldo de Games: {melhorCampanha.saldoGames}, {melhorCampanha.vitorias} vitórias em{' '}\n                      {melhorCampanha.jogos} jogos)\n                    </p>\n                    <h4>Estatísticas por Dupla</h4>\n                    {estatisticasDuplas.length > 0 ? (\n                      <table>\n                        <thead>\n                          <tr>\n                            <th>POSIÇÃO</th>\n                            <th>DUPLA</th>\n                            <th>PARTIDAS</th>\n                            <th>VITÓRIAS</th>\n                            <th>DERROTAS</th>\n                            <th>GAMES (V/P)</th>\n                            <th>SALDO GAMES</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {estatisticasDuplas.map((dupla, index) => (\n                            <tr key={index}>\n                              <td>{dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'}</td>\n                              <td>{dupla.dupla}</td>\n                              <td>{dupla.jogos}</td>\n                              <td>{dupla.vitorias}</td>\n                              <td>{dupla.derrotas}</td>\n                              <td>{dupla.gamesVencidos}/{dupla.gamesPerdidos}</td>\n                              <td>{dupla.saldoGames}</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    ) : (\n                      <p>Nenhuma estatística disponível para as duplas.</p>\n                    )}\n                    <p>Torneio Finalizado em {new Date().toLocaleString('pt-BR')}!</p>\n                    <button onClick={resetTournament} className=\"novo-torneio-btn\">\n                      Início\n                    </button>\n                  </>\n                );\n              })()}\n            </div>\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}