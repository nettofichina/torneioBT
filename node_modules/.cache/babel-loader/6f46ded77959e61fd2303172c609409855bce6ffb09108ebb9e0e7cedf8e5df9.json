{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport './App.css';\nimport { classificarDuplas, criarJogosParaGrupo } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  useEffect(() => {}, [duplas, grupos, jogosEliminatoria]); // Dependências que mudam de fase\n\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = distribuirEmGrupos(duplas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const distribuirEmGrupos = duplas => {\n    // Simplificação: Divide as duplas em grupos de 4 ou menos\n    const grupos = [];\n    for (let i = 0; i < duplas.length; i += 4) {\n      grupos.push({\n        id: grupos.length,\n        duplas: duplas.slice(i, i + 4),\n        jogos: []\n      });\n    }\n    return grupos;\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    let classificados = classificarDuplas(grupos);\n    iniciarFaseEliminatoria(classificados);\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    // Aqui você implementaria a lógica para criar jogos eliminatórios\n    let jogos = [];\n    // Exemplo simplificado: Assumindo 4 duplas para semifinais\n    if (classificados.length === 4) {\n      jogos.push({\n        dupla1: classificados[0],\n        dupla2: classificados[3],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal'\n      });\n      jogos.push({\n        dupla1: classificados[1],\n        dupla2: classificados[2],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal'\n      });\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1aFdFA2KDxvBrfMrQ1g/Ugpawgo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","classificarDuplas","criarJogosParaGrupo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","distribuirEmGrupos","forEach","grupo","jogos","id","push","slice","encerrarFaseGrupos","jogo","submetido","classificados","iniciarFaseEliminatoria","dupla1","dupla2","placar","fase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddDupla","onRemoveDupla","onClick","onUpdateGroups","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport './App.css';\nimport { classificarDuplas, criarJogosParaGrupo } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n\n  useEffect(() => {\n\n  }, [duplas, grupos, jogosEliminatoria]); // Dependências que mudam de fase\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = distribuirEmGrupos(duplas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const distribuirEmGrupos = (duplas) => {\n    // Simplificação: Divide as duplas em grupos de 4 ou menos\n    const grupos = [];\n    for (let i = 0; i < duplas.length; i += 4) {\n      grupos.push({\n        id: grupos.length,\n        duplas: duplas.slice(i, i + 4),\n        jogos: []\n      });\n    }\n    return grupos;\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    let classificados = classificarDuplas(grupos);\n    iniciarFaseEliminatoria(classificados);\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    // Aqui você implementaria a lógica para criar jogos eliminatórios\n    let jogos = [];\n    // Exemplo simplificado: Assumindo 4 duplas para semifinais\n    if (classificados.length === 4) {\n      jogos.push({\n        dupla1: classificados[0],\n        dupla2: classificados[3],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal'\n      });\n      jogos.push({\n        dupla1: classificados[1],\n        dupla2: classificados[2],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal'\n      });\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button onClick={startTournament}>Iniciar Torneio</button>\n          </>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <FaseEliminatoria jogos={jogosEliminatoria} />\n            {/* Aqui você adicionaria lógica para avançar ou finalizar a fase eliminatória */}\n          </>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}