{"ast":null,"code":"export const dividirGrupos = duplas => {\n  if (duplas.length < 3) {\n    throw new Error(\"É necessário pelo menos 3 duplas para formar grupos.\");\n  }\n  let numGrupos;\n  if (duplas.length <= 5) numGrupos = 1;else if (duplas.length <= 8) numGrupos = 2;else if (duplas.length <= 11) numGrupos = 3;else if (duplas.length <= 14) numGrupos = 4;else if (duplas.length <= 17) numGrupos = 5;else numGrupos = 6;\n  let grupos = [];\n  let duplasPorGrupo = Math.floor(duplas.length / numGrupos);\n  let resto = duplas.length % numGrupos;\n  for (let i = 0; i < numGrupos; i++) {\n    let grupoSize = duplasPorGrupo + (i < resto ? 1 : 0);\n    grupos.push({\n      id: i,\n      duplas: duplas.splice(0, grupoSize),\n      jogos: []\n    });\n  }\n\n  // Ajuste final para garantir que cada grupo tenha pelo menos 3 duplas se possível\n  if (numGrupos > 1) {\n    while (grupos.some(g => g.duplas.length < 3) && duplas.length > 0) {\n      let menorGrupo = grupos.reduce((menor, grupo) => grupo.duplas.length < menor.duplas.length ? grupo : menor);\n      menorGrupo.duplas.push(duplas.shift());\n    }\n  }\n\n  // Atualizar jogos para cada grupo\n  grupos.forEach(grupo => {\n    grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n  });\n  return grupos;\n};\nexport const criarJogosParaGrupo = (duplas, grupoIndex = 0) => {\n  let jogos = [];\n  for (let i = 0; i < duplas.length; i++) {\n    for (let j = i + 1; j < duplas.length; j++) {\n      jogos.push({\n        dupla1: duplas[i],\n        dupla2: duplas[j],\n        placar: '',\n        submetido: false,\n        jogoIndex: jogos.length,\n        grupoIndex\n      });\n    }\n  }\n  return jogos;\n};\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\n  const duplasComEstatisticas = duplas.map(dupla => {\n    let stats = {\n      pontos: 0,\n      vitorias: 0,\n      saldoGames: 0,\n      confrontos: []\n    };\n    jogos.forEach(jogo => {\n      if (jogo.dupla1.includes(dupla[0]) || jogo.dupla1.includes(dupla[1]) || jogo.dupla2.includes(dupla[0]) || jogo.dupla2.includes(dupla[1])) {\n        const [games1, games2] = jogo.placar.split('-').map(Number);\n        const isDupla1 = jogo.dupla1.includes(dupla[0]) || jogo.dupla1.includes(dupla[1]);\n        const venceu = isDupla1 && games1 > games2 || !isDupla1 && games2 > games1;\n        if (venceu) {\n          stats.pontos += 3;\n          stats.vitorias++;\n        }\n        stats.saldoGames += isDupla1 ? games1 - games2 : games2 - games1;\n        stats.confrontos.push({\n          adversario: isDupla1 ? jogo.dupla2 : jogo.dupla1,\n          resultado: venceu ? 'vitoria' : 'derrota',\n          placar: jogo.placar\n        });\n      }\n    });\n    return {\n      dupla,\n      ...stats\n    };\n  });\n\n  // Ordenar por: pontos, vitórias, saldoGames, confronto direto\n  return duplasComEstatisticas.sort((a, b) => {\n    var _a$confrontos$find, _b$confrontos$find;\n    if (b.pontos !== a.pontos) return b.pontos - a.pontos;\n    if (b.vitorias !== a.vitorias) return b.vitorias - a.vitorias;\n    if (b.saldoGames !== a.saldoGames) return b.saldoGames - a.saldoGames;\n\n    // Confronto direto\n    let aVenceuB = ((_a$confrontos$find = a.confrontos.find(confronto => confronto.adversario === b.dupla)) === null || _a$confrontos$find === void 0 ? void 0 : _a$confrontos$find.resultado) === 'vitoria';\n    let bVenceuA = ((_b$confrontos$find = b.confrontos.find(confronto => confronto.adversario === a.dupla)) === null || _b$confrontos$find === void 0 ? void 0 : _b$confrontos$find.resultado) === 'vitoria';\n    if (aVenceuB && !bVenceuA) return -1;\n    if (bVenceuA && !aVenceuB) return 1;\n\n    // Caso único de sorteio (não implementado, seria uma ação manual ou randomização)\n    return 0;\n  }).map(entry => entry.dupla);\n};","map":{"version":3,"names":["dividirGrupos","duplas","length","Error","numGrupos","grupos","duplasPorGrupo","Math","floor","resto","i","grupoSize","push","id","splice","jogos","some","g","menorGrupo","reduce","menor","grupo","shift","forEach","criarJogosParaGrupo","grupoIndex","j","dupla1","dupla2","placar","submetido","jogoIndex","classificarDuplasPorDesempate","duplasComEstatisticas","map","dupla","stats","pontos","vitorias","saldoGames","confrontos","jogo","includes","games1","games2","split","Number","isDupla1","venceu","adversario","resultado","sort","a","b","_a$confrontos$find","_b$confrontos$find","aVenceuB","find","confronto","bVenceuA","entry"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/utils/torneioUtils.js"],"sourcesContent":["export const dividirGrupos = (duplas) => {\r\n  if (duplas.length < 3) {\r\n    throw new Error(\"É necessário pelo menos 3 duplas para formar grupos.\");\r\n  }\r\n  \r\n  let numGrupos;\r\n  if (duplas.length <= 5) numGrupos = 1;\r\n  else if (duplas.length <= 8) numGrupos = 2;\r\n  else if (duplas.length <= 11) numGrupos = 3;\r\n  else if (duplas.length <= 14) numGrupos = 4;\r\n  else if (duplas.length <= 17) numGrupos = 5;\r\n  else numGrupos = 6;\r\n\r\n  let grupos = [];\r\n  let duplasPorGrupo = Math.floor(duplas.length / numGrupos);\r\n  let resto = duplas.length % numGrupos;\r\n\r\n  for (let i = 0; i < numGrupos; i++) {\r\n    let grupoSize = duplasPorGrupo + (i < resto ? 1 : 0);\r\n    grupos.push({\r\n      id: i,\r\n      duplas: duplas.splice(0, grupoSize),\r\n      jogos: []\r\n    });\r\n  }\r\n\r\n  // Ajuste final para garantir que cada grupo tenha pelo menos 3 duplas se possível\r\n  if (numGrupos > 1) {\r\n    while (grupos.some(g => g.duplas.length < 3) && duplas.length > 0) {\r\n      let menorGrupo = grupos.reduce((menor, grupo) => grupo.duplas.length < menor.duplas.length ? grupo : menor);\r\n      menorGrupo.duplas.push(duplas.shift());\r\n    }\r\n  }\r\n\r\n  // Atualizar jogos para cada grupo\r\n  grupos.forEach(grupo => {\r\n    grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\r\n  });\r\n\r\n  return grupos;\r\n};\r\n\r\nexport const criarJogosParaGrupo = (duplas, grupoIndex = 0) => {\r\n  let jogos = [];\r\n  for (let i = 0; i < duplas.length; i++) {\r\n    for (let j = i + 1; j < duplas.length; j++) {\r\n      jogos.push({\r\n        dupla1: duplas[i],\r\n        dupla2: duplas[j],\r\n        placar: '',\r\n        submetido: false,\r\n        jogoIndex: jogos.length,\r\n        grupoIndex\r\n      });\r\n    }\r\n  }\r\n  return jogos;\r\n};\r\n\r\nexport const classificarDuplasPorDesempate = (duplas, jogos) => {\r\n  const duplasComEstatisticas = duplas.map(dupla => {\r\n    let stats = {\r\n      pontos: 0,\r\n      vitorias: 0,\r\n      saldoGames: 0,\r\n      confrontos: []\r\n    };\r\n    jogos.forEach(jogo => {\r\n      if (jogo.dupla1.includes(dupla[0]) || jogo.dupla1.includes(dupla[1]) || jogo.dupla2.includes(dupla[0]) || jogo.dupla2.includes(dupla[1])) {\r\n        const [games1, games2] = jogo.placar.split('-').map(Number);\r\n        const isDupla1 = jogo.dupla1.includes(dupla[0]) || jogo.dupla1.includes(dupla[1]);\r\n        const venceu = (isDupla1 && games1 > games2) || (!isDupla1 && games2 > games1);\r\n        if (venceu) {\r\n          stats.pontos += 3;\r\n          stats.vitorias++;\r\n        }\r\n        stats.saldoGames += isDupla1 ? games1 - games2 : games2 - games1;\r\n        stats.confrontos.push({ \r\n          adversario: isDupla1 ? jogo.dupla2 : jogo.dupla1, \r\n          resultado: venceu ? 'vitoria' : 'derrota',\r\n          placar: jogo.placar \r\n        });\r\n      }\r\n    });\r\n    return { dupla, ...stats };\r\n  });\r\n\r\n  // Ordenar por: pontos, vitórias, saldoGames, confronto direto\r\n  return duplasComEstatisticas.sort((a, b) => {\r\n    if (b.pontos !== a.pontos) return b.pontos - a.pontos;\r\n    if (b.vitorias !== a.vitorias) return b.vitorias - a.vitorias;\r\n    if (b.saldoGames !== a.saldoGames) return b.saldoGames - a.saldoGames;\r\n    \r\n    // Confronto direto\r\n    let aVenceuB = a.confrontos.find(confronto => confronto.adversario === b.dupla)?.resultado === 'vitoria';\r\n    let bVenceuA = b.confrontos.find(confronto => confronto.adversario === a.dupla)?.resultado === 'vitoria';\r\n    if (aVenceuB && !bVenceuA) return -1;\r\n    if (bVenceuA && !aVenceuB) return 1;\r\n\r\n    // Caso único de sorteio (não implementado, seria uma ação manual ou randomização)\r\n    return 0;\r\n  }).map(entry => entry.dupla);\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}