{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport { dividirGrupos, classificarDuplasPorDesempate, criarJogosParaGrupo } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n  const [historicoFases, setHistoricoFases] = useState([]);\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let duplasRestantes = classificados.length;\n    let rodadas = Math.ceil(Math.log2(duplasRestantes));\n    let currentIndex = 0;\n    for (let r = 1; r <= rodadas; r++) {\n      let jogosDaRodada = [];\n      for (let i = 0; i < duplasRestantes; i += 2) {\n        let jogo = {\n          dupla1: classificados[i] || ['TBD', ''],\n          dupla2: classificados[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: currentIndex++,\n          rodada: r,\n          fase: r === rodadas ? 'Final' : r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`\n        };\n        jogosDaRodada.push(jogo);\n      }\n      jogos.push(...jogosDaRodada);\n      duplasRestantes = Math.ceil(duplasRestantes / 2);\n    }\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n    if (jogosUltimaRodada.length === 1) {\n      // Final\n      let final = jogosUltimaRodada[0];\n      let vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      let perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n\n      // Encontrar os perdedores das semifinais para a disputa do 3º lugar\n      let semiFinais = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada - 1);\n      let perdedoresSemifinal = semiFinais.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n\n      // Adicionar jogo para determinar o 3º lugar\n      setJogosEliminatoria(prevJogos => [...prevJogos, {\n        dupla1: perdedoresSemifinal[0],\n        dupla2: perdedoresSemifinal[1],\n        placar: '',\n        submetido: false,\n        jogoIndex: prevJogos.length,\n        rodada: ultimaRodada + 1,\n        fase: 'Disputa 3º Lugar'\n      }]);\n\n      // Passando perdedorFinal para finalizarTorneio\n      finalizarTorneio(vencedorFinal, perdedorFinal);\n    } else {\n      // Identificar vencedores da última rodada\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      // Adicionar nova rodada\n      let novaRodada = ultimaRodada + 1;\n      let novosJogos = [];\n      for (let i = 0; i < vencedores.length; i += 2) {\n        novosJogos.push({\n          dupla1: vencedores[i],\n          dupla2: vencedores[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length + i / 2,\n          rodada: novaRodada,\n          fase: novaRodada === ultimaRodada + 1 ? 'Final' : `Rodada ${novaRodada}`\n        });\n      }\n      setJogosEliminatoria(prevJogos => [...prevJogos, ...novosJogos]);\n    }\n  };\n  const atualizarEstatisticas = jogoInfo => {\n    console.log('jogoInfo recebido em atualizarEstatisticas:', jogoInfo);\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo => jogo.jogoIndex === jogoInfo.jogoIndex ? {\n        ...jogo,\n        placar: jogoInfo.placar,\n        submetido: true\n      } : jogo);\n      if (!historicoJogos.some(jogo => jogo.jogoIndex === jogoInfo.jogoIndex)) {\n        setHistoricoJogos(prevHistorico => [...prevHistorico, {\n          ...jogoInfo,\n          placar: jogoInfo.placar\n        }]);\n      }\n      return updatedJogos;\n    });\n  };\n  const finalizarTorneio = (vencedorFinal, perdedorFinal) => {\n    let disputaTerceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!disputaTerceiroLugar || !disputaTerceiroLugar.submetido) {\n      alert('A disputa pelo terceiro lugar deve ser submetida antes de finalizar o torneio.');\n      return;\n    }\n    let terceiroLugar = disputaTerceiroLugar.placar.split('-').map(Number)[0] > disputaTerceiroLugar.placar.split('-').map(Number)[1] ? disputaTerceiroLugar.dupla1 : disputaTerceiroLugar.dupla2;\n    let quartoLugar = terceiroLugar === disputaTerceiroLugar.dupla1 ? disputaTerceiroLugar.dupla2 : disputaTerceiroLugar.dupla1;\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiroLugar\n    }, {\n      lugar: 4,\n      dupla: quartoLugar\n    }]);\n    setFaseAtual('finalizado');\n  };\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"BT Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Informa\\xE7\\xF5es do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"nomeTorneio\",\n          children: \"Nome do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"nomeTorneio\",\n          placeholder: \"Digite o nome do torneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataTorneio\",\n          children: \"Dia do Torneio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dataTorneio\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 1\",\n            ref: jogador1Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            placeholder: \"Jogador 2\",\n            ref: jogador2Ref\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              var _jogador1Ref$current, _jogador2Ref$current;\n              const jogador1 = (_jogador1Ref$current = jogador1Ref.current) === null || _jogador1Ref$current === void 0 ? void 0 : _jogador1Ref$current.value;\n              const jogador2 = (_jogador2Ref$current = jogador2Ref.current) === null || _jogador2Ref$current === void 0 ? void 0 : _jogador2Ref$current.value;\n              if (jogador1 && jogador2) {\n                addDupla([jogador1, jogador2]);\n                if (jogador1Ref.current) jogador1Ref.current.value = '';\n                if (jogador2Ref.current) jogador2Ref.current.value = '';\n              } else {\n                alert('Por favor, insira os nomes dos dois jogadores.');\n              }\n            },\n            children: \"Adicionar Dupla\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: add8Duplas,\n            children: \"Adicionar 8 Duplas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: startTournament,\n          disabled: duplas.length < 3,\n          children: \"Come\\xE7ar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"organogramaSection\",\n        className: \"section\",\n        style: {\n          display: faseAtual !== 'duplas' ? 'block' : 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Organograma do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"faseAtual\",\n          children: faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onAtualizarEstatisticas: atualizarEstatisticas,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          fase: \"Fase Eliminat\\xF3ria\",\n          jogos: jogosEliminatoria,\n          onAtualizarEstatisticas: atualizarEstatisticas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), historicoJogos.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hist\\xF3rico de Jogos:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: historicoJogos.map((jogo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Rodada \", jogo.fase || 'Desconhecida', \":\", Array.isArray(jogo.dupla1) ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida', \"vs\", Array.isArray(jogo.dupla2) ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida', \"- Placar: \", jogo.placar || 'Não Submetido']\n            }, jogo.jogoIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), historicoFases.length > 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hist\\xF3rico de Fases:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this), historicoFases.map((fase, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: fase.fase\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Classificados:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: fase.classificados.map((dupla, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: dupla.join(' e ')\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: encerrarFaseEliminatoria,\n          disabled: jogosEliminatoria.some(jogo => !jogo.submetido),\n          children: \"Adicionar Disputa pelo 3\\xBA Lugar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this), faseAtual === 'eliminatória' && jogosEliminatoria.every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Final:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this), (() => {\n            const finalGame = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n            return finalGame ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Final: \", finalGame.dupla1.join(' e '), \" vs \", finalGame.dupla2.join(' e ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Final: N\\xE3o definida\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 19\n            }, this);\n          })(), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Disputa pelo Terceiro Lugar:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 15\n          }, this), (() => {\n            const thirdPlaceGame = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n            return thirdPlaceGame ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Disputa pelo terceiro: \", thirdPlaceGame.dupla1.join(' e '), \" vs \", thirdPlaceGame.dupla2.join(' e ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Disputa pelo terceiro: N\\xE3o definida\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 19\n            }, this);\n          })(), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: finalizarTorneio,\n            children: \"Finalizar Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"O torneio foi finalizado. Parab\\xE9ns aos vencedores!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Ranking Final:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [posição.lugar, \"\\xBA Lugar:\", Array.isArray(posição.dupla) ? posição.dupla.join(' e ') : posição.dupla || 'Desconhecido']\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"developed-by\",\n        children: \"Desenvolvido por Ant\\xF4nio Fichina Netto - 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xnJ2jgFlNAIKsFKPb9wt294WCeI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","DuplasList","FaseDeGrupos","FaseEliminatoria","Button","Input","dividirGrupos","classificarDuplasPorDesempate","criarJogosParaGrupo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","ranking","setRanking","historicoJogos","setHistoricoJogos","historicoFases","setHistoricoFases","console","log","jogador1Ref","jogador2Ref","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","sort","Math","random","forEach","grupo","jogos","id","iniciarFaseEliminatoria","classificados","duplasRestantes","rodadas","ceil","log2","currentIndex","r","jogosDaRodada","jogo","dupla1","dupla2","placar","submetido","jogoIndex","rodada","fase","push","encerrarFaseEliminatoria","ultimaRodada","max","map","jogosUltimaRodada","final","vencedorFinal","split","Number","perdedorFinal","semiFinais","perdedoresSemifinal","set1","set2","prevJogos","finalizarTorneio","vencedores","novaRodada","novosJogos","atualizarEstatisticas","jogoInfo","updatedJogos","prevHistorico","disputaTerceiroLugar","find","terceiroLugar","quartoLugar","lugar","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","placeholder","required","onRemoveDupla","ref","onClick","_jogador1Ref$current","_jogador2Ref$current","jogador1","current","value","jogador2","disabled","style","display","onAtualizarEstatisticas","onUpdateGroups","Array","isArray","join","encerrarFaseGrupos","every","finalGame","thirdPlaceGame","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport Button from './components/UI/Button';\nimport Input from './components/UI/Input';\nimport './App.css';\nimport {\n  dividirGrupos,\n  classificarDuplasPorDesempate,\n  criarJogosParaGrupo\n} from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [ranking, setRanking] = useState([]);\n  const [historicoJogos, setHistoricoJogos] = useState([]);\n  const [historicoFases, setHistoricoFases] = useState([]);\n\n  useEffect(() => {\n    console.log('Estado dos jogos eliminatórios atualizado:', jogosEliminatoria);\n  }, [jogosEliminatoria]);\n\n  const jogador1Ref = useRef(null);\n  const jogador2Ref = useRef(null);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos([...duplas].sort(() => Math.random() - 0.5));\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    console.log('Classificados para a fase eliminatória:', classificados);\n    let jogos = [];\n    let duplasRestantes = classificados.length;\n    let rodadas = Math.ceil(Math.log2(duplasRestantes));\n\n    let currentIndex = 0;\n\n    for (let r = 1; r <= rodadas; r++) {\n      let jogosDaRodada = [];\n      for (let i = 0; i < duplasRestantes; i += 2) {\n        let jogo = {\n          dupla1: classificados[i] || ['TBD', ''],\n          dupla2: classificados[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: currentIndex++,\n          rodada: r,\n          fase: r === rodadas ? 'Final' : (r === rodadas - 1 ? 'Semifinal' : `Rodada ${r}`)\n        };\n        jogosDaRodada.push(jogo);\n      }\n      jogos.push(...jogosDaRodada);\n      duplasRestantes = Math.ceil(duplasRestantes / 2);\n    }\n\n    console.log('Jogos eliminatórios criados:', jogos);\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    if (jogosEliminatoria.some(jogo => !jogo.submetido)) {\n      alert('Todos os jogos devem ser submetidos antes de avançar para a próxima rodada.');\n      return;\n    }\n\n    let ultimaRodada = Math.max(...jogosEliminatoria.map(jogo => jogo.rodada));\n    let jogosUltimaRodada = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada);\n\n    if (jogosUltimaRodada.length === 1) { // Final\n      let final = jogosUltimaRodada[0];\n      let vencedorFinal = final.placar.split('-').map(Number)[0] > final.placar.split('-').map(Number)[1] ? final.dupla1 : final.dupla2;\n      let perdedorFinal = vencedorFinal === final.dupla1 ? final.dupla2 : final.dupla1;\n\n      // Encontrar os perdedores das semifinais para a disputa do 3º lugar\n      let semiFinais = jogosEliminatoria.filter(jogo => jogo.rodada === ultimaRodada - 1);\n      let perdedoresSemifinal = semiFinais.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n      });\n\n      // Adicionar jogo para determinar o 3º lugar\n      setJogosEliminatoria(prevJogos => [\n        ...prevJogos,\n        {\n          dupla1: perdedoresSemifinal[0],\n          dupla2: perdedoresSemifinal[1],\n          placar: '',\n          submetido: false,\n          jogoIndex: prevJogos.length,\n          rodada: ultimaRodada + 1,\n          fase: 'Disputa 3º Lugar'\n        }\n      ]);\n\n      // Passando perdedorFinal para finalizarTorneio\n      finalizarTorneio(vencedorFinal, perdedorFinal);\n    } else {\n      // Identificar vencedores da última rodada\n      let vencedores = jogosUltimaRodada.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      // Adicionar nova rodada\n      let novaRodada = ultimaRodada + 1;\n      let novosJogos = [];\n      for (let i = 0; i < vencedores.length; i += 2) {\n        novosJogos.push({\n          dupla1: vencedores[i],\n          dupla2: vencedores[i + 1] || ['TBD', ''],\n          placar: '',\n          submetido: false,\n          jogoIndex: jogosEliminatoria.length + (i / 2),\n          rodada: novaRodada,\n          fase: novaRodada === ultimaRodada + 1 ? 'Final' : `Rodada ${novaRodada}`\n        });\n      }\n\n      setJogosEliminatoria(prevJogos => [...prevJogos, ...novosJogos]);\n    }\n  };\n\n\n\n  const atualizarEstatisticas = (jogoInfo) => {\n    console.log('jogoInfo recebido em atualizarEstatisticas:', jogoInfo);\n\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(jogo =>\n        jogo.jogoIndex === jogoInfo.jogoIndex ? { ...jogo, placar: jogoInfo.placar, submetido: true } : jogo\n      );\n      if (!historicoJogos.some(jogo => jogo.jogoIndex === jogoInfo.jogoIndex)) {\n        setHistoricoJogos(prevHistorico => [...prevHistorico, {\n          ...jogoInfo,\n          placar: jogoInfo.placar\n        }]);\n      }\n      return updatedJogos;\n    });\n  };\n\n  const finalizarTorneio = (vencedorFinal, perdedorFinal) => {\n    let disputaTerceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!disputaTerceiroLugar || !disputaTerceiroLugar.submetido) {\n      alert('A disputa pelo terceiro lugar deve ser submetida antes de finalizar o torneio.');\n      return;\n    }\n\n    let terceiroLugar = disputaTerceiroLugar.placar.split('-').map(Number)[0] > disputaTerceiroLugar.placar.split('-').map(Number)[1] ? disputaTerceiroLugar.dupla1 : disputaTerceiroLugar.dupla2;\n    let quartoLugar = terceiroLugar === disputaTerceiroLugar.dupla1 ? disputaTerceiroLugar.dupla2 : disputaTerceiroLugar.dupla1;\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiroLugar },\n      { lugar: 4, dupla: quartoLugar }\n    ]);\n\n    setFaseAtual('finalizado');\n  };\n\n  const add8Duplas = () => {\n    let newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>BT Connect</h1>\n      </header>\n      <main className=\"container\">\n        <section className=\"section\">\n          <h2>Informações do Torneio</h2>\n          <label htmlFor=\"nomeTorneio\">Nome do Torneio:</label>\n          <input type=\"text\" id=\"nomeTorneio\" placeholder=\"Digite o nome do torneio\" required />\n          <label htmlFor=\"dataTorneio\">Dia do Torneio:</label>\n          <input type=\"date\" id=\"dataTorneio\" required />\n        </section>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onRemoveDupla={removeDupla} />\n            <div>\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 1\"\n                ref={jogador1Ref}\n              />\n              <Input\n                type=\"text\"\n                placeholder=\"Jogador 2\"\n                ref={jogador2Ref}\n              />\n              <Button\n                onClick={() => {\n                  const jogador1 = jogador1Ref.current?.value;\n                  const jogador2 = jogador2Ref.current?.value;\n                  if (jogador1 && jogador2) {\n                    addDupla([jogador1, jogador2]);\n                    if (jogador1Ref.current) jogador1Ref.current.value = '';\n                    if (jogador2Ref.current) jogador2Ref.current.value = '';\n                  } else {\n                    alert('Por favor, insira os nomes dos dois jogadores.');\n                  }\n                }}\n              >\n                Adicionar Dupla\n              </Button>\n              <Button onClick={add8Duplas}>\n                Adicionar 8 Duplas\n              </Button>\n            </div>\n            <Button onClick={startTournament} disabled={duplas.length < 3}>\n              Começar Torneio\n            </Button>\n          </>\n        )}\n        <section id=\"organogramaSection\" className=\"section\" style={{ display: faseAtual !== 'duplas' ? 'block' : 'none' }}>\n          <h2>Organograma do Torneio</h2>\n          <h3 id=\"faseAtual\">{faseAtual === 'grupos' ? 'Fase de Grupos' : faseAtual === 'eliminatória' ? 'Fase Eliminatória' : 'Torneio Finalizado'}</h3>\n          {faseAtual === 'grupos' &&\n            <FaseDeGrupos grupos={grupos} onAtualizarEstatisticas={atualizarEstatisticas} onUpdateGroups={setGrupos} />\n          }\n          {faseAtual === 'eliminatória' &&\n            <FaseEliminatoria\n              fase=\"Fase Eliminatória\"\n              jogos={jogosEliminatoria}\n              onAtualizarEstatisticas={atualizarEstatisticas}\n            />\n          }\n          {historicoJogos.length > 0 && (\n            <section className=\"section\">\n              <h3>Histórico de Jogos:</h3>\n              <ul>\n                {historicoJogos.map((jogo, index) => (\n                  <li key={jogo.jogoIndex}>\n                    Rodada {jogo.fase || 'Desconhecida'}:\n                    {Array.isArray(jogo.dupla1) ? jogo.dupla1.join(' e ') : 'Dupla Desconhecida'}\n                    vs\n                    {Array.isArray(jogo.dupla2) ? jogo.dupla2.join(' e ') : 'Dupla Desconhecida'}\n                    - Placar: {jogo.placar || 'Não Submetido'}\n                  </li>\n                ))}\n              </ul>\n            </section>\n          )}\n          {historicoFases.length > 0 && (\n            <section className=\"section\">\n              <h3>Histórico de Fases:</h3>\n              {historicoFases.map((fase, index) => (\n                <div key={index}>\n                  <h4>{fase.fase}</h4>\n                  <p>Classificados:</p>\n                  <ul>\n                    {fase.classificados.map((dupla, i) => (\n                      <li key={i}>{dupla.join(' e ')}</li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </section>\n          )}\n          {faseAtual === 'grupos' &&\n            <Button onClick={encerrarFaseGrupos}>\n              Encerrar Fase de Grupos\n            </Button>\n          }\n          {faseAtual === 'eliminatória' &&\n            <Button\n              onClick={encerrarFaseEliminatoria}\n              disabled={jogosEliminatoria.some(jogo => !jogo.submetido)}\n            >\n              Adicionar Disputa pelo 3º Lugar\n            </Button>\n          }\n\n          {faseAtual === 'eliminatória' && jogosEliminatoria.every(jogo => jogo.submetido) && (\n            <div>\n              <h3>Final:</h3>\n              {(() => {\n                const finalGame = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n                return finalGame ? (\n                  <p>Final: {finalGame.dupla1.join(' e ')} vs {finalGame.dupla2.join(' e ')}</p>\n                ) : (\n                  <p>Final: Não definida</p>\n                );\n              })()}\n\n              <h3>Disputa pelo Terceiro Lugar:</h3>\n              {(() => {\n                const thirdPlaceGame = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n                return thirdPlaceGame ? (\n                  <p>Disputa pelo terceiro: {thirdPlaceGame.dupla1.join(' e ')} vs {thirdPlaceGame.dupla2.join(' e ')}</p>\n                ) : (\n                  <p>Disputa pelo terceiro: Não definida</p>\n                );\n              })()}\n              <Button onClick={finalizarTorneio}>\n                Finalizar Torneio\n              </Button>\n            </div>\n          )}\n          {faseAtual === 'finalizado' && (\n            <>\n              <p>O torneio foi finalizado. Parabéns aos vencedores!</p>\n              <h3>Ranking Final:</h3>\n              <ul>\n                {ranking.map((posição, index) => (\n                  <li key={index}>\n                    {posição.lugar}º Lugar:\n                    {Array.isArray(posição.dupla) ? posição.dupla.join(' e ') : posição.dupla || 'Desconhecido'}\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n        </section>\n      </main>\n      <footer>\n        <p className=\"developed-by\">Desenvolvido por Antônio Fichina Netto - 2024</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}