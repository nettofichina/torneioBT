{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils'; // Mantemos apenas o necessário\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]); // Novo estado para BYEs\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    // Gera os jogos apenas uma vez\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n  const classificadosPorGrupo = grupos.map(grupo => {\n    return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n  }).flat();\n  const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n  const rankingGeral = classificarDuplasPorDesempate(classificadosPorGrupo, todosOsJogos);\n  const renderizarHistoricoEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      if (jogosDaRodada.length === 0) return null;\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), jogosDaRodada.map((jogo, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jogo\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [jogo.dupla1.join(' & '), \" vs \", jogo.dupla2.join(' & ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Placar: \", jogo.placar, \" \", jogo.submetido ? \"(Submetido)\" : \"(Não submetido)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n      const rodadaAtual = Math.max(...updatedJogos.map(j => j.rodada));\n      const jogosRodadaAtual = updatedJogos.filter(j => j.rodada === rodadaAtual);\n      if (jogosRodadaAtual.every(j => j.submetido) && jogosRodadaAtual.length > 1 && jogosRodadaAtual.some(j => j.fase !== 'Semifinal')) {\n        const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n        return [...updatedJogos, ...novaRodada];\n      }\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    setJogosEliminatoria(prev => [...prev, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n      ...j,\n      placar: placar,\n      submetido: true\n    } : j));\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final')) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        return;\n      }\n      const semifinalMatches = [{\n        dupla1: duplasBye[0],\n        dupla2: vencedoresQuartas[0],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: duplasBye[1],\n        dupla2: vencedoresQuartas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n      setFaseAtual('eliminatória'); // Mantém na eliminatória até a próxima etapa\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev, ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: add27Duplas,\n    children: \"Adicionar 27 Duplas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"iniciar-torneio\",\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this), renderizarHistoricoEliminatoria(jogosEliminatoria.filter(jogo => jogo.submetido && jogo.rodada < Math.max(...jogosEliminatoria.map(j => j.rodada)))), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A disputa pelo 3\\xBA lugar est\\xE1 configurada!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 42\n        }, this), jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Torneio Finalizado!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ranking.map((posição, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [posição.lugar, \"\\xBA Lugar: \", posição.dupla.join(' & ')]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7IWgc7YyDANS9tq8w+goJidxMHE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","duplasBye","setDuplasBye","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","duplasSorteadas","sort","Math","random","gruposCriados","gruposComJogos","map","grupo","jogos","id","classificadosPorGrupo","slice","flat","todosOsJogos","flatMap","rankingGeral","renderizarHistoricoEliminatoria","rodadas","Set","j","rodada","a","b","_jogosDaRodada$","jogosDaRodada","fase","className","children","fileName","_jsxFileName","lineNumber","columnNumber","jogo","dupla1","join","dupla2","placar","submetido","atualizarPlacarNaEliminatoria","prevJogos","updatedJogos","rodadaAtual","max","jogosRodadaAtual","every","novaRodada","iniciarFinal","semifinalGames","console","error","finalistas","set1","set2","split","Number","perdedores","prev","atualizarPlacarNaFinal","encerrarFaseEliminatoria","vencedoresQuartas","log","semifinalMatches","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","add8Duplas","newDuplas","push","add27Duplas","onClick","onAddDupla","onRemoveDupla","onUpdateGroups","encerrarFaseGrupos","onAtualizarPlacar","onFinalizarTorneio","posição","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils'; // Mantemos apenas o necessário\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]); // Novo estado para BYEs\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n\n    // Gera os jogos apenas uma vez\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n    setFaseAtual('grupos');\n  };\n\n  const classificadosPorGrupo = grupos.map(grupo => {\n    return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n  }).flat();\n  \n  const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n  const rankingGeral = classificarDuplasPorDesempate(classificadosPorGrupo, todosOsJogos);\n\n  const renderizarHistoricoEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      if (jogosDaRodada.length === 0) return null;\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          {jogosDaRodada.map((jogo, index) => (\n            <div key={index} className=\"jogo\">\n              <p>{jogo.dupla1.join(' & ')} vs {jogo.dupla2.join(' & ')}</p>\n              <p>Placar: {jogo.placar} {jogo.submetido ? \"(Submetido)\" : \"(Não submetido)\"}</p>\n            </div>\n          ))}\n        </div>\n      );\n    });\n  };\n\nconst atualizarPlacarNaEliminatoria = (jogo, placar) => {\n  if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n    setJogosEliminatoria(prevJogos =>\n      prevJogos.map(j =>\n        j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n      )\n    );\n    return;\n  }\n  setJogosEliminatoria(prevJogos => {\n    const updatedJogos = prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    );\n\n    const rodadaAtual = Math.max(...updatedJogos.map(j => j.rodada));\n    const jogosRodadaAtual = updatedJogos.filter(j => j.rodada === rodadaAtual);\n\n    if (jogosRodadaAtual.every(j => j.submetido) && jogosRodadaAtual.length > 1 && jogosRodadaAtual.some(j => j.fase !== 'Semifinal')) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      return [...updatedJogos, ...novaRodada];\n    }\n    return updatedJogos;\n  });\n};\n\nconst iniciarFinal = (jogos) => {\n  const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n  if (semifinalGames.length !== 2) {\n    console.error('Erro: Esperados 2 jogos de semifinal.');\n    return;\n  }\n\n  const finalistas = semifinalGames.map(jogo => {\n    const [set1, set2] = jogo.placar.split('-').map(Number);\n    return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n  });\n\n  const perdedores = semifinalGames.map(jogo => {\n    const [set1, set2] = jogo.placar.split('-').map(Number);\n    return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n  });\n\n  setJogosEliminatoria(prev => [\n    ...prev,\n    {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n    },\n    {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }\n  ]);\n  setFinalConfigurada(true);\n  setTerceiroLugarConfigurado(true);\n};\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => prevJogos.map(j =>\n      j === jogo ? { ...j, placar: placar, submetido: true } : j\n    ));\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n  \n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n  \n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final')) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n  \n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        return;\n      }\n  \n      const semifinalMatches = [\n        { dupla1: duplasBye[0], dupla2: vencedoresQuartas[0], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n        { dupla1: duplasBye[1], dupla2: vencedoresQuartas[1], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n      ];\n      setJogosEliminatoria(prev => [...prev, ...semifinalMatches]);\n      setFaseAtual('eliminatória'); // Mantém na eliminatória até a próxima etapa\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => [...prev, ...novaRodada]);\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n    setFaseAtual('finalizado');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button className=\"iniciar-torneio\" onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n          </>\n        )}\n\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            {renderizarHistoricoEliminatoria(jogosEliminatoria.filter(jogo => jogo.submetido && jogo.rodada < Math.max(...jogosEliminatoria.map(j => j.rodada))))}\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n          </>\n        )}\n\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(\n                jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'\n              )}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado && <p>A disputa pelo 3º lugar está configurada!</p>}\n\n            {/* Mostrar botão \"Encerrar Campeonato\" somente quando todos os jogos finais forem submetidos */}\n            {jogosEliminatoria\n              .filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')\n              .every(jogo => jogo.submetido) && (\n                <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n              )}\n          </>\n        )}\n\n        {faseAtual === 'finalizado' && (\n          <>\n            <p>Torneio Finalizado!</p>\n            <h3>Ranking Final:</h3>\n            <ul>\n              {ranking.map((posição, index) => (\n                <li key={index}>\n                  {posição.lugar}º Lugar: {posição.dupla.join(' & ')}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </main>\n    </div>\n  );\n\n\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}