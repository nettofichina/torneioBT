{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos(duplas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n  const iniciarFaseEliminatoria = classificados => {\n    let jogos = [];\n    if (classificados.length <= 8) {\n      // Para 6 a 8 duplas, semifinal direta\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal'\n        });\n      }\n      // Se for exatamente 4, já temos as semifinais, senão, talvez precise de mais lógica para BYEs\n    } else {\n      // Para mais de 8, você precisaria de lógica para criar uma chave completa\n      // Aqui está um exemplo básico para 8 ou menos, ajuste conforme necessário\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['BYE', ''],\n          placar: '',\n          submetido: false,\n          fase: 'Rodada 1'\n        });\n      }\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Gerenciador de Torneio de Beach Tennis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(DuplasList, {\n          duplas: duplas,\n          onAddDupla: addDupla,\n          onRemoveDupla: removeDupla\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startTournament,\n          children: \"Iniciar Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: add8Duplas,\n          children: \"Adicionar 8 Duplas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, void 0, false), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Torneio Finalizado!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1aFdFA2KDxvBrfMrQ1g/Ugpawgo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","gruposCriados","forEach","grupo","jogos","id","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","join","iniciarFaseEliminatoria","push","dupla1","dupla2","placar","fase","add8Duplas","newDuplas","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddDupla","onRemoveDupla","onClick","onUpdateGroups","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    const gruposCriados = dividirGrupos(duplas);\n    gruposCriados.forEach(grupo => {\n      grupo.jogos = criarJogosParaGrupo(grupo.duplas, grupo.id);\n    });\n    setGrupos(gruposCriados);\n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    let classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n\n    if (duplas.length <= 5) {\n      // Se for um grupo único, o campeão é quem venceu mais jogos\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else {\n      iniciarFaseEliminatoria(classificados);\n    }\n  };\n\n  const iniciarFaseEliminatoria = (classificados) => {\n    let jogos = [];\n    if (classificados.length <= 8) { // Para 6 a 8 duplas, semifinal direta\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1],\n          placar: '',\n          submetido: false,\n          fase: 'Semifinal'\n        });\n      }\n      // Se for exatamente 4, já temos as semifinais, senão, talvez precise de mais lógica para BYEs\n    } else {\n      // Para mais de 8, você precisaria de lógica para criar uma chave completa\n      // Aqui está um exemplo básico para 8 ou menos, ajuste conforme necessário\n      for (let i = 0; i < classificados.length; i += 2) {\n        jogos.push({\n          dupla1: classificados[i],\n          dupla2: classificados[i + 1] || ['BYE', ''],\n          placar: '',\n          submetido: false,\n          fase: 'Rodada 1'\n        });\n      }\n    }\n    setJogosEliminatoria(jogos);\n    setFaseAtual('eliminatória');\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`Jogador${i*2-1}`, `Jogador${i*2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Gerenciador de Torneio de Beach Tennis</h1>\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <>\n            <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            <button onClick={startTournament}>Iniciar Torneio</button>\n            <button onClick={add8Duplas}>Adicionar 8 Duplas</button> {/* Botão temporário */}\n          </>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <FaseEliminatoria jogos={jogosEliminatoria} />\n            {/* Adicione lógica para avançar ou finalizar a fase eliminatória */}\n          </>\n        )}\n        {faseAtual === 'finalizado' && (\n          <p>Torneio Finalizado!</p>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}