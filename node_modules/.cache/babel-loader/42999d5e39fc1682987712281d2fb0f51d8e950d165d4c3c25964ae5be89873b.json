{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseEliminatoria.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseEliminatoria = ({\n  fase,\n  jogos,\n  onAtualizarEstatisticas\n}) => {\n  _s();\n  const [jogosState, setJogosState] = useState(jogos);\n  const [ultimaRodadaConcluida, setUltimaRodadaConcluida] = useState(0);\n  const [faseAtual, setFaseAtual] = useState(0); // Estado para controlar a fase atual\n\n  useEffect(() => {\n    console.log('Jogos atualizados em FaseEliminatoria:', jogos);\n    setJogosState(jogos);\n    const maxRodada = Math.max(...jogos.map(jogo => jogo.rodada));\n    setUltimaRodadaConcluida(prev => Math.min(maxRodada, prev)); // Functional update\n    setFaseAtual(maxRodada); // Inicializa a fase atual com a rodada máxima\n  }, [jogos]);\n  const jogosPorRodada = useMemo(() => {\n    const result = {};\n    jogosState.forEach(jogo => {\n      if (!result[jogo.rodada]) {\n        result[jogo.rodada] = [];\n      }\n      result[jogo.rodada].push(jogo);\n    });\n    return result;\n  }, [jogosState]);\n  useEffect(() => {\n    const maxFinishedRound = Math.max(...Object.keys(jogosPorRodada).filter(rodada => jogosPorRodada[rodada].every(jogo => jogo.submetido)).map(Number));\n    if (maxFinishedRound > ultimaRodadaConcluida) {\n      setUltimaRodadaConcluida(maxFinishedRound);\n    }\n  }, [jogosPorRodada, ultimaRodadaConcluida]);\n  const handleSubmitScore = useCallback((placar, jogoIndex) => {\n    setJogosState(prevJogos => {\n      return prevJogos.map(jogo => jogo.jogoIndex === jogoIndex ? {\n        ...jogo,\n        placar: placar,\n        submetido: true\n      } : jogo);\n    });\n    const jogoAtual = jogosState.find(jogo => jogo.jogoIndex === jogoIndex);\n    if (jogoAtual) {\n      onAtualizarEstatisticas({\n        jogoIndex,\n        placar,\n        rodada: jogoAtual.rodada\n      });\n    }\n  }, [jogosState, onAtualizarEstatisticas]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: fase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\n      const rodadaInt = parseInt(rodada);\n      if (rodadaInt <= faseAtual + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: rodada === '1' ? 'Primeira Rodada' : rodada === Math.max(...Object.keys(jogosPorRodada)).toString() ? 'Final' : rodada === (Math.max(...Object.keys(jogosPorRodada)) - 1).toString() ? 'Semifinal' : rodada === '2' ? 'Quartas de Final' : `Rodada ${rodada}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), jogosPorRodada[rodada].map(jogo => /*#__PURE__*/_jsxDEV(Jogo, {\n            jogo: jogo,\n            onSubmitScore: placar => handleSubmitScore(placar, jogo.jogoIndex)\n          }, jogo.jogoIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this))]\n        }, rodada, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this);\n      }\n      return null;\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(FaseEliminatoria, \"ubYDx7dNtJaHfnXcy8pSn2FxQqU=\");\n_c = FaseEliminatoria;\nexport default FaseEliminatoria;\nvar _c;\n$RefreshReg$(_c, \"FaseEliminatoria\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","Jogo","jsxDEV","_jsxDEV","FaseEliminatoria","fase","jogos","onAtualizarEstatisticas","_s","jogosState","setJogosState","ultimaRodadaConcluida","setUltimaRodadaConcluida","faseAtual","setFaseAtual","console","log","maxRodada","Math","max","map","jogo","rodada","prev","min","jogosPorRodada","result","forEach","push","maxFinishedRound","Object","keys","filter","every","submetido","Number","handleSubmitScore","placar","jogoIndex","prevJogos","jogoAtual","find","children","fileName","_jsxFileName","lineNumber","columnNumber","sort","a","b","rodadaInt","parseInt","toString","onSubmitScore","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseEliminatoria.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseEliminatoria = ({ fase, jogos, onAtualizarEstatisticas }) => {\r\n  const [jogosState, setJogosState] = useState(jogos);\r\n  const [ultimaRodadaConcluida, setUltimaRodadaConcluida] = useState(0);\r\n  const [faseAtual, setFaseAtual] = useState(0); // Estado para controlar a fase atual\r\n\r\n  useEffect(() => {\r\n    console.log('Jogos atualizados em FaseEliminatoria:', jogos);\r\n    setJogosState(jogos);\r\n    const maxRodada = Math.max(...jogos.map(jogo => jogo.rodada));\r\n    setUltimaRodadaConcluida(prev => Math.min(maxRodada, prev)); // Functional update\r\n    setFaseAtual(maxRodada); // Inicializa a fase atual com a rodada máxima\r\n  }, [jogos]);\r\n\r\n  const jogosPorRodada = useMemo(() => {\r\n    const result = {};\r\n    jogosState.forEach(jogo => {\r\n      if (!result[jogo.rodada]) {\r\n        result[jogo.rodada] = [];\r\n      }\r\n      result[jogo.rodada].push(jogo);\r\n    });\r\n    return result;\r\n  }, [jogosState]);\r\n\r\n  useEffect(() => {\r\n    const maxFinishedRound = Math.max(...Object.keys(jogosPorRodada).filter(rodada => \r\n      jogosPorRodada[rodada].every(jogo => jogo.submetido)\r\n    ).map(Number));\r\n  \r\n    if (maxFinishedRound > ultimaRodadaConcluida) {\r\n      setUltimaRodadaConcluida(maxFinishedRound);\r\n    }\r\n  }, [jogosPorRodada, ultimaRodadaConcluida]);\r\n\r\n  const handleSubmitScore = useCallback((placar, jogoIndex) => {\r\n    setJogosState(prevJogos => {\r\n      return prevJogos.map(jogo =>\r\n        jogo.jogoIndex === jogoIndex ? { ...jogo, placar: placar, submetido: true } : jogo\r\n      );\r\n    });\r\n\r\n    const jogoAtual = jogosState.find(jogo => jogo.jogoIndex === jogoIndex);\r\n    if (jogoAtual) {\r\n      onAtualizarEstatisticas({ jogoIndex, placar, rodada: jogoAtual.rodada });\r\n    }\r\n  }, [jogosState, onAtualizarEstatisticas]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>{fase}</h2>\r\n      {Object.keys(jogosPorRodada).sort((a, b) => a - b).map(rodada => {\r\n        const rodadaInt = parseInt(rodada);\r\n        if (rodadaInt <= faseAtual + 1) {\r\n          return (\r\n            <div key={rodada}>\r\n              <h3>\r\n                {rodada === '1' ? 'Primeira Rodada' :\r\n                  rodada === Math.max(...Object.keys(jogosPorRodada)).toString() ? 'Final' :\r\n                    rodada === (Math.max(...Object.keys(jogosPorRodada)) - 1).toString() ? 'Semifinal' :\r\n                      rodada === '2' ? 'Quartas de Final' :\r\n                        `Rodada ${rodada}`}\r\n              </h3>\r\n              {jogosPorRodada[rodada].map(jogo => (\r\n                <Jogo\r\n                  key={jogo.jogoIndex}\r\n                  jogo={jogo}\r\n                  onSubmitScore={(placar) => handleSubmitScore(placar, jogo.jogoIndex)}\r\n                />\r\n              ))}\r\n            </div>\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseEliminatoria;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}