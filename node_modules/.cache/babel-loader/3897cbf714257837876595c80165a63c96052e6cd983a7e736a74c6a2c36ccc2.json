{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\components\\\\Torneio\\\\FaseDeGrupos.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Jogo from './Jogo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FaseDeGrupos = ({\n  grupos,\n  onAtualizarEstatisticas,\n  onUpdateGroups\n}) => {\n  _s();\n  const [gruposState, setGruposState] = useState(grupos);\n  useEffect(() => {\n    setGruposState(grupos);\n  }, [grupos]);\n  useEffect(() => {\n    if (onUpdateGroups) {\n      onUpdateGroups(gruposState);\n    }\n  }, [gruposState, onUpdateGroups]);\n  const handleSubmitScore = (placar, jogoIndex, grupoIndex) => {\n    setGruposState(prevGrupos => {\n      let updatedJogo = null;\n      const updatedGroups = prevGrupos.map(grupo => grupo.id === grupoIndex ? {\n        ...grupo,\n        jogos: grupo.jogos.map(jogo => jogo.jogoIndex === jogoIndex && !jogo.submetido ? (updatedJogo = {\n          ...jogo,\n          placar: placar,\n          submetido: true\n        }, updatedJogo) : jogo)\n      } : grupo);\n      console.log('Grupos após atualização:', updatedGroups);\n      if (updatedJogo) {\n        const jogoInfo = {\n          ...updatedJogo,\n          grupo: grupoIndex,\n          fase: 'Fase de Grupos',\n          jogoIndex: grupoIndex * 100 + jogoIndex\n        };\n        onAtualizarEstatisticas(jogoInfo);\n      } else {\n        console.warn('Jogo já submetido ou não encontrado para atualização de estatísticas');\n      }\n      return updatedGroups;\n    });\n  };\n\n  // Função para preencher e submeter todos os placares automaticamente com 6-2\n  const preencherTodosOsPlacares = () => {\n    setGruposState(prevGrupos => {\n      const newGroups = prevGrupos.map(grupo => ({\n        ...grupo,\n        jogos: grupo.jogos.map(jogo => {\n          if (!jogo.submetido) {\n            onAtualizarEstatisticas({\n              ...jogo,\n              placar: '6-2'\n            });\n            return {\n              ...jogo,\n              placar: '6-2',\n              submetido: true\n            };\n          }\n          return jogo;\n        })\n      }));\n      console.log('Novos grupos após preenchimento:', newGroups);\n      return newGroups;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Fase de Grupos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), gruposState.map(grupo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), grupo.jogos.map(jogo => /*#__PURE__*/_jsxDEV(Jogo, {\n        // Use globalJogoIndex here\n        jogo: jogo,\n        onSubmitScore: placar => handleSubmitScore(placar, jogo.jogoIndex, grupo.id)\n      }, grupo.id * 100 + jogo.jogoIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this))]\n    }, grupo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: preencherTodosOsPlacares,\n      children: \"Preencher e Submeter Todos os Placar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(FaseDeGrupos, \"GxCYYh35dTAFZnDp1YhRFquGLdg=\");\n_c = FaseDeGrupos;\nexport default FaseDeGrupos;\nvar _c;\n$RefreshReg$(_c, \"FaseDeGrupos\");","map":{"version":3,"names":["React","useState","useEffect","Jogo","jsxDEV","_jsxDEV","FaseDeGrupos","grupos","onAtualizarEstatisticas","onUpdateGroups","_s","gruposState","setGruposState","handleSubmitScore","placar","jogoIndex","grupoIndex","prevGrupos","updatedJogo","updatedGroups","map","grupo","id","jogos","jogo","submetido","console","log","jogoInfo","fase","warn","preencherTodosOsPlacares","newGroups","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmitScore","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/components/Torneio/FaseDeGrupos.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Jogo from './Jogo';\r\n\r\nconst FaseDeGrupos = ({ grupos, onAtualizarEstatisticas, onUpdateGroups }) => {\r\n  const [gruposState, setGruposState] = useState(grupos);\r\n\r\n  useEffect(() => {\r\n    setGruposState(grupos);\r\n  }, [grupos]);\r\n\r\n  useEffect(() => {\r\n    if (onUpdateGroups) {\r\n      onUpdateGroups(gruposState);\r\n    }\r\n  }, [gruposState, onUpdateGroups]);\r\n\r\n  const handleSubmitScore = (placar, jogoIndex, grupoIndex) => {\r\n    setGruposState(prevGrupos => {\r\n      let updatedJogo = null;\r\n      const updatedGroups = prevGrupos.map(grupo =>\r\n        grupo.id === grupoIndex ? {\r\n          ...grupo,\r\n          jogos: grupo.jogos.map(jogo =>\r\n            jogo.jogoIndex === jogoIndex && !jogo.submetido ? \r\n              (updatedJogo = { ...jogo, placar: placar, submetido: true }, updatedJogo) : jogo\r\n          )\r\n        } : grupo\r\n      );\r\n      console.log('Grupos após atualização:', updatedGroups);\r\n      if (updatedJogo) {\r\n        const jogoInfo = {\r\n          ...updatedJogo,\r\n          grupo: grupoIndex,\r\n          fase: 'Fase de Grupos',\r\n          jogoIndex: grupoIndex * 100 + jogoIndex\r\n        };\r\n        onAtualizarEstatisticas(jogoInfo);\r\n      } else {\r\n        console.warn('Jogo já submetido ou não encontrado para atualização de estatísticas');\r\n      }\r\n      return updatedGroups;\r\n    });\r\n  };\r\n\r\n  // Função para preencher e submeter todos os placares automaticamente com 6-2\r\n  const preencherTodosOsPlacares = () => {\r\n    setGruposState(prevGrupos => {\r\n      const newGroups = prevGrupos.map(grupo => ({\r\n        ...grupo,\r\n        jogos: grupo.jogos.map(jogo => {\r\n          if (!jogo.submetido) {\r\n            onAtualizarEstatisticas({ ...jogo, placar: '6-2' });\r\n            return { ...jogo, placar: '6-2', submetido: true };\r\n          }\r\n          return jogo;\r\n        })\r\n      }));\r\n      console.log('Novos grupos após preenchimento:', newGroups);\r\n      return newGroups;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Fase de Grupos</h2>\r\n      {gruposState.map(grupo => (\r\n        <div key={grupo.id}>\r\n          <h3>Grupo {grupo.id + 1}</h3>\r\n          {grupo.jogos.map(jogo => (\r\n            <Jogo\r\n              key={grupo.id * 100 + jogo.jogoIndex} // Use globalJogoIndex here\r\n              jogo={jogo}\r\n              onSubmitScore={(placar) => handleSubmitScore(placar, jogo.jogoIndex, grupo.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n      {/* Botão temporário para preencher todos os placares com 6-2 */}\r\n      <button onClick={preencherTodosOsPlacares}>Preencher e Submeter Todos os Placar</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FaseDeGrupos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}