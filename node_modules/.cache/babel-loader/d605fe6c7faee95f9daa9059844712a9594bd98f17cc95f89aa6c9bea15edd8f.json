{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport gameDay from './assets/img/game-day.svg'; // Importa a imagem SVG\nimport btConnectLogo from './assets/img/btConnect.png'; // Importa btConnect\nimport tournamentsIcon from './assets/icons/tournaments.svg'; // Ícone começar torneio\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({});\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(null);\n  const [nomeTorneio, setNomeTorneio] = useState(''); // Novo estado\n  const [dataInicio, setDataInicio] = useState(''); // Novo estado (ex.: 2025-02-16)\n  const [horaInicio, setHoraInicio] = useState(''); // Novo estado (ex.: 12:00)\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto);\n    setDataCriacaoTorneio(dataTorneio);\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n\n    // Inicializar historicoDuplas com todas as duplas\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = {\n        dupla,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      return acc;\n    }, {});\n    setHistoricoDuplas(historicoInicial);\n    console.log('Histórico Inicial:', historicoInicial);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      // Caso específico para 10 duplas: 2 grupos de 5, direto para semifinais\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1]));\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n\n      // Atualizar histórico acumulando os dados\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        todosOsJogos.forEach(jogo => {\n          const [g1, g2] = jogo.placar.split('-').map(Number);\n          const chave1 = jogo.dupla1.join('');\n          const chave2 = jogo.dupla2.join('');\n          if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n            dupla: jogo.dupla1,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0\n          };\n          if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n            dupla: jogo.dupla2,\n            pontos: 0,\n            jogos: 0,\n            jogosVencidos: 0,\n            gamesVencidos: 0,\n            gamesPerdidos: 0\n          };\n          novoHistorico[chave1].jogos += 1;\n          novoHistorico[chave2].jogos += 1;\n          if (g1 > g2) {\n            novoHistorico[chave1].pontos += 5;\n            novoHistorico[chave1].jogosVencidos += 1;\n            novoHistorico[chave1].gamesVencidos += g1;\n            novoHistorico[chave1].gamesPerdidos += g2;\n            novoHistorico[chave2].pontos += 2;\n            novoHistorico[chave2].gamesVencidos += g2;\n            novoHistorico[chave2].gamesPerdidos += g1;\n          } else {\n            novoHistorico[chave2].pontos += 5;\n            novoHistorico[chave2].jogosVencidos += 1;\n            novoHistorico[chave2].gamesVencidos += g2;\n            novoHistorico[chave2].gamesPerdidos += g1;\n            novoHistorico[chave1].pontos += 2;\n            novoHistorico[chave1].gamesVencidos += g1;\n            novoHistorico[chave1].gamesPerdidos += g2;\n          }\n        });\n        console.log('Histórico após Fase de Grupos:', novoHistorico);\n        return novoHistorico;\n      });\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      if (duplas.length <= 11) {\n        // Até 11 duplas: 2 BYEs + 4 nas quartas\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n        const jogosQuartas = [{\n          dupla1: [...duplasQuartas[0]],\n          dupla2: [...duplasQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }, {\n          dupla1: [...duplasQuartas[2]],\n          dupla2: [...duplasQuartas[3]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }];\n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else {\n        // Mais de 11 duplas: Chave eliminatória ajustada para 16 duplas\n        const top16 = rankingGeral.slice(0, 16); // Pegar apenas as 16 melhores\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n        setJogosEliminatoria(jogosOitavas); // 8 jogos nas oitavas\n        setDuplasBye([]); // Sem BYEs fixos, já ajustado na chave\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Eliminatória (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    setJogosEliminatoria(prev => [...prev, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n\n      // Atualizar histórico acumulando os dados\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Final:', novoHistorico);\n        return novoHistorico;\n      });\n      return updatedJogos;\n    });\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      // Para ≤ 11 duplas: Usa BYEs fixos\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n      const semifinalMatches = [{\n        dupla1: [...duplasBye[0]],\n        dupla2: [...vencedoresQuartas[0]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: [...duplasBye[1]],\n        dupla2: [...vencedoresQuartas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else if (jogosRodadaAtual.length > 1) {\n      // Para > 11 duplas: Avança normalmente com vencedores\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido); // Verifica se todos os placares foram submetidos\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n            }).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            // Só exibe \"✓\" se todos os jogos foram submetidos e a dupla está entre as duas primeiras\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const incrementoMinutos = idx * 30;\n            const dataHora = formatarDataHora(dataCriacaoTorneio, incrementoMinutos);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 550,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 552,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 553,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const gerarRelatorioEstatisticas = () => {\n    // Total de partidas e games\n    const todosOsJogos = [...grupos.flatMap(grupo => grupo.jogos), ...jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')].filter(jogo => jogo.submetido);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n\n    // Estatísticas por dupla (usando todas as duplas do historicoDuplas)\n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      var _ranking$find;\n      const aproveitamento = dados.jogos > 0 ? (dados.jogosVencidos / dados.jogos * 100).toFixed(2) : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ((_ranking$find = ranking.find(r => r.dupla.join('') === dados.dupla.join(''))) === null || _ranking$find === void 0 ? void 0 : _ranking$find.lugar) || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      // Ordenar por posição no ranking, depois por saldo de games\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames; // Para duplas sem ranking, ordenar por saldo\n    });\n\n    // Melhor campanha (baseado no maior saldo de games)\n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => {\n      return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n    }, estatisticasDuplas[0] || {\n      dupla: 'Nenhuma',\n      vitorias: 0,\n      jogos: 0,\n      saldoGames: 0\n    });\n    console.log('Estatísticas por Dupla:', estatisticasDuplas);\n    console.log('Melhor Campanha Calculada:', melhorCampanha);\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: add27Duplas,\n    children: \"Adicionar 27 Duplas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 634,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: btConnectLogo,\n        alt: \"btConnect Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: nomeTorneio,\n              onChange: e => setNomeTorneio(e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: dataInicio,\n              onChange: e => setDataInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: horaInicio,\n              onChange: e => setHoraInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 663,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: tournamentsIcon,\n                alt: \"Tournament Icon\",\n                className: \"button-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 19\n              }, this), \"Iniciar Torneio\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add27Duplas,\n              children: \"Adicionar 27 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 15\n          }, this), grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado, jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 737,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"DUPLAS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 738,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ranking.map((posição, index) => {\n              let medalha = '';\n              let color = '#000';\n              if (posição.lugar === 1) {\n                medalha = '🥇';\n                color = 'gold';\n              } else if (posição.lugar === 2) {\n                medalha = '🥈';\n                color = 'silver';\n              } else if (posição.lugar === 3) {\n                medalha = '🥉';\n                color = 'brown';\n              }\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color\n                  },\n                  children: [medalha, \" \", posição.lugar, \"\\xBA Colocado\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 757,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: posição.dupla.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 758,\n                  columnNumber: 15\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 756,\n                columnNumber: 13\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relatorio-estatisticas\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Estat\\xEDsticas Gerais do Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 7\n          }, this), (() => {\n            const {\n              totalPartidas,\n              totalGames,\n              estatisticasDuplas,\n              melhorCampanha\n            } = gerarRelatorioEstatisticas();\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Partidas Disputadas:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 772,\n                  columnNumber: 16\n                }, this), \" \", totalPartidas]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 772,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Games Disputados:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 773,\n                  columnNumber: 16\n                }, this), \" \", totalGames]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 773,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Melhor Campanha:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 774,\n                  columnNumber: 16\n                }, this), \" \", melhorCampanha.dupla, \" (Saldo de Games: \", melhorCampanha.saldoGames, \", \", melhorCampanha.vitorias, \" vit\\xF3rias em \", melhorCampanha.jogos, \" jogos)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Estat\\xEDsticas por Dupla\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 775,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"POSI\\xC7\\xC3O\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 779,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DUPLA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 780,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"PARTIDAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 781,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"VIT\\xD3RIAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 782,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"GAMES (V/P)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 783,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"SALDO GAMES\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 784,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"APROVEITAMENTO\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 785,\n                      columnNumber: 19\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 778,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 777,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: estatisticasDuplas.map((dupla, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 791,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.dupla\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 792,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.jogos\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 793,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.vitorias\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 794,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.gamesVencidos, \"/\", dupla.gamesPerdidos]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 795,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.saldoGames\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 796,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.aproveitamento, \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 797,\n                      columnNumber: 21\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 790,\n                    columnNumber: 19\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 788,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 776,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true);\n          })(), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Torneio Finalizado em \", new Date().toLocaleString('pt-BR'), \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 638,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xa+QbAJ78cWlCefFgZhZPJUvZRw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DuplasList","FaseDeGrupos","FaseEliminatoria","avancarRodadaEliminatoria","FaseFinal","dividirGrupos","criarJogosParaGrupo","classificarDuplasPorDesempate","gameDay","btConnectLogo","tournamentsIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","faseAtual","setFaseAtual","grupos","setGrupos","jogosEliminatoria","setJogosEliminatoria","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","duplasBye","setDuplasBye","historicoDuplas","setHistoricoDuplas","dataCriacaoTorneio","setDataCriacaoTorneio","nomeTorneio","setNomeTorneio","dataInicio","setDataInicio","horaInicio","setHoraInicio","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","ano","mes","dia","split","map","Number","hora","minuto","dataTorneio","Date","duplasSorteadas","sort","Math","random","gruposCriados","gruposComJogos","grupo","jogos","id","historicoInicial","reduce","acc","join","pontos","jogosVencidos","gamesVencidos","gamesPerdidos","console","log","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","classificados","rankingGrupo1","rankingGrupo2","semifinalMatches","dupla1","dupla2","placar","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","Array","isArray","error","dupla1Str","dupla2Str","prev","novoHistorico","forEach","g1","g2","chave1","chave2","rankingGeral","duplasByeLocal","duplasQuartas","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","prevJogos","j","updatedJogos","iniciarFinal","semifinalGames","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","updated","novaRodada","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","String","getDate","padStart","getMonth","getHours","className","children","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","gerarRelatorioEstatisticas","totalPartidas","totalGames","estatisticasDuplas","Object","values","dados","_ranking$find","aproveitamento","toFixed","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","add8Duplas","newDuplas","add27Duplas","onClick","src","alt","type","value","onChange","e","target","toUpperCase","placeholder","onAddDupla","onRemoveDupla","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","medalha","color","style","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport { avancarRodadaEliminatoria } from './utils/torneioUtils';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport './App.css';\nimport { dividirGrupos, criarJogosParaGrupo, classificarDuplasPorDesempate } from './utils/torneioUtils';\nimport gameDay from './assets/img/game-day.svg'; // Importa a imagem SVG\nimport btConnectLogo from './assets/img/btConnect.png'; // Importa btConnect\nimport tournamentsIcon from './assets/icons/tournaments.svg'; // Ícone começar torneio\n\n\nfunction App() {\n  const [duplas, setDuplas] = useState([]);\n  const [faseAtual, setFaseAtual] = useState('duplas');\n  const [grupos, setGrupos] = useState([]);\n  const [jogosEliminatoria, setJogosEliminatoria] = useState([]);\n  const [finalConfigurada, setFinalConfigurada] = useState(false);\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(false);\n  const [ranking, setRanking] = useState([]);\n  const [duplasBye, setDuplasBye] = useState([]);\n  const [historicoDuplas, setHistoricoDuplas] = useState({});\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(null);\n  const [nomeTorneio, setNomeTorneio] = useState(''); // Novo estado\n  const [dataInicio, setDataInicio] = useState(''); // Novo estado (ex.: 2025-02-16)\n  const [horaInicio, setHoraInicio] = useState(''); // Novo estado (ex.: 12:00)\n\n  useEffect(() => {\n    // Pode ser usado para lógica de transição de fase ou atualização de UI\n  }, [duplas, grupos, jogosEliminatoria]);\n\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto);\n    setDataCriacaoTorneio(dataTorneio);\n  \n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n  \n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n  \n    // Inicializar historicoDuplas com todas as duplas\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n    setHistoricoDuplas(historicoInicial);\n    console.log('Histórico Inicial:', historicoInicial);\n  \n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      // Caso específico para 10 duplas: 2 grupos de 5, direto para semifinais\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n  \n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) =>\n        index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1])\n      );\n  \n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n  \n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n  \n      // Atualizar histórico acumulando os dados\n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        todosOsJogos.forEach(jogo => {\n          const [g1, g2] = jogo.placar.split('-').map(Number);\n          const chave1 = jogo.dupla1.join('');\n          const chave2 = jogo.dupla2.join('');\n          if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n          if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n          novoHistorico[chave1].jogos += 1;\n          novoHistorico[chave2].jogos += 1;\n          if (g1 > g2) {\n            novoHistorico[chave1].pontos += 5;\n            novoHistorico[chave1].jogosVencidos += 1;\n            novoHistorico[chave1].gamesVencidos += g1;\n            novoHistorico[chave1].gamesPerdidos += g2;\n            novoHistorico[chave2].pontos += 2;\n            novoHistorico[chave2].gamesVencidos += g2;\n            novoHistorico[chave2].gamesPerdidos += g1;\n          } else {\n            novoHistorico[chave2].pontos += 5;\n            novoHistorico[chave2].jogosVencidos += 1;\n            novoHistorico[chave2].gamesVencidos += g2;\n            novoHistorico[chave2].gamesPerdidos += g1;\n            novoHistorico[chave1].pontos += 2;\n            novoHistorico[chave1].gamesVencidos += g1;\n            novoHistorico[chave1].gamesPerdidos += g2;\n          }\n        });\n        console.log('Histórico após Fase de Grupos:', novoHistorico);\n        return novoHistorico;\n      });\n  \n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n  \n      if (duplas.length <= 11) { // Até 11 duplas: 2 BYEs + 4 nas quartas\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n  \n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n  \n        const jogosQuartas = [\n          { dupla1: [...duplasQuartas[0]], dupla2: [...duplasQuartas[1]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 },\n          { dupla1: [...duplasQuartas[2]], dupla2: [...duplasQuartas[3]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 }\n        ];\n  \n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else { // Mais de 11 duplas: Chave eliminatória ajustada para 16 duplas\n        const top16 = rankingGeral.slice(0, 16); // Pegar apenas as 16 melhores\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n  \n        setJogosEliminatoria(jogosOitavas); // 8 jogos nas oitavas\n        setDuplasBye([]); // Sem BYEs fixos, já ajustado na chave\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos =>\n        prevJogos.map(j =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        )\n      );\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Eliminatória (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n  \n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n\n    setJogosEliminatoria(prev => [\n      ...prev,\n      {\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1 // Próxima rodada\n      },\n      {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1\n      }\n    ]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      // Atualizar histórico acumulando os dados\n      const [g1, g2] = placar.split('-').map(Number);\n      const chave1 = jogo.dupla1.join('');\n      const chave2 = jogo.dupla2.join('');\n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Final:', novoHistorico);\n        return novoHistorico;\n      });\n  \n      return updatedJogos;\n    });\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      // Para ≤ 11 duplas: Usa BYEs fixos\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n\n      const semifinalMatches = [\n        { dupla1: [...duplasBye[0]], dupla2: [...vencedoresQuartas[0]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n        { dupla1: [...duplasBye[1]], dupla2: [...vencedoresQuartas[1]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n      ];\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else if (jogosRodadaAtual.length > 1) {\n      // Para > 11 duplas: Avança normalmente com vencedores\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n    setFaseAtual('finalizado');\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido); // Verifica se todos os placares foram submetidos\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(j =>\n                j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              // Só exibe \"✓\" se todos os jogos foram submetidos e a dupla está entre as duas primeiras\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar ? (g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate') : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(dataCriacaoTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor = jogo.placar && jogo.submetido\n                  ? (parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & '))\n                  : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  const gerarRelatorioEstatisticas = () => {\n    // Total de partidas e games\n    const todosOsJogos = [\n      ...grupos.flatMap(grupo => grupo.jogos),\n      ...jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')\n    ].filter(jogo => jogo.submetido);\n  \n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n  \n    // Estatísticas por dupla (usando todas as duplas do historicoDuplas)\n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      const aproveitamento = dados.jogos > 0 ? ((dados.jogosVencidos / dados.jogos) * 100).toFixed(2) : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ranking.find(r => r.dupla.join('') === dados.dupla.join(''))?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      // Ordenar por posição no ranking, depois por saldo de games\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames; // Para duplas sem ranking, ordenar por saldo\n    });\n  \n    // Melhor campanha (baseado no maior saldo de games)\n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => {\n      return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n    }, estatisticasDuplas[0] || { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 });\n  \n    console.log('Estatísticas por Dupla:', estatisticasDuplas);\n    console.log('Melhor Campanha Calculada:', melhorCampanha);\n  \n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n\n  // Função para adicionar automaticamente 8 duplas\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  // Adicione o botão na UI\n  <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={nomeTorneio}\n                  onChange={(e) => setNomeTorneio(e.target.value.toUpperCase())}\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={dataInicio}\n                  onChange={(e) => setDataInicio(e.target.value)}\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={horaInicio}\n                  onChange={(e) => setHoraInicio(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button className=\"iniciar-torneio\" onClick={startTournament}>\n                  <img src={tournamentsIcon} alt=\"Tournament Icon\" className=\"button-icon\" />\n                  Iniciar Torneio\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n                <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n              </div>\n\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {grupos.map(grupo => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado}\n            {jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))}\n            </div>\n          </>\n        )}\n{faseAtual === 'finalizado' && (\n  <>\n    <h3>Ranking Final:</h3>\n    <table>\n      <thead>\n        <tr>\n          <th>POSIÇÃO</th>\n          <th>DUPLAS</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ranking.map((posição, index) => {\n          let medalha = '';\n          let color = '#000';\n          if (posição.lugar === 1) {\n            medalha = '🥇';\n            color = 'gold';\n          } else if (posição.lugar === 2) {\n            medalha = '🥈';\n            color = 'silver';\n          } else if (posição.lugar === 3) {\n            medalha = '🥉';\n            color = 'brown';\n          }\n          return (\n            <tr key={index}>\n              <td style={{ color }}>{medalha} {posição.lugar}º Colocado</td>\n              <td>{posição.dupla.join(' & ')}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n\n    {/* Relatório de Estatísticas */}\n    <div className=\"relatorio-estatisticas\">\n      <h3>Estatísticas Gerais do Torneio</h3>\n      {(() => {\n        const { totalPartidas, totalGames, estatisticasDuplas, melhorCampanha } = gerarRelatorioEstatisticas();\n        return (\n          <>\n            <p><strong>Total de Partidas Disputadas:</strong> {totalPartidas}</p>\n            <p><strong>Total de Games Disputados:</strong> {totalGames}</p>\n            <p><strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (Saldo de Games: {melhorCampanha.saldoGames}, {melhorCampanha.vitorias} vitórias em {melhorCampanha.jogos} jogos)</p>\n            <h4>Estatísticas por Dupla</h4>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLA</th>\n                  <th>PARTIDAS</th>\n                  <th>VITÓRIAS</th>\n                  <th>GAMES (V/P)</th>\n                  <th>SALDO GAMES</th>\n                  <th>APROVEITAMENTO</th>\n                </tr>\n              </thead>\n              <tbody>\n                {estatisticasDuplas.map((dupla, index) => (\n                  <tr key={index}>\n                    <td>{dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'}</td>\n                    <td>{dupla.dupla}</td>\n                    <td>{dupla.jogos}</td>\n                    <td>{dupla.vitorias}</td>\n                    <td>{dupla.gamesVencidos}/{dupla.gamesPerdidos}</td>\n                    <td>{dupla.saldoGames}</td>\n                    <td>{dupla.aproveitamento}%</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        );\n      })()}\n      <p>Torneio Finalizado em {new Date().toLocaleString('pt-BR')}!</p>\n    </div>\n  </>\n)}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}