{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Netto\\\\Desktop\\\\Meus projetos\\\\torneioBT\\\\gerenciador-beach-tennis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport { saveTournament, loadTournaments, deleteTournament } from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [duplas, setDuplas] = useState(() => {\n    const savedDuplas = localStorage.getItem('torneioDuplas');\n    return savedDuplas ? JSON.parse(savedDuplas) : [];\n  });\n  const [faseAtual, setFaseAtual] = useState(() => localStorage.getItem('torneioFaseAtual') || 'duplas');\n  const [grupos, setGrupos] = useState(() => {\n    const savedGrupos = localStorage.getItem('torneioGrupos');\n    return savedGrupos ? JSON.parse(savedGrupos) : [];\n  });\n  const [jogosEliminatoria, setJogosEliminatoria] = useState(() => {\n    const savedJogos = localStorage.getItem('torneioJogosEliminatoria');\n    return savedJogos ? JSON.parse(savedJogos) : [];\n  });\n  const [finalConfigurada, setFinalConfigurada] = useState(() => localStorage.getItem('torneioFinalConfigurada') === 'true');\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(() => localStorage.getItem('torneioTerceiroLugarConfigurado') === 'true');\n  const [ranking, setRanking] = useState(() => {\n    const savedRanking = localStorage.getItem('torneioRanking');\n    return savedRanking ? JSON.parse(savedRanking) : [];\n  });\n  const [duplasBye, setDuplasBye] = useState(() => {\n    const savedDuplasBye = localStorage.getItem('torneioDuplasBye');\n    return savedDuplasBye ? JSON.parse(savedDuplasBye) : [];\n  });\n  const [historicoDuplas, setHistoricoDuplas] = useState(() => {\n    const savedHistorico = localStorage.getItem('torneioHistoricoDuplas');\n    return savedHistorico ? JSON.parse(savedHistorico) : {};\n  });\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(() => localStorage.getItem('torneioDataCriacao') || null);\n  const [nomeTorneio, setNomeTorneio] = useState(() => localStorage.getItem('torneioNome') || '');\n  const [dataInicio, setDataInicio] = useState(() => localStorage.getItem('torneioDataInicio') || '');\n  const [horaInicio, setHoraInicio] = useState(() => localStorage.getItem('torneioHoraInicio') || '');\n\n  // Salvar estado no localStorage sempre que houver alterações\n  useEffect(() => {\n    localStorage.setItem('torneioDuplas', JSON.stringify(duplas));\n    localStorage.setItem('torneioFaseAtual', faseAtual);\n    localStorage.setItem('torneioGrupos', JSON.stringify(grupos));\n    localStorage.setItem('torneioJogosEliminatoria', JSON.stringify(jogosEliminatoria));\n    localStorage.setItem('torneioFinalConfigurada', finalConfigurada);\n    localStorage.setItem('torneioTerceiroLugarConfigurado', terceiroLugarConfigurado);\n    localStorage.setItem('torneioRanking', JSON.stringify(ranking));\n    localStorage.setItem('torneioDuplasBye', JSON.stringify(duplasBye));\n    localStorage.setItem('torneioHistoricoDuplas', JSON.stringify(historicoDuplas));\n    localStorage.setItem('torneioDataCriacao', dataCriacaoTorneio || '');\n    localStorage.setItem('torneioNome', nomeTorneio);\n    localStorage.setItem('torneioDataInicio', dataInicio);\n    localStorage.setItem('torneioHoraInicio', horaInicio);\n  }, [duplas, faseAtual, grupos, jogosEliminatoria, finalConfigurada, terceiroLugarConfigurado, ranking, duplasBye, historicoDuplas, dataCriacaoTorneio, nomeTorneio, dataInicio, horaInicio]);\n  const addDupla = dupla => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n  const removeDupla = index => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto);\n    setDataCriacaoTorneio(dataTorneio.toISOString()); // Armazenar como string ISO\n\n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n\n    // Inicializar historicoDuplas com todas as duplas\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = {\n        dupla,\n        pontos: 0,\n        jogos: 0,\n        jogosVencidos: 0,\n        gamesVencidos: 0,\n        gamesPerdidos: 0\n      };\n      return acc;\n    }, {});\n    setHistoricoDuplas(historicoInicial);\n    console.log('Histórico Inicial:', historicoInicial);\n    setFaseAtual('grupos');\n  };\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    setHistoricoDuplas(prev => {\n      const novoHistorico = {\n        ...prev\n      };\n      todosOsJogos.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      console.log('Histórico após Fase de Grupos:', novoHistorico);\n      console.log('Total de jogos registrados na fase de grupos:', todosOsJogos.length);\n      return novoHistorico;\n    });\n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [{\n        dupla1: rankingGrupo1[0],\n        dupla2: rankingGrupo2[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }, {\n        dupla1: rankingGrupo2[0],\n        dupla2: rankingGrupo1[1],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: 1\n      }];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) => index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1]));\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n      if (duplas.length <= 11) {\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n        const jogosQuartas = [{\n          dupla1: [...duplasQuartas[0]],\n          dupla2: [...duplasQuartas[1]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }, {\n          dupla1: [...duplasQuartas[2]],\n          dupla2: [...duplasQuartas[3]],\n          placar: '',\n          submetido: false,\n          fase: 'Quartas de Final',\n          rodada: 1\n        }];\n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n        setJogosEliminatoria(jogosOitavas);\n        setDuplasBye([]);\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos => prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: 'BYE',\n        submetido: true\n      } : j));\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Eliminatória (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n      return updatedJogos;\n    });\n  };\n  const iniciarFinal = jogos => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n    setJogosEliminatoria(prev => [...prev, {\n      dupla1: finalistas[0],\n      dupla2: finalistas[1],\n      placar: '',\n      submetido: false,\n      fase: 'Final',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }, {\n      dupla1: perdedores[0],\n      dupla2: perdedores[1],\n      placar: '',\n      submetido: false,\n      fase: 'Disputa 3º Lugar',\n      rodada: Math.max(...prev.map(j => j.rodada)) + 1\n    }]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j => j === jogo ? {\n        ...j,\n        placar: placar,\n        submetido: true\n      } : j);\n      setHistoricoDuplas(prev => {\n        const novoHistorico = {\n          ...prev\n        };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = {\n          dupla: jogo.dupla1,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = {\n          dupla: jogo.dupla2,\n          pontos: 0,\n          jogos: 0,\n          jogosVencidos: 0,\n          gamesVencidos: 0,\n          gamesPerdidos: 0\n        };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Final (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n      return updatedJogos;\n    });\n  };\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n      const semifinalMatches = [{\n        dupla1: [...duplasBye[0]],\n        dupla2: [...vencedoresQuartas[0]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }, {\n        dupla1: [...duplasBye[1]],\n        dupla2: [...vencedoresQuartas[1]],\n        placar: '',\n        submetido: false,\n        fase: 'Semifinal',\n        rodada: rodadaAtual + 1\n      }];\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2 ? [final.dupla1, final.dupla2] : [final.dupla2, final.dupla1];\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2 ? [terceiroLugar.dupla1, terceiroLugar.dupla2] : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n    setRanking([{\n      lugar: 1,\n      dupla: vencedorFinal\n    }, {\n      lugar: 2,\n      dupla: perdedorFinal\n    }, {\n      lugar: 3,\n      dupla: terceiro\n    }, {\n      lugar: 4,\n      dupla: quarto\n    }]);\n    setFaseAtual('finalizado');\n  };\n  const renderClassificacaoGrupo = grupo => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grupo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Grupo \", grupo.id + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGOS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"SETS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"CLASSIF.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ranking.map((dupla, index) => {\n            const jogosDupla = grupo.jogos.filter(j => j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join(''));\n            const jogosVencidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n            }).length;\n            const jogosPerdidos = jogosDupla.filter(j => {\n              if (!j.placar) return false;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n            }).length;\n            const setsVencidos = jogosVencidos;\n            const setsPerdidos = jogosPerdidos;\n            const gamesVencidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n            }, 0);\n            const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n              if (!j.placar) return acc;\n              const [g1, g2] = j.placar.split('-').map(Number);\n              return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n            }, 0);\n            const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dupla.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [jogosVencidos, \"/\", jogosPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [setsVencidos, \"/\", setsPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [gamesVencidos, \"/\", gamesPerdidos]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: classificado\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Jogos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"DATA/HORA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"PLACAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"JOGADORES 02\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"VENCEDOR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: grupo.jogos.map((jogo, idx) => {\n            const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n            const vencedor = jogo.placar ? g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate' : 'A definir';\n            const incrementoMinutos = idx * 30;\n            const dataHora = formatarDataHora(dataCriacaoTorneio, incrementoMinutos);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: idx + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dataHora\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla1.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.placar || 'Pendente'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: jogo.dupla2.join(' & ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: vencedor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 19\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this)]\n    }, `grupo-${grupo.id}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this);\n  };\n  const renderizarFaseEliminatoria = jogos => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      var _jogosDaRodada$;\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = ((_jogosDaRodada$ = jogosDaRodada[0]) === null || _jogosDaRodada$ === void 0 ? void 0 : _jogosDaRodada$.fase) || '';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rodada\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [fase, \" - Rodada \", rodada]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 01\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"PLACAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 576,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"JOGADORES 02\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 577,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"VENCEDOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: jogosDaRodada.map((jogo, index) => {\n              const vencedor = jogo.placar && jogo.submetido ? parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & ') : 'A definir';\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla1.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 588,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.placar || 'Pendente'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 589,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: jogo.dupla2.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 590,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: vencedor\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this)]\n      }, rodada, true, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [...grupos.flatMap(grupo => grupo.jogos), ...jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')].filter(jogo => jogo.submetido);\n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      var _ranking$find;\n      const aproveitamento = dados.jogos > 0 ? (dados.jogosVencidos / dados.jogos * 100).toFixed(2) : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ((_ranking$find = ranking.find(r => r.dupla.join('') === dados.dupla.join(''))) === null || _ranking$find === void 0 ? void 0 : _ranking$find.lugar) || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => {\n      return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n    }, estatisticasDuplas[0] || {\n      dupla: 'Nenhuma',\n      vitorias: 0,\n      jogos: 0,\n      saldoGames: 0\n    });\n    console.log('Estatísticas por Dupla:', estatisticasDuplas);\n    console.log('Melhor Campanha Calculada:', melhorCampanha);\n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n  const resetTournament = () => {\n    localStorage.clear();\n    setDuplas([]);\n    setFaseAtual('duplas');\n    setGrupos([]);\n    setJogosEliminatoria([]);\n    setFinalConfigurada(false);\n    setTerceiroLugarConfigurado(false);\n    setRanking([]);\n    setDuplasBye([]);\n    setHistoricoDuplas({});\n    setDataCriacaoTorneio(null);\n    setNomeTorneio('');\n    setDataInicio('');\n    setHoraInicio('');\n  };\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: btConnectLogo,\n        alt: \"btConnect Logo\",\n        className: \"header-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [faseAtual === 'duplas' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tournament-setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome do Torneio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: nomeTorneio,\n              onChange: e => setNomeTorneio(e.target.value.toUpperCase()),\n              placeholder: \"Nome do torneio\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Data de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: dataInicio,\n              onChange: e => setDataInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Hora de In\\xEDcio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 710,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: horaInicio,\n              onChange: e => setHoraInicio(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 711,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-section\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: gameDay,\n            alt: \"Game Day\",\n            className: \"tournament-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duplas-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"iniciar-torneio\",\n              onClick: startTournament,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: tournamentsIcon,\n                alt: \"Tournament Icon\",\n                className: \"button-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 724,\n                columnNumber: 19\n              }, this), \"Iniciar Torneio\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add8Duplas,\n              children: \"Adicionar 8 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: add27Duplas,\n              children: \"Adicionar 27 Duplas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DuplasList, {\n            duplas: duplas,\n            onAddDupla: addDupla,\n            onRemoveDupla: removeDupla\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 11\n      }, this), faseAtual === 'grupos' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaseDeGrupos, {\n          grupos: grupos,\n          onUpdateGroups: setGrupos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseGrupos,\n          children: \"Encerrar Fase de Grupos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase de Grupos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 15\n          }, this), grupos.map(grupo => renderClassificacaoGrupo(grupo))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'eliminatória' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Fase Eliminat\\xF3ria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseEliminatoria, {\n          jogos: jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada))),\n          onAtualizarPlacar: atualizarPlacarNaEliminatoria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: encerrarFaseEliminatoria,\n          children: \"Encerrar Etapa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Eliminat\\xF3ria\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'final' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final do Torneio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FaseFinal, {\n          jogos: jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'),\n          onAtualizarPlacar: atualizarPlacarNaFinal,\n          onFinalizarTorneio: finalizarTorneio\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 13\n        }, this), terceiroLugarConfigurado, jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizarTorneio,\n          children: \"Encerrar Campeonato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"acompanhamento\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Acompanhamento - Fase Final\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 15\n          }, this), renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 770,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), faseAtual === 'finalizado' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Ranking Final:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"POSI\\xC7\\xC3O\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 782,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"DUPLAS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 783,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 781,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 780,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: ranking.map((posição, index) => {\n              let medalha = '';\n              let color = '#000';\n              if (posição.lugar === 1) {\n                medalha = '🥇';\n                color = 'gold';\n              } else if (posição.lugar === 2) {\n                medalha = '🥈';\n                color = 'silver';\n              } else if (posição.lugar === 3) {\n                medalha = '🥉';\n                color = 'brown';\n              }\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  style: {\n                    color\n                  },\n                  children: [medalha, \" \", posição.lugar, \"\\xBA Colocado\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 802,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: posição.dupla.join(' & ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 15\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 801,\n                columnNumber: 13\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relatorio-estatisticas\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Estat\\xEDsticas Gerais do Torneio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 7\n          }, this), (() => {\n            const {\n              totalPartidas,\n              totalGames,\n              estatisticasDuplas,\n              melhorCampanha\n            } = gerarRelatorioEstatisticas();\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Partidas Disputadas:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 816,\n                  columnNumber: 16\n                }, this), \" \", totalPartidas]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 816,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Total de Games Disputados:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 817,\n                  columnNumber: 16\n                }, this), \" \", totalGames]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 817,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Melhor Campanha:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 818,\n                  columnNumber: 16\n                }, this), \" \", melhorCampanha.dupla, \" (Saldo de Games: \", melhorCampanha.saldoGames, \", \", melhorCampanha.vitorias, \" vit\\xF3rias em \", melhorCampanha.jogos, \" jogos)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 818,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Estat\\xEDsticas por Dupla\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 819,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"POSI\\xC7\\xC3O\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 823,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"DUPLA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 824,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"PARTIDAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 825,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"VIT\\xD3RIAS\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 826,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"GAMES (V/P)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 827,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"SALDO GAMES\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 828,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: \"APROVEITAMENTO\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 829,\n                      columnNumber: 19\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 822,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 821,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: estatisticasDuplas.map((dupla, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 835,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.dupla\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 836,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.jogos\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 837,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.vitorias\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 838,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.gamesVencidos, \"/\", dupla.gamesPerdidos]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 839,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: dupla.saldoGames\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 840,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: [dupla.aproveitamento, \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 841,\n                      columnNumber: 21\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 834,\n                    columnNumber: 19\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 832,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 820,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Torneio Finalizado em \", new Date().toLocaleString('pt-BR'), \"!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 846,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: resetTournament,\n                className: \"novo-torneio-btn\",\n                children: \"In\\xEDcio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 847,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true);\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 684,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rkao+FReGCe+gImUiQom6Wfyv84=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DuplasList","FaseDeGrupos","FaseEliminatoria","FaseFinal","saveTournament","loadTournaments","deleteTournament","gameDay","btConnectLogo","tournamentsIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","duplas","setDuplas","savedDuplas","localStorage","getItem","JSON","parse","faseAtual","setFaseAtual","grupos","setGrupos","savedGrupos","jogosEliminatoria","setJogosEliminatoria","savedJogos","finalConfigurada","setFinalConfigurada","terceiroLugarConfigurado","setTerceiroLugarConfigurado","ranking","setRanking","savedRanking","duplasBye","setDuplasBye","savedDuplasBye","historicoDuplas","setHistoricoDuplas","savedHistorico","dataCriacaoTorneio","setDataCriacaoTorneio","nomeTorneio","setNomeTorneio","dataInicio","setDataInicio","horaInicio","setHoraInicio","useEffect","setItem","stringify","addDupla","dupla","some","d","includes","prevDuplas","alert","removeDupla","index","filter","_","i","startTournament","length","ano","mes","dia","split","map","Number","hora","minuto","dataTorneio","Date","toISOString","duplasSorteadas","sort","Math","random","gruposCriados","dividirGrupos","gruposComJogos","grupo","jogos","criarJogosParaGrupo","id","historicoInicial","reduce","acc","join","pontos","jogosVencidos","gamesVencidos","gamesPerdidos","console","log","encerrarFaseGrupos","jogo","submetido","todosOsJogos","flatMap","prev","novoHistorico","forEach","g1","g2","placar","chave1","dupla1","chave2","dupla2","classificados","classificarDuplasPorDesempate","rankingGrupo1","rankingGrupo2","semifinalMatches","fase","rodada","classificadosPorGrupo","slice","flat","duplasUnicas","self","findIndex","jogosClassificados","Array","isArray","error","dupla1Str","dupla2Str","rankingGeral","duplasByeLocal","duplasQuartas","jogosQuartas","top16","jogosOitavas","push","atualizarPlacarNaEliminatoria","prevJogos","j","updatedJogos","iniciarFinal","semifinalGames","finalistas","set1","set2","perdedores","max","atualizarPlacarNaFinal","encerrarFaseEliminatoria","rodadaAtual","jogosRodadaAtual","every","vencedoresQuartas","updated","novaRodada","avancarRodadaEliminatoria","finalizarTorneio","final","find","terceiroLugar","finalSet1","finalSet2","vencedorFinal","perdedorFinal","terceiroSet1","terceiroSet2","terceiro","quarto","lugar","renderClassificacaoGrupo","todosSubmetidos","formatarDataHora","dataBase","incrementoMinutos","data","setMinutes","getMinutes","diasSemana","meses","diaSemana","getDay","String","getDate","padStart","getMonth","getHours","className","children","fileName","_jsxFileName","lineNumber","columnNumber","jogosDupla","jogosPerdidos","setsVencidos","setsPerdidos","classificado","idx","vencedor","dataHora","renderizarFaseEliminatoria","rodadas","Set","a","b","_jogosDaRodada$","jogosDaRodada","parseInt","gerarRelatorioEstatisticas","totalPartidas","totalGames","estatisticasDuplas","Object","values","dados","_ranking$find","aproveitamento","toFixed","saldoGames","posicaoRanking","r","vitorias","melhorCampanha","melhor","atual","resetTournament","clear","add8Duplas","newDuplas","add27Duplas","src","alt","type","value","onChange","e","target","toUpperCase","placeholder","onClick","onAddDupla","onRemoveDupla","onUpdateGroups","onAtualizarPlacar","onFinalizarTorneio","posição","medalha","color","style","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Netto/Desktop/Meus projetos/torneioBT/gerenciador-beach-tennis/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport DuplasList from './components/Duplas/DuplasList';\nimport FaseDeGrupos from './components/Torneio/FaseDeGrupos';\nimport FaseEliminatoria from './components/Torneio/FaseEliminatoria';\nimport FaseFinal from './components/Torneio/FaseFinal';\nimport { saveTournament, loadTournaments, deleteTournament } from './utils/torneioUtils';\nimport './App.css';\nimport gameDay from './assets/img/game-day.svg';\nimport btConnectLogo from './assets/img/btConnect.png';\nimport tournamentsIcon from './assets/icons/tournaments.svg';\n\nfunction App() {\n  const [duplas, setDuplas] = useState(() => {\n    const savedDuplas = localStorage.getItem('torneioDuplas');\n    return savedDuplas ? JSON.parse(savedDuplas) : [];\n  });\n  const [faseAtual, setFaseAtual] = useState(() => localStorage.getItem('torneioFaseAtual') || 'duplas');\n  const [grupos, setGrupos] = useState(() => {\n    const savedGrupos = localStorage.getItem('torneioGrupos');\n    return savedGrupos ? JSON.parse(savedGrupos) : [];\n  });\n  const [jogosEliminatoria, setJogosEliminatoria] = useState(() => {\n    const savedJogos = localStorage.getItem('torneioJogosEliminatoria');\n    return savedJogos ? JSON.parse(savedJogos) : [];\n  });\n  const [finalConfigurada, setFinalConfigurada] = useState(() => localStorage.getItem('torneioFinalConfigurada') === 'true');\n  const [terceiroLugarConfigurado, setTerceiroLugarConfigurado] = useState(() => localStorage.getItem('torneioTerceiroLugarConfigurado') === 'true');\n  const [ranking, setRanking] = useState(() => {\n    const savedRanking = localStorage.getItem('torneioRanking');\n    return savedRanking ? JSON.parse(savedRanking) : [];\n  });\n  const [duplasBye, setDuplasBye] = useState(() => {\n    const savedDuplasBye = localStorage.getItem('torneioDuplasBye');\n    return savedDuplasBye ? JSON.parse(savedDuplasBye) : [];\n  });\n  const [historicoDuplas, setHistoricoDuplas] = useState(() => {\n    const savedHistorico = localStorage.getItem('torneioHistoricoDuplas');\n    return savedHistorico ? JSON.parse(savedHistorico) : {};\n  });\n  const [dataCriacaoTorneio, setDataCriacaoTorneio] = useState(() => localStorage.getItem('torneioDataCriacao') || null);\n  const [nomeTorneio, setNomeTorneio] = useState(() => localStorage.getItem('torneioNome') || '');\n  const [dataInicio, setDataInicio] = useState(() => localStorage.getItem('torneioDataInicio') || '');\n  const [horaInicio, setHoraInicio] = useState(() => localStorage.getItem('torneioHoraInicio') || '');\n\n  // Salvar estado no localStorage sempre que houver alterações\n  useEffect(() => {\n    localStorage.setItem('torneioDuplas', JSON.stringify(duplas));\n    localStorage.setItem('torneioFaseAtual', faseAtual);\n    localStorage.setItem('torneioGrupos', JSON.stringify(grupos));\n    localStorage.setItem('torneioJogosEliminatoria', JSON.stringify(jogosEliminatoria));\n    localStorage.setItem('torneioFinalConfigurada', finalConfigurada);\n    localStorage.setItem('torneioTerceiroLugarConfigurado', terceiroLugarConfigurado);\n    localStorage.setItem('torneioRanking', JSON.stringify(ranking));\n    localStorage.setItem('torneioDuplasBye', JSON.stringify(duplasBye));\n    localStorage.setItem('torneioHistoricoDuplas', JSON.stringify(historicoDuplas));\n    localStorage.setItem('torneioDataCriacao', dataCriacaoTorneio || '');\n    localStorage.setItem('torneioNome', nomeTorneio);\n    localStorage.setItem('torneioDataInicio', dataInicio);\n    localStorage.setItem('torneioHoraInicio', horaInicio);\n  }, [\n    duplas,\n    faseAtual,\n    grupos,\n    jogosEliminatoria,\n    finalConfigurada,\n    terceiroLugarConfigurado,\n    ranking,\n    duplasBye,\n    historicoDuplas,\n    dataCriacaoTorneio,\n    nomeTorneio,\n    dataInicio,\n    horaInicio\n  ]);\n\n  const addDupla = (dupla) => {\n    if (!duplas.some(d => d.includes(dupla[0]) || d.includes(dupla[1]))) {\n      setDuplas(prevDuplas => [...prevDuplas, dupla]);\n    } else {\n      alert('Os nomes dos jogadores devem ser únicos. Um ou ambos já estão registrados.');\n    }\n  };\n\n  const removeDupla = (index) => {\n    setDuplas(duplas.filter((_, i) => i !== index));\n  };\n\n  const startTournament = () => {\n    if (duplas.length < 3) {\n      alert('É necessário pelo menos 3 duplas para começar o torneio.');\n      return;\n    }\n    if (!nomeTorneio || !dataInicio || !horaInicio) {\n      alert('Por favor, preencha o nome, data e hora de início do torneio.');\n      return;\n    }\n    const [ano, mes, dia] = dataInicio.split('-').map(Number);\n    const [hora, minuto] = horaInicio.split(':').map(Number);\n    const dataTorneio = new Date(ano, mes - 1, dia, hora, minuto);\n    setDataCriacaoTorneio(dataTorneio.toISOString()); // Armazenar como string ISO\n  \n    const duplasSorteadas = [...duplas].sort(() => Math.random() - 0.5);\n    const gruposCriados = dividirGrupos(duplasSorteadas);\n  \n    const gruposComJogos = gruposCriados.map(grupo => ({\n      ...grupo,\n      jogos: criarJogosParaGrupo(grupo.duplas, grupo.id)\n    }));\n    setGrupos(gruposComJogos);\n  \n    // Inicializar historicoDuplas com todas as duplas\n    const historicoInicial = duplasSorteadas.reduce((acc, dupla) => {\n      acc[dupla.join('')] = { dupla, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n      return acc;\n    }, {});\n    setHistoricoDuplas(historicoInicial);\n    console.log('Histórico Inicial:', historicoInicial);\n  \n    setFaseAtual('grupos');\n  };\n\n  const encerrarFaseGrupos = () => {\n    if (grupos.some(grupo => grupo.jogos.some(jogo => !jogo.submetido))) {\n      alert('Todos os jogos devem ser submetidos antes de encerrar a fase de grupos.');\n      return;\n    }\n  \n    const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n    setHistoricoDuplas(prev => {\n      const novoHistorico = { ...prev };\n      todosOsJogos.forEach(jogo => {\n        const [g1, g2] = jogo.placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n      });\n      console.log('Histórico após Fase de Grupos:', novoHistorico);\n      console.log('Total de jogos registrados na fase de grupos:', todosOsJogos.length);\n      return novoHistorico;\n    });\n  \n    if (duplas.length <= 5) {\n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const classificados = classificarDuplasPorDesempate(duplas, todosOsJogos);\n      alert(`Campeão: ${classificados[0].join(' e ')}`);\n      setFaseAtual('finalizado');\n    } else if (duplas.length === 10) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else if (duplas.length <= 8) {\n      const rankingGrupo1 = classificarDuplasPorDesempate(grupos[0].duplas, grupos[0].jogos);\n      const rankingGrupo2 = classificarDuplasPorDesempate(grupos[1].duplas, grupos[1].jogos);\n      const semifinalMatches = [\n        { dupla1: rankingGrupo1[0], dupla2: rankingGrupo2[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 },\n        { dupla1: rankingGrupo2[0], dupla2: rankingGrupo1[1], placar: '', submetido: false, fase: 'Semifinal', rodada: 1 }\n      ];\n      setJogosEliminatoria(semifinalMatches);\n      setFaseAtual('eliminatória');\n    } else {\n      const classificadosPorGrupo = grupos.map(grupo => {\n        return classificarDuplasPorDesempate(grupo.duplas, grupo.jogos).slice(0, 2);\n      }).flat();\n  \n      const duplasUnicas = classificadosPorGrupo.filter((dupla, index, self) =>\n        index === self.findIndex(d => d[0] === dupla[0] && d[1] === dupla[1])\n      );\n  \n      const todosOsJogos = grupos.flatMap(grupo => grupo.jogos);\n      const jogosClassificados = todosOsJogos.filter(jogo => {\n        if (!jogo.dupla1 || !jogo.dupla2 || !Array.isArray(jogo.dupla1) || !Array.isArray(jogo.dupla2)) {\n          console.error('Jogo inválido encontrado:', jogo);\n          return false;\n        }\n        const dupla1Str = jogo.dupla1.join('');\n        const dupla2Str = jogo.dupla2.join('');\n        return duplasUnicas.some(d => d.join('') === dupla1Str) && duplasUnicas.some(d => d.join('') === dupla2Str);\n      });\n  \n      console.log('Duplas classificadas:', duplasUnicas);\n      console.log('Jogos classificados:', jogosClassificados);\n  \n      const rankingGeral = classificarDuplasPorDesempate(duplasUnicas, jogosClassificados);\n  \n      if (duplas.length <= 11) {\n        const duplasByeLocal = rankingGeral.slice(0, 2);\n        const duplasQuartas = rankingGeral.slice(2, 6);\n  \n        if (duplasQuartas.length < 4) {\n          console.error('Erro: Menos de 4 duplas para as quartas:', duplasQuartas);\n          alert('Erro ao configurar as quartas de final. Verifique os dados.');\n          return;\n        }\n  \n        const jogosQuartas = [\n          { dupla1: [...duplasQuartas[0]], dupla2: [...duplasQuartas[1]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 },\n          { dupla1: [...duplasQuartas[2]], dupla2: [...duplasQuartas[3]], placar: '', submetido: false, fase: 'Quartas de Final', rodada: 1 }\n        ];\n  \n        setJogosEliminatoria(jogosQuartas);\n        setDuplasBye(duplasByeLocal);\n      } else {\n        const top16 = rankingGeral.slice(0, 16);\n        const jogosOitavas = [];\n        for (let i = 0; i < top16.length; i += 2) {\n          jogosOitavas.push({\n            dupla1: [...top16[i]],\n            dupla2: [...top16[i + 1]],\n            placar: '',\n            submetido: false,\n            fase: 'Oitavas de Final',\n            rodada: 1\n          });\n        }\n  \n        setJogosEliminatoria(jogosOitavas);\n        setDuplasBye([]);\n      }\n      setFaseAtual('eliminatória');\n    }\n  };\n\n  const atualizarPlacarNaEliminatoria = (jogo, placar) => {\n    if (jogo.dupla1[0] === 'BYE' || jogo.dupla2[0] === 'BYE') {\n      setJogosEliminatoria(prevJogos =>\n        prevJogos.map(j =>\n          j === jogo ? { ...j, placar: 'BYE', submetido: true } : j\n        )\n      );\n      return;\n    }\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Eliminatória (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n  \n      return updatedJogos;\n    });\n  };\n\n  const iniciarFinal = (jogos) => {\n    const semifinalGames = jogos.filter(jogo => jogo.fase === 'Semifinal');\n    if (semifinalGames.length !== 2) {\n      console.error('Erro: Esperados 2 jogos de semifinal.');\n      return;\n    }\n\n    const finalistas = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n    });\n\n    const perdedores = semifinalGames.map(jogo => {\n      const [set1, set2] = jogo.placar.split('-').map(Number);\n      return set1 > set2 ? jogo.dupla2 : jogo.dupla1;\n    });\n\n    setJogosEliminatoria(prev => [\n      ...prev,\n      {\n        dupla1: finalistas[0],\n        dupla2: finalistas[1],\n        placar: '',\n        submetido: false,\n        fase: 'Final',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1\n      },\n      {\n        dupla1: perdedores[0],\n        dupla2: perdedores[1],\n        placar: '',\n        submetido: false,\n        fase: 'Disputa 3º Lugar',\n        rodada: Math.max(...prev.map(j => j.rodada)) + 1\n      }\n    ]);\n    setFinalConfigurada(true);\n    setTerceiroLugarConfigurado(true);\n  };\n\n  const atualizarPlacarNaFinal = (jogo, placar) => {\n    setJogosEliminatoria(prevJogos => {\n      const updatedJogos = prevJogos.map(j =>\n        j === jogo ? { ...j, placar: placar, submetido: true } : j\n      );\n  \n      setHistoricoDuplas(prev => {\n        const novoHistorico = { ...prev };\n        const [g1, g2] = placar.split('-').map(Number);\n        const chave1 = jogo.dupla1.join('');\n        const chave2 = jogo.dupla2.join('');\n        if (!novoHistorico[chave1]) novoHistorico[chave1] = { dupla: jogo.dupla1, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        if (!novoHistorico[chave2]) novoHistorico[chave2] = { dupla: jogo.dupla2, pontos: 0, jogos: 0, jogosVencidos: 0, gamesVencidos: 0, gamesPerdidos: 0 };\n        novoHistorico[chave1].jogos += 1;\n        novoHistorico[chave2].jogos += 1;\n        if (g1 > g2) {\n          novoHistorico[chave1].pontos += 5;\n          novoHistorico[chave1].jogosVencidos += 1;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n          novoHistorico[chave2].pontos += 2;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n        } else {\n          novoHistorico[chave2].pontos += 5;\n          novoHistorico[chave2].jogosVencidos += 1;\n          novoHistorico[chave2].gamesVencidos += g2;\n          novoHistorico[chave2].gamesPerdidos += g1;\n          novoHistorico[chave1].pontos += 2;\n          novoHistorico[chave1].gamesVencidos += g1;\n          novoHistorico[chave1].gamesPerdidos += g2;\n        }\n        console.log('Histórico após Final (jogo):', novoHistorico);\n        return novoHistorico;\n      });\n  \n      return updatedJogos;\n    });\n  };\n\n  const encerrarFaseEliminatoria = () => {\n    const rodadaAtual = Math.max(...jogosEliminatoria.map(j => j.rodada));\n    const jogosRodadaAtual = jogosEliminatoria.filter(j => j.rodada === rodadaAtual);\n\n    if (!jogosRodadaAtual.every(j => j.submetido)) {\n      alert('Todos os jogos da rodada atual devem ser submetidos antes de avançar.');\n      return;\n    }\n\n    console.log('Jogos da rodada atual:', jogosRodadaAtual);\n    console.log('Duplas BYE:', duplasBye);\n    console.log('Historico Duplas:', historicoDuplas);\n\n    if (jogosRodadaAtual.some(j => j.fase === 'Semifinal') && !finalConfigurada) {\n      iniciarFinal(jogosEliminatoria);\n      setFaseAtual('final');\n    } else if (jogosRodadaAtual.some(j => j.fase === 'Quartas de Final') && duplas.length <= 11) {\n      const vencedoresQuartas = jogosRodadaAtual.map(jogo => {\n        const [set1, set2] = jogo.placar.split('-').map(Number);\n        return set1 > set2 ? jogo.dupla1 : jogo.dupla2;\n      });\n\n      if (duplasBye.length !== 2) {\n        alert('Erro: Duplas com BYE não encontradas.');\n        console.log('duplasBye:', duplasBye);\n        console.log('Vencedores Quartas:', vencedoresQuartas);\n        return;\n      }\n\n      const semifinalMatches = [\n        { dupla1: [...duplasBye[0]], dupla2: [...vencedoresQuartas[0]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 },\n        { dupla1: [...duplasBye[1]], dupla2: [...vencedoresQuartas[1]], placar: '', submetido: false, fase: 'Semifinal', rodada: rodadaAtual + 1 }\n      ];\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...semifinalMatches];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else if (jogosRodadaAtual.length > 1) {\n      const novaRodada = avancarRodadaEliminatoria(jogosRodadaAtual);\n      setJogosEliminatoria(prev => {\n        const updated = [...prev.filter(j => j.rodada < rodadaAtual + 1), ...novaRodada];\n        console.log('Novo estado jogosEliminatoria:', updated);\n        return updated;\n      });\n    } else {\n      alert('Não há mais rodadas para avançar.');\n    }\n  };\n\n  const finalizarTorneio = () => {\n    const final = jogosEliminatoria.find(jogo => jogo.fase === 'Final');\n    const terceiroLugar = jogosEliminatoria.find(jogo => jogo.fase === 'Disputa 3º Lugar');\n\n    if (!final || !terceiroLugar || !final.placar || !terceiroLugar.placar) {\n      alert('Erro: Final ou Disputa de 3º Lugar não estão completos.');\n      console.log('jogosEliminatoria:', jogosEliminatoria);\n      return;\n    }\n\n    const [finalSet1, finalSet2] = final.placar.split('-').map(Number);\n    const [vencedorFinal, perdedorFinal] = finalSet1 > finalSet2\n      ? [final.dupla1, final.dupla2]\n      : [final.dupla2, final.dupla1];\n\n    const [terceiroSet1, terceiroSet2] = terceiroLugar.placar.split('-').map(Number);\n    const [terceiro, quarto] = terceiroSet1 > terceiroSet2\n      ? [terceiroLugar.dupla1, terceiroLugar.dupla2]\n      : [terceiroLugar.dupla2, terceiroLugar.dupla1];\n\n    setRanking([\n      { lugar: 1, dupla: vencedorFinal },\n      { lugar: 2, dupla: perdedorFinal },\n      { lugar: 3, dupla: terceiro },\n      { lugar: 4, dupla: quarto }\n    ]);\n    setFaseAtual('finalizado');\n  };\n\n  const renderClassificacaoGrupo = (grupo) => {\n    const ranking = classificarDuplasPorDesempate(grupo.duplas, grupo.jogos);\n    const todosSubmetidos = grupo.jogos.every(jogo => jogo.submetido);\n\n    const formatarDataHora = (dataBase, incrementoMinutos) => {\n      if (!dataBase) return 'Pendente';\n      const data = new Date(dataBase);\n      data.setMinutes(data.getMinutes() + incrementoMinutos);\n      const diasSemana = ['DOM', 'SEG', 'TER', 'QUA', 'QUI', 'SEX', 'SAB'];\n      const meses = ['JAN', 'FEV', 'MAR', 'ABR', 'MAI', 'JUN', 'JUL', 'AGO', 'SET', 'OUT', 'NOV', 'DEZ'];\n      const diaSemana = diasSemana[data.getDay()];\n      const dia = String(data.getDate()).padStart(2, '0');\n      const mes = meses[data.getMonth()];\n      const hora = String(data.getHours()).padStart(2, '0');\n      const minuto = String(data.getMinutes()).padStart(2, '0');\n      return `${diaSemana}, ${dia}${mes} - ${hora}:${minuto}`;\n    };\n\n    return (\n      <div key={`grupo-${grupo.id}`} className=\"grupo\">\n        <h3>Grupo {grupo.id + 1}</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>JOGADORES</th>\n              <th>JOGOS</th>\n              <th>SETS</th>\n              <th>GAMES</th>\n              <th>CLASSIF.</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ranking.map((dupla, index) => {\n              const jogosDupla = grupo.jogos.filter(j =>\n                j.dupla1.join('') === dupla.join('') || j.dupla2.join('') === dupla.join('')\n              );\n              const jogosVencidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 > g2 : g2 > g1;\n              }).length;\n              const jogosPerdidos = jogosDupla.filter(j => {\n                if (!j.placar) return false;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return j.dupla1.join('') === dupla.join('') ? g1 < g2 : g2 < g1;\n              }).length;\n              const setsVencidos = jogosVencidos;\n              const setsPerdidos = jogosPerdidos;\n              const gamesVencidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g1 : g2);\n              }, 0);\n              const gamesPerdidos = jogosDupla.reduce((acc, j) => {\n                if (!j.placar) return acc;\n                const [g1, g2] = j.placar.split('-').map(Number);\n                return acc + (j.dupla1.join('') === dupla.join('') ? g2 : g1);\n              }, 0);\n              const classificado = todosSubmetidos && index < 2 ? '✓' : '';\n\n              return (\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>{dupla.join(' & ')}</td>\n                  <td>{jogosVencidos}/{jogosPerdidos}</td>\n                  <td>{setsVencidos}/{setsPerdidos}</td>\n                  <td>{gamesVencidos}/{gamesPerdidos}</td>\n                  <td>{classificado}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <h4>Jogos</h4>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>DATA/HORA</th>\n              <th>JOGADORES 01</th>\n              <th>PLACAR</th>\n              <th>JOGADORES 02</th>\n              <th>VENCEDOR</th>\n            </tr>\n          </thead>\n          <tbody>\n            {grupo.jogos.map((jogo, idx) => {\n              const [g1, g2] = jogo.placar ? jogo.placar.split('-').map(Number) : [0, 0];\n              const vencedor = jogo.placar ? (g1 > g2 ? jogo.dupla1.join(' & ') : g2 > g1 ? jogo.dupla2.join(' & ') : 'Empate') : 'A definir';\n              const incrementoMinutos = idx * 30;\n              const dataHora = formatarDataHora(dataCriacaoTorneio, incrementoMinutos);\n              return (\n                <tr key={idx}>\n                  <td>{idx + 1}</td>\n                  <td>{dataHora}</td>\n                  <td>{jogo.dupla1.join(' & ')}</td>\n                  <td>{jogo.placar || 'Pendente'}</td>\n                  <td>{jogo.dupla2.join(' & ')}</td>\n                  <td>{vencedor}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  const renderizarFaseEliminatoria = (jogos) => {\n    const rodadas = [...new Set(jogos.map(j => j.rodada))].sort((a, b) => a - b);\n    return rodadas.map(rodada => {\n      const jogosDaRodada = jogos.filter(j => j.rodada === rodada);\n      const fase = jogosDaRodada[0]?.fase || '';\n      return (\n        <div key={rodada} className=\"rodada\">\n          <h3>{fase} - Rodada {rodada}</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>JOGADORES 01</th>\n                <th>PLACAR</th>\n                <th>JOGADORES 02</th>\n                <th>VENCEDOR</th>\n              </tr>\n            </thead>\n            <tbody>\n              {jogosDaRodada.map((jogo, index) => {\n                const vencedor = jogo.placar && jogo.submetido\n                  ? (parseInt(jogo.placar.split('-')[0]) > parseInt(jogo.placar.split('-')[1]) ? jogo.dupla1.join(' & ') : jogo.dupla2.join(' & '))\n                  : 'A definir';\n                return (\n                  <tr key={index}>\n                    <td>{jogo.dupla1.join(' & ')}</td>\n                    <td>{jogo.placar || 'Pendente'}</td>\n                    <td>{jogo.dupla2.join(' & ')}</td>\n                    <td>{vencedor}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    });\n  };\n\n  const gerarRelatorioEstatisticas = () => {\n    const todosOsJogos = [\n      ...grupos.flatMap(grupo => grupo.jogos),\n      ...jogosEliminatoria.filter(jogo => jogo.placar !== 'BYE')\n    ].filter(jogo => jogo.submetido);\n  \n    const totalPartidas = todosOsJogos.length;\n    const totalGames = todosOsJogos.reduce((acc, jogo) => {\n      const [g1, g2] = jogo.placar.split('-').map(Number);\n      return acc + g1 + g2;\n    }, 0);\n  \n    const estatisticasDuplas = Object.values(historicoDuplas).map(dados => {\n      const aproveitamento = dados.jogos > 0 ? ((dados.jogosVencidos / dados.jogos) * 100).toFixed(2) : 0;\n      const saldoGames = dados.gamesVencidos - dados.gamesPerdidos;\n      const posicaoRanking = ranking.find(r => r.dupla.join('') === dados.dupla.join(''))?.lugar || '-';\n      return {\n        dupla: dados.dupla.join(' & '),\n        jogos: dados.jogos,\n        vitorias: dados.jogosVencidos,\n        gamesVencidos: dados.gamesVencidos,\n        gamesPerdidos: dados.gamesPerdidos,\n        saldoGames,\n        aproveitamento,\n        posicaoRanking\n      };\n    }).sort((a, b) => {\n      if (a.posicaoRanking === '-' && b.posicaoRanking !== '-') return 1;\n      if (b.posicaoRanking === '-' && a.posicaoRanking !== '-') return -1;\n      if (a.posicaoRanking !== '-' && b.posicaoRanking !== '-') return a.posicaoRanking - b.posicaoRanking;\n      return b.saldoGames - a.saldoGames;\n    });\n  \n    const melhorCampanha = estatisticasDuplas.reduce((melhor, atual) => {\n      return atual.saldoGames > melhor.saldoGames ? atual : melhor;\n    }, estatisticasDuplas[0] || { dupla: 'Nenhuma', vitorias: 0, jogos: 0, saldoGames: 0 });\n  \n    console.log('Estatísticas por Dupla:', estatisticasDuplas);\n    console.log('Melhor Campanha Calculada:', melhorCampanha);\n  \n    return {\n      totalPartidas,\n      totalGames,\n      estatisticasDuplas,\n      melhorCampanha\n    };\n  };\n\n  const resetTournament = () => {\n    localStorage.clear();\n    setDuplas([]);\n    setFaseAtual('duplas');\n    setGrupos([]);\n    setJogosEliminatoria([]);\n    setFinalConfigurada(false);\n    setTerceiroLugarConfigurado(false);\n    setRanking([]);\n    setDuplasBye([]);\n    setHistoricoDuplas({});\n    setDataCriacaoTorneio(null);\n    setNomeTorneio('');\n    setDataInicio('');\n    setHoraInicio('');\n  };\n\n  const add8Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 8; i++) {\n      newDuplas.push([`JOGADOR${i * 2 - 1}`, `JOGADOR${i * 2}`]);\n    }\n    setDuplas(prevDuplas => [...prevDuplas, ...newDuplas]);\n  };\n\n  const add27Duplas = () => {\n    const newDuplas = [];\n    for (let i = 1; i <= 27; i++) {\n      newDuplas.push([`Jogador${i * 2 - 1}`, `Jogador${i * 2}`]);\n    }\n    setDuplas(newDuplas);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={btConnectLogo} alt=\"btConnect Logo\" className=\"header-logo\" />\n      </header>\n      <main>\n        {faseAtual === 'duplas' && (\n          <div className=\"tournament-setup\">\n            <div className=\"input-section\">\n              <div className=\"input-container\">\n                <label>Nome do Torneio:</label>\n                <input\n                  type=\"text\"\n                  value={nomeTorneio}\n                  onChange={(e) => setNomeTorneio(e.target.value.toUpperCase())}\n                  placeholder=\"Nome do torneio\"\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Data de Início:</label>\n                <input\n                  type=\"date\"\n                  value={dataInicio}\n                  onChange={(e) => setDataInicio(e.target.value)}\n                />\n              </div>\n              <div className=\"input-container\">\n                <label>Hora de Início:</label>\n                <input\n                  type=\"time\"\n                  value={horaInicio}\n                  onChange={(e) => setHoraInicio(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"image-section\">\n              <img src={gameDay} alt=\"Game Day\" className=\"tournament-image\" />\n            </div>\n            <div className=\"duplas-section\">\n              <div className=\"button-container\">\n                <button className=\"iniciar-torneio\" onClick={startTournament}>\n                  <img src={tournamentsIcon} alt=\"Tournament Icon\" className=\"button-icon\" />\n                  Iniciar Torneio\n                </button>\n                <button onClick={add8Duplas}>Adicionar 8 Duplas</button>\n                <button onClick={add27Duplas}>Adicionar 27 Duplas</button>\n              </div>\n              <DuplasList duplas={duplas} onAddDupla={addDupla} onRemoveDupla={removeDupla} />\n            </div>\n          </div>\n        )}\n        {faseAtual === 'grupos' && (\n          <>\n            <FaseDeGrupos grupos={grupos} onUpdateGroups={setGrupos} />\n            <button onClick={encerrarFaseGrupos}>Encerrar Fase de Grupos</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase de Grupos</h2>\n              {grupos.map(grupo => renderClassificacaoGrupo(grupo))}\n            </div>\n          </>\n        )}\n        {faseAtual === 'eliminatória' && (\n          <>\n            <h2>Fase Eliminatória</h2>\n            <FaseEliminatoria\n              jogos={jogosEliminatoria.filter(jogo => !jogo.submetido || jogo.rodada === Math.max(...jogosEliminatoria.map(j => j.rodada)))}\n              onAtualizarPlacar={atualizarPlacarNaEliminatoria}\n            />\n            <button onClick={encerrarFaseEliminatoria}>Encerrar Etapa</button>\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Eliminatória</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria)}\n            </div>\n          </>\n        )}\n        {faseAtual === 'final' && (\n          <>\n            <h2>Final do Torneio</h2>\n            <FaseFinal\n              jogos={jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar')}\n              onAtualizarPlacar={atualizarPlacarNaFinal}\n              onFinalizarTorneio={finalizarTorneio}\n            />\n            {terceiroLugarConfigurado}\n            {jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar').every(jogo => jogo.submetido) && (\n              <button onClick={finalizarTorneio}>Encerrar Campeonato</button>\n            )}\n            <div className=\"acompanhamento\">\n              <h2>Acompanhamento - Fase Final</h2>\n              {renderizarFaseEliminatoria(jogosEliminatoria.filter(jogo => jogo.fase === 'Final' || jogo.fase === 'Disputa 3º Lugar'))}\n            </div>\n          </>\n        )}\n{faseAtual === 'finalizado' && (\n  <>\n    <h3>Ranking Final:</h3>\n    <table>\n      <thead>\n        <tr>\n          <th>POSIÇÃO</th>\n          <th>DUPLAS</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ranking.map((posição, index) => {\n          let medalha = '';\n          let color = '#000';\n          if (posição.lugar === 1) {\n            medalha = '🥇';\n            color = 'gold';\n          } else if (posição.lugar === 2) {\n            medalha = '🥈';\n            color = 'silver';\n          } else if (posição.lugar === 3) {\n            medalha = '🥉';\n            color = 'brown';\n          }\n          return (\n            <tr key={index}>\n              <td style={{ color }}>{medalha} {posição.lugar}º Colocado</td>\n              <td>{posição.dupla.join(' & ')}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n\n    <div className=\"relatorio-estatisticas\">\n      <h3>Estatísticas Gerais do Torneio</h3>\n      {(() => {\n        const { totalPartidas, totalGames, estatisticasDuplas, melhorCampanha } = gerarRelatorioEstatisticas();\n        return (\n          <>\n            <p><strong>Total de Partidas Disputadas:</strong> {totalPartidas}</p>\n            <p><strong>Total de Games Disputados:</strong> {totalGames}</p>\n            <p><strong>Melhor Campanha:</strong> {melhorCampanha.dupla} (Saldo de Games: {melhorCampanha.saldoGames}, {melhorCampanha.vitorias} vitórias em {melhorCampanha.jogos} jogos)</p>\n            <h4>Estatísticas por Dupla</h4>\n            <table>\n              <thead>\n                <tr>\n                  <th>POSIÇÃO</th>\n                  <th>DUPLA</th>\n                  <th>PARTIDAS</th>\n                  <th>VITÓRIAS</th>\n                  <th>GAMES (V/P)</th>\n                  <th>SALDO GAMES</th>\n                  <th>APROVEITAMENTO</th>\n                </tr>\n              </thead>\n              <tbody>\n                {estatisticasDuplas.map((dupla, index) => (\n                  <tr key={index}>\n                    <td>{dupla.posicaoRanking !== '-' ? `${dupla.posicaoRanking}º` : '-'}</td>\n                    <td>{dupla.dupla}</td>\n                    <td>{dupla.jogos}</td>\n                    <td>{dupla.vitorias}</td>\n                    <td>{dupla.gamesVencidos}/{dupla.gamesPerdidos}</td>\n                    <td>{dupla.saldoGames}</td>\n                    <td>{dupla.aproveitamento}%</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <p>Torneio Finalizado em {new Date().toLocaleString('pt-BR')}!</p>\n            <button onClick={resetTournament} className=\"novo-torneio-btn\">Início</button>\n          </>\n        );\n      })()}\n    </div>\n  </>\n)}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}